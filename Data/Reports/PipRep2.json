{
  "version": "0",
  "pip_version": "22.3.1",
  "install": [
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/77/2b/b4c0b7a3f3d61adb1a1e0b78f90a94e2b6162a043880704b7437ef297cad/anyio-3.6.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=fbbe32bd270d2a2ef3ed1c5d45041250284e31fc0a4df4a5a6071842051a51e3"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "anyio",
        "version": "3.6.2",
        "summary": "High level compatibility layer for multiple asynchronous event loop implementations",
        "author": "Alex Grönholm",
        "author_email": "alex.gronholm@nextday.fi",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Framework :: AnyIO",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_dist": [
          "idna (>=2.8)",
          "sniffio (>=1.1)",
          "contextvars ; python_version < \"3.7\"",
          "dataclasses ; python_version < \"3.7\"",
          "typing-extensions ; python_version < \"3.8\"",
          "packaging ; extra == 'doc'",
          "sphinx-rtd-theme ; extra == 'doc'",
          "sphinx-autodoc-typehints (>=1.2.0) ; extra == 'doc'",
          "coverage[toml] (>=4.5) ; extra == 'test'",
          "hypothesis (>=4.0) ; extra == 'test'",
          "pytest (>=7.0) ; extra == 'test'",
          "pytest-mock (>=3.6.1) ; extra == 'test'",
          "trustme ; extra == 'test'",
          "contextlib2 ; (python_version < \"3.7\") and extra == 'test'",
          "uvloop (<0.15) ; (python_version < \"3.7\" and (platform_python_implementation == \"CPython\" and platform_system != \"Windows\")) and extra == 'test'",
          "mock (>=4) ; (python_version < \"3.8\") and extra == 'test'",
          "uvloop (>=0.15) ; (python_version >= \"3.7\" and (platform_python_implementation == \"CPython\" and platform_system != \"Windows\")) and extra == 'test'",
          "trio (<0.22,>=0.16) ; extra == 'trio'"
        ],
        "requires_python": ">=3.6.2",
        "project_url": [
          "Documentation, https://anyio.readthedocs.io/en/latest/",
          "Source code, https://github.com/agronholm/anyio",
          "Issue tracker, https://github.com/agronholm/anyio/issues"
        ],
        "provides_extra": [
          "doc",
          "test",
          "trio"
        ],
        "description": ".. image:: https://github.com/agronholm/anyio/actions/workflows/test.yml/badge.svg\n  :target: https://github.com/agronholm/anyio/actions/workflows/test.yml\n  :alt: Build Status\n.. image:: https://coveralls.io/repos/github/agronholm/anyio/badge.svg?branch=master\n  :target: https://coveralls.io/github/agronholm/anyio?branch=master\n  :alt: Code Coverage\n.. image:: https://readthedocs.org/projects/anyio/badge/?version=latest\n  :target: https://anyio.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation\n.. image:: https://badges.gitter.im/gitterHQ/gitter.svg\n  :target: https://gitter.im/python-trio/AnyIO\n  :alt: Gitter chat\n\nAnyIO is an asynchronous networking and concurrency library that works on top of either asyncio_ or\ntrio_. It implements trio-like `structured concurrency`_ (SC) on top of asyncio, and works in harmony\nwith the native SC of trio itself.\n\nApplications and libraries written against AnyIO's API will run unmodified on either asyncio_ or\ntrio_. AnyIO can also be adopted into a library or application incrementally – bit by bit, no full\nrefactoring necessary. It will blend in with native libraries of your chosen backend.\n\nDocumentation\n-------------\n\nView full documentation at: https://anyio.readthedocs.io/\n\nFeatures\n--------\n\nAnyIO offers the following functionality:\n\n* Task groups (nurseries_ in trio terminology)\n* High level networking (TCP, UDP and UNIX sockets)\n\n  * `Happy eyeballs`_ algorithm for TCP connections (more robust than that of asyncio on Python\n    3.8)\n  * async/await style UDP sockets (unlike asyncio where you still have to use Transports and\n    Protocols)\n\n* A versatile API for byte streams and object streams\n* Inter-task synchronization and communication (locks, conditions, events, semaphores, object\n  streams)\n* Worker threads\n* Subprocesses\n* Asynchronous file I/O (using worker threads)\n* Signal handling\n\nAnyIO also comes with its own pytest_ plugin which also supports asynchronous fixtures.\nIt even works with the popular Hypothesis_ library.\n\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _trio: https://github.com/python-trio/trio\n.. _structured concurrency: https://en.wikipedia.org/wiki/Structured_concurrency\n.. _nurseries: https://trio.readthedocs.io/en/stable/reference-core.html#nurseries-and-spawning\n.. _Happy eyeballs: https://en.wikipedia.org/wiki/Happy_Eyeballs\n.. _pytest: https://docs.pytest.org/en/latest/\n.. _Hypothesis: https://hypothesis.works/\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/a8/07/946d5a9431bae05a776a59746ec385fbb79b526738d25e4202d3e0bbf7f4/argon2_cffi-21.3.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8c976986f2c5c0e5000919e6de187906cfd81fb1c72bf9d88c01177e77da7f80"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "argon2-cffi",
        "version": "21.3.0",
        "summary": "The secure Argon2 password hashing algorithm.",
        "description_content_type": "text/x-rst",
        "keywords": [
          "password",
          "hash",
          "hashing",
          "security"
        ],
        "author_email": "Hynek Schlawack <hs@ox.cx>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX",
          "Operating System :: Unix",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Programming Language :: Python",
          "Topic :: Security :: Cryptography",
          "Topic :: Security",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "argon2-cffi-bindings",
          "dataclasses; python_version < '3.7'",
          "typing-extensions; python_version < '3.8'",
          "pre-commit ; extra == \"dev\"",
          "cogapp ; extra == \"dev\"",
          "tomli ; extra == \"dev\"",
          "coverage[toml]>=5.0.2 ; extra == \"dev\"",
          "hypothesis ; extra == \"dev\"",
          "pytest ; extra == \"dev\"",
          "sphinx ; extra == \"dev\"",
          "sphinx-notfound-page ; extra == \"dev\"",
          "furo ; extra == \"dev\"",
          "sphinx ; extra == \"docs\"",
          "sphinx-notfound-page ; extra == \"docs\"",
          "furo ; extra == \"docs\"",
          "coverage[toml]>=5.0.2 ; extra == \"tests\"",
          "hypothesis ; extra == \"tests\"",
          "pytest ; extra == \"tests\""
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Changelog, https://github.com/hynek/argon2-cffi/blob/main/CHANGELOG.md",
          "Documentation, https://argon2-cffi.readthedocs.io/",
          "Funding, https://github.com/sponsors/hynek",
          "Ko-fi, https://ko-fi.com/the_hynek",
          "Source Code, https://github.com/hynek/argon2-cffi",
          "Tidelift, https://tidelift.com/subscription/pkg/pypi-argon2-cffi?utm_source=pypi-argon2-cffi&utm_medium=pypi"
        ],
        "provides_extra": [
          "dev",
          "docs",
          "tests"
        ],
        "description": "===================\n*Argon2* for Python\n===================\n\n.. image:: https://img.shields.io/badge/Docs-Read%20The%20Docs-black\n   :target: https://argon2-cffi.readthedocs.io/\n   :alt: Documentation\n\n.. image:: https://img.shields.io/badge/license-MIT-C06524\n   :target: https://github.com/hynek/argon2-cffi/blob/main/LICENSE\n   :alt: License: MIT\n\n.. image:: https://img.shields.io/pypi/v/argon2-cffi\n   :target: https://pypi.org/project/argon2-cffi/\n   :alt: PyPI version\n\n.. image:: https://static.pepy.tech/personalized-badge/argon2-cffi?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads%20/%20Month\n   :target: https://pepy.tech/project/argon2-cffi\n   :alt: Downloads / Month\n\n\n.. -begin-short-\n\n`Argon2 <https://github.com/p-h-c/phc-winner-argon2>`_ won the `Password Hashing Competition <https://www.password-hashing.net/>`_ and *argon2-cffi* is the simplest way to use it in Python and PyPy:\n\n.. code-block:: pycon\n\n  >>> from argon2 import PasswordHasher\n  >>> ph = PasswordHasher()\n  >>> hash = ph.hash(\"correct horse battery staple\")\n  >>> hash  # doctest: +SKIP\n  '$argon2id$v=19$m=65536,t=3,p=4$MIIRqgvgQbgj220jfp0MPA$YfwJSVjtjSU0zzV/P3S9nnQ/USre2wvJMjfCIjrTQbg'\n  >>> ph.verify(hash, \"correct horse battery staple\")\n  True\n  >>> ph.check_needs_rehash(hash)\n  False\n  >>> ph.verify(hash, \"Tr0ub4dor&3\")\n  Traceback (most recent call last):\n    ...\n  argon2.exceptions.VerifyMismatchError: The password does not match the supplied hash\n\n.. -end-short-\n\n\n.. -begin-meta-\n\nProject Information\n===================\n\n\n*argon2-cffi* is available from `PyPI <https://pypi.org/project/argon2-cffi/>`_, the documentation lives at `Read the Docs <https://argon2-cffi.readthedocs.io/>`_, the code on `GitHub <https://github.com/hynek/argon2-cffi>`_.\nThe low-level Argon2 CFFI bindings are maintained in the separate project `argon2-cffi-bindings <https://github.com/hynek/argon2-cffi-bindings>`_.\n\nIt targets Python 3.6 and newer, and PyPy3.\nThe last version that works with Python 2.7 is 20.1.0, and the last version that works with Python 3.5 is 21.1.0.\n\n*argon2-cffi* implements *Argon2* version 1.3, as described in\n`Argon2: the memory-hard function for password hashing and other applications <https://www.cryptolux.org/images/0/0d/Argon2.pdf>`_.\n\n\n*argon2-cffi* for Enterprise\n----------------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of *argon2-cffi* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use. `Learn more. <https://tidelift.com/subscription/pkg/pypi-argon2-cffi?utm_source=undefined&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\n.. -end-meta-\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ec/f7/378254e6dd7ae6f31fe40c8649eea7d4832a42243acaf0f1fff9083b2bed/argon2_cffi_bindings-21.2.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "argon2-cffi-bindings",
        "version": "21.2.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Low-level CFFI bindings for Argon2",
        "description_content_type": "text/markdown",
        "keywords": [
          "password",
          "hash",
          "hashing",
          "security",
          "bindings",
          "cffi"
        ],
        "home_page": "https://github.com/hynek/argon2-cffi-bindings",
        "author": "Hynek Schlawack",
        "author_email": "hs@ox.cx",
        "maintainer": "Hynek Schlawack",
        "maintainer_email": "hs@ox.cx",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX",
          "Operating System :: Unix",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Programming Language :: Python",
          "Topic :: Security :: Cryptography",
          "Topic :: Security",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "cffi (>=1.0.1)",
          "pytest ; extra == 'dev'",
          "cogapp ; extra == 'dev'",
          "pre-commit ; extra == 'dev'",
          "wheel ; extra == 'dev'",
          "pytest ; extra == 'tests'"
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Source Code, https://github.com/hynek/argon2-cffi-bindings",
          "Funding, https://github.com/sponsors/hynek",
          "Tidelift, https://tidelift.com/subscription/pkg/pypi-argon2-cffi?utm_source=pypi-argon2-cffi&utm_medium=pypi",
          "Ko-fi, https://ko-fi.com/the_hynek"
        ],
        "provides_extra": [
          "dev",
          "tests"
        ],
        "description": "# Low-level Python CFFI Bindings for Argon2\n\n*argon2-cffi-bindings* provides low-level [*CFFI*](https://cffi.readthedocs.io/) bindings to the [*Argon2*] password hashing algorithm including a vendored version of them.\n\n<!-- [[[cog\n# Extract commit ID; refresh using `tox -e cog`\nimport subprocess\nout = subprocess.check_output([\"git\", \"submodule\"], text=True)\nid = out.strip().split(\" \", 1)[0]\nlink = f'[**`{id[:7]}`**](https://github.com/P-H-C/phc-winner-argon2/commit/{id})'\nprint(f\"The currently vendored *Argon2* commit ID is {link}.\")\n]]] -->\nThe currently vendored *Argon2* commit ID is [**`f57e61e`**](https://github.com/P-H-C/phc-winner-argon2/commit/f57e61e19229e23c4445b85494dbf7c07de721cb).\n<!-- [[[end]]] -->\n\n> If you want to hash passwords in an application, this package is **not** for you.\n> Have a look at [*argon2-cffi*] with its high-level abstractions!\n\nThese bindings have been extracted from [*argon2-cffi*] and it remains its main consumer.\nHowever, they may be used by other packages that want to use the *Argon2* library without dealing with C-related complexities.\n\n\n## Usage\n\n*argon2-cffi-bindings* is available from [PyPI](https://pypi.org/project/argon2-cffi-bindings/).\nThe provided *CFFI* bindings are compiled in API mode.\n\nBest effort is given to provide binary wheels for as many platforms as possible.\n\n\n### Disabling Vendored Code\n\nA copy of [*Argon2*] is vendored and used by default, but can be disabled if *argon2-cffi-bindings* is installed using:\n\n```console\n$ env ARGON2_CFFI_USE_SYSTEM=1 \\\n  python -m pip install --no-binary=argon2-cffi-bindings argon2-cffi-bindings\n```\n\n\n### Overriding Automatic *SSE2* Detection\n\nUsually the build process tries to guess whether or not it should use [*SSE2*](https://en.wikipedia.org/wiki/SSE2)-optimized code (see [`_ffi_build.py`](https://github.com/hynek/argon2-cffi-bindings/blob/main/src/_argon2_cffi_bindings/_ffi_build.py) for details).\nThis can go wrong and is problematic for cross-compiling.\n\nTherefore you can use the `ARGON2_CFFI_USE_SSE2` environment variable to control the process:\n\n- If you set it to ``1``, *argon2-cffi-bindings* will build **with** SSE2 support.\n- If you set it to ``0``, *argon2-cffi-bindings* will build **without** SSE2 support.\n- If you set it to anything else, it will be ignored and *argon2-cffi-bindings* will try to guess.\n\nHowever, if our heuristics fail you, we would welcome a bug report.\n\n\n### Python API\n\nSince this package is intended to be an implementation detail, it uses a private module name to prevent your users from using it by accident.\n\nTherefore you have to import the symbols from `_argon2_cffi_bindings`:\n\n```python\nfrom _argon2_cffi_bindings import ffi, lib\n```\n\nPlease refer to [*cffi* documentation](https://cffi.readthedocs.io/en/latest/using.html) on how to use the `ffi` and `lib` objects.\n\nThe list of symbols that are provided can be found in the [`_ffi_build.py` file](https://github.com/hynek/argon2-cffi-bindings/blob/main/src/_argon2_cffi_bindings/_ffi_build.py).\n\n[*Argon2*]: https://github.com/p-h-c/phc-winner-argon2\n[*argon2-cffi*]: https://argon2-cffi.readthedocs.io/\n\n\n## Project Information\n\n*argon2-cffi-bindings* is available under the MIT license, available from [PyPI](https://pypi.org/project/argon2-cffi-bindings/), the source code and documentation can be found on [GitHub](https://github.com/hynek/argon2-cffi-bindings).\n\n*argon2-cffi-bindings* targets Python 3.6 and later, including PyPy3.\n\n\n### Credits & License\n\n*argon2-cffi-bindings* is written and maintained by [Hynek Schlawack](https://hynek.me/about/).\nIt is released under the [MIT license](https://github.com/hynek/argon2-cffi/blob/main/LICENSE>).\n\nThe development is kindly supported by [Variomedia AG](https://www.variomedia.de/).\n\nThe authors of *Argon2* were very helpful to get the library to compile on ancient versions of Visual Studio for ancient versions of Python.\n\nThe documentation quotes frequently in verbatim from the *Argon2* [paper](https://www.password-hashing.net/argon2-specs.pdf) to avoid mistakes by rephrasing.\n\n\n#### Vendored Code\n\nThe original *Argon2* repo can be found at <https://github.com/P-H-C/phc-winner-argon2/>.\n\nExcept for the components listed below, the *Argon2* code in this repository is copyright (c) 2015 Daniel Dinu, Dmitry Khovratovich (main authors), Jean-Philippe Aumasson and Samuel Neves, and under [CC0] license.\n\nThe string encoding routines in src/encoding.c are copyright (c) 2015 Thomas Pornin, and under [CC0] license.\n\nThe [*BLAKE2*](https://www.blake2.net) code in ``src/blake2/`` is copyright (c) Samuel Neves, 2013-2015, and under [CC0] license.\n\n[CC0]: https://creativecommons.org/publicdomain/zero/1.0/\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/23/f7/19e20888d0b1e44b40c2795894a05e7be1f631c09949f7e0b177df1ab7a2/asttokens-2.1.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=1b28ed85e254b724439afc783d4bee767f780b936c3fe8b3275332f42cf5f561"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "asttokens",
        "version": "2.1.0",
        "summary": "Annotate AST trees with source code positions",
        "keywords": [
          "code",
          "ast",
          "parse",
          "tokenize",
          "refactor"
        ],
        "home_page": "https://github.com/gristlabs/asttokens",
        "author": "Dmitry Sagalovskiy, Grist Labs",
        "author_email": "dmitry@getgrist.com",
        "license": "Apache 2.0",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Software Development :: Code Generators",
          "Topic :: Software Development :: Compilers",
          "Topic :: Software Development :: Interpreters",
          "Topic :: Software Development :: Pre-processors",
          "Environment :: Console",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy"
        ],
        "requires_dist": [
          "six",
          "typing ; python_version < \"3.5\"",
          "astroid (<=2.5.3) ; extra == 'test'",
          "pytest ; extra == 'test'"
        ],
        "provides_extra": [
          "test"
        ],
        "description": "ASTTokens\n=========\n\n.. image:: https://img.shields.io/pypi/v/asttokens.svg\n    :target: https://pypi.python.org/pypi/asttokens/\n.. image:: https://img.shields.io/pypi/pyversions/asttokens.svg\n    :target: https://pypi.python.org/pypi/asttokens/\n.. image:: https://github.com/gristlabs/asttokens/actions/workflows/build-and-test.yml/badge.svg\n    :target: https://github.com/gristlabs/asttokens/actions/workflows/build-and-test.yml\n.. image:: https://readthedocs.org/projects/asttokens/badge/?version=latest\n    :target: http://asttokens.readthedocs.io/en/latest/index.html\n.. image:: https://coveralls.io/repos/github/gristlabs/asttokens/badge.svg\n    :target: https://coveralls.io/github/gristlabs/asttokens\n\n.. Start of user-guide\n\nThe ``asttokens`` module annotates Python abstract syntax trees (ASTs) with the positions of tokens\nand text in the source code that generated them.\n\nIt makes it possible for tools that work with logical AST nodes to find the particular text that\nresulted in those nodes, for example for automated refactoring or highlighting.\n\nInstallation\n------------\nasttokens is available on PyPI: https://pypi.python.org/pypi/asttokens/::\n\n    pip install asttokens\n\nThe code is on GitHub: https://github.com/gristlabs/asttokens.\n\nThe API Reference is here: http://asttokens.readthedocs.io/en/latest/api-index.html.\n\nUsage\n-----\nASTTokens works with both Python2 and Python3.\n\nASTTokens can annotate both trees built by `ast <https://docs.python.org/2/library/ast.html>`_,\nAND those built by `astroid <https://github.com/PyCQA/astroid>`_.\n\nHere's an example:\n\n.. code-block:: python\n\n    import asttokens, ast\n    source = \"Robot('blue').walk(steps=10*n)\"\n    atok = asttokens.ASTTokens(source, parse=True)\n\nOnce the tree has been marked, nodes get ``.first_token``, ``.last_token`` attributes, and\nthe ``ASTTokens`` object offers helpful methods:\n\n.. code-block:: python\n\n    attr_node = next(n for n in ast.walk(atok.tree) if isinstance(n, ast.Attribute))\n    print(atok.get_text(attr_node))\n    start, end = attr_node.last_token.startpos, attr_node.last_token.endpos\n    print(atok.text[:start] + 'RUN' + atok.text[end:])\n\nWhich produces this output:\n\n.. code-block:: text\n\n    Robot('blue').walk\n    Robot('blue').RUN(steps=10*n)\n\nThe ``ASTTokens`` object also offers methods to walk and search the list of tokens that make up\nthe code (or a particular AST node), which is more useful and powerful than dealing with the text\ndirectly.\n\n\nContribute\n----------\n\nTo contribute:\n\n1. Fork this repository, and clone your fork.\n2. Install the package with test dependencies (ideally in a virtualenv) with::\n\n    pip install -e '.[test]'\n\n3. Run tests in your current interpreter with the command ``pytest`` or ``python -m pytest``.\n4. Run tests across all supported interpreters with the ``tox`` command. You will need to have the interpreters installed separately. We recommend ``pyenv`` for that. Use ``tox -p auto`` to run the tests in parallel.\n5. By default certain tests which take a very long time to run are skipped, but they are run on travis CI. To run them locally, set the environment variable ``ASTTOKENS_SLOW_TESTS``. For example run ``ASTTOKENS_SLOW_TESTS=1 tox`` to run the full suite of tests.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/f2/bc/d817287d1aa01878af07c19505fafd1165cd6a119e9d0821ca1d1c20312d/attrs-22.1.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=86efa402f67bf2df34f51a335487cf46b1ec130d02b8d39fd248abfd30da551c"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "attrs",
        "version": "22.1.0",
        "summary": "Classes Without Boilerplate",
        "description_content_type": "text/x-rst",
        "keywords": [
          "class",
          "attribute",
          "boilerplate"
        ],
        "home_page": "https://www.attrs.org/",
        "author": "Hynek Schlawack",
        "author_email": "hs@ox.cx",
        "maintainer": "Hynek Schlawack",
        "maintainer_email": "hs@ox.cx",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Natural Language :: English",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "coverage[toml] (>=5.0.2) ; extra == 'dev'",
          "hypothesis ; extra == 'dev'",
          "pympler ; extra == 'dev'",
          "pytest (>=4.3.0) ; extra == 'dev'",
          "mypy (!=0.940,>=0.900) ; extra == 'dev'",
          "pytest-mypy-plugins ; extra == 'dev'",
          "zope.interface ; extra == 'dev'",
          "furo ; extra == 'dev'",
          "sphinx ; extra == 'dev'",
          "sphinx-notfound-page ; extra == 'dev'",
          "pre-commit ; extra == 'dev'",
          "cloudpickle ; (platform_python_implementation == \"CPython\") and extra == 'dev'",
          "furo ; extra == 'docs'",
          "sphinx ; extra == 'docs'",
          "zope.interface ; extra == 'docs'",
          "sphinx-notfound-page ; extra == 'docs'",
          "coverage[toml] (>=5.0.2) ; extra == 'tests'",
          "hypothesis ; extra == 'tests'",
          "pympler ; extra == 'tests'",
          "pytest (>=4.3.0) ; extra == 'tests'",
          "mypy (!=0.940,>=0.900) ; extra == 'tests'",
          "pytest-mypy-plugins ; extra == 'tests'",
          "zope.interface ; extra == 'tests'",
          "cloudpickle ; (platform_python_implementation == \"CPython\") and extra == 'tests'",
          "coverage[toml] (>=5.0.2) ; extra == 'tests_no_zope'",
          "hypothesis ; extra == 'tests_no_zope'",
          "pympler ; extra == 'tests_no_zope'",
          "pytest (>=4.3.0) ; extra == 'tests_no_zope'",
          "mypy (!=0.940,>=0.900) ; extra == 'tests_no_zope'",
          "pytest-mypy-plugins ; extra == 'tests_no_zope'",
          "cloudpickle ; (platform_python_implementation == \"CPython\") and extra == 'tests_no_zope'"
        ],
        "requires_python": ">=3.5",
        "project_url": [
          "Documentation, https://www.attrs.org/",
          "Changelog, https://www.attrs.org/en/stable/changelog.html",
          "Bug Tracker, https://github.com/python-attrs/attrs/issues",
          "Source Code, https://github.com/python-attrs/attrs",
          "Funding, https://github.com/sponsors/hynek",
          "Tidelift, https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=pypi",
          "Ko-fi, https://ko-fi.com/the_hynek"
        ],
        "provides_extra": [
          "dev",
          "docs",
          "tests",
          "tests_no_zope"
        ],
        "description": "\n.. image:: https://www.attrs.org/en/stable/_static/attrs_logo.png\n   :alt: attrs logo\n   :align: center\n\n\n``attrs`` is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka `dunder methods <https://www.attrs.org/en/latest/glossary.html#term-dunder-methods>`_).\n`Trusted by NASA <https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement>`_ for Mars missions since 2020!\n\nIts main goal is to help you to write **concise** and **correct** software without slowing down your code.\n\n.. teaser-end\n\nFor that, it gives you a class decorator and a way to declaratively define the attributes on that class:\n\n.. -code-begin-\n\n.. code-block:: pycon\n\n   >>> from attrs import asdict, define, make_class, Factory\n\n   >>> @define\n   ... class SomeClass:\n   ...     a_number: int = 42\n   ...     list_of_numbers: list[int] = Factory(list)\n   ...\n   ...     def hard_math(self, another_number):\n   ...         return self.a_number + sum(self.list_of_numbers) * another_number\n\n\n   >>> sc = SomeClass(1, [1, 2, 3])\n   >>> sc\n   SomeClass(a_number=1, list_of_numbers=[1, 2, 3])\n\n   >>> sc.hard_math(3)\n   19\n   >>> sc == SomeClass(1, [1, 2, 3])\n   True\n   >>> sc != SomeClass(2, [3, 2, 1])\n   True\n\n   >>> asdict(sc)\n   {'a_number': 1, 'list_of_numbers': [1, 2, 3]}\n\n   >>> SomeClass()\n   SomeClass(a_number=42, list_of_numbers=[])\n\n   >>> C = make_class(\"C\", [\"a\", \"b\"])\n   >>> C(\"foo\", \"bar\")\n   C(a='foo', b='bar')\n\n\nAfter *declaring* your attributes, ``attrs`` gives you:\n\n- a concise and explicit overview of the class's attributes,\n- a nice human-readable ``__repr__``,\n- equality-checking methods,\n- an initializer,\n- and much more,\n\n*without* writing dull boilerplate code again and again and *without* runtime performance penalties.\n\n**Hate type annotations**!?\nNo problem!\nTypes are entirely **optional** with ``attrs``.\nSimply assign ``attrs.field()`` to the attributes instead of annotating them with types.\n\n----\n\nThis example uses ``attrs``'s modern APIs that have been introduced in version 20.1.0, and the ``attrs`` package import name that has been added in version 21.3.0.\nThe classic APIs (``@attr.s``, ``attr.ib``, plus their serious-business aliases) and the ``attr`` package import name will remain **indefinitely**.\n\nPlease check out `On The Core API Names <https://www.attrs.org/en/latest/names.html>`_ for a more in-depth explanation.\n\n\nData Classes\n============\n\nOn the tin, ``attrs`` might remind you of ``dataclasses`` (and indeed, ``dataclasses`` `are a descendant <https://hynek.me/articles/import-attrs/>`_ of ``attrs``).\nIn practice it does a lot more and is more flexible.\nFor instance it allows you to define `special handling of NumPy arrays for equality checks <https://www.attrs.org/en/stable/comparison.html#customization>`_, or allows more ways to `plug into the initialization process <https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization>`_.\n\nFor more details, please refer to our `comparison page <https://www.attrs.org/en/stable/why.html#data-classes>`_.\n\n.. -project-information-\n\nProject Information\n===================\n\n- **License**: `MIT <https://choosealicense.com/licenses/mit/>`_\n- **PyPI**: https://pypi.org/project/attrs/\n- **Source Code**: https://github.com/python-attrs/attrs\n- **Documentation**:  https://www.attrs.org/\n- **Changelog**: https://www.attrs.org/en/stable/changelog.html\n- **Get Help**: please use the ``python-attrs`` tag on `StackOverflow <https://stackoverflow.com/questions/tagged/python-attrs>`_\n- **Third-party Extensions**: https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs\n- **Supported Python Versions**: 3.5 and later (last 2.7-compatible release is `21.4.0 <https://pypi.org/project/attrs/21.4.0/>`_)\n\nIf you'd like to contribute to ``attrs`` you're most welcome and we've written `a little guide <https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md>`_ to get you started!\n\n\n``attrs`` for Enterprise\n------------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of ``attrs`` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.\n`Learn more. <https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\n\nRelease Information\n===================\n\n22.1.0 (2022-07-28)\n-------------------\n\nBackwards-incompatible Changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Python 2.7 is not supported anymore.\n\n  Dealing with Python 2.7 tooling has become too difficult for a volunteer-run project.\n\n  We have supported Python 2 more than 2 years after it was officially discontinued and feel that we have paid our dues.\n  All version up to 21.4.0 from December 2021 remain fully functional, of course.\n  `#936 <https://github.com/python-attrs/attrs/issues/936>`_\n- The deprecated ``cmp`` attribute of ``attrs.Attribute`` has been removed.\n  This does not affect the *cmp* argument to ``attr.s`` that can be used as a shortcut to set *eq* and *order* at the same time.\n  `#939 <https://github.com/python-attrs/attrs/issues/939>`_\n\n\nChanges\n^^^^^^^\n\n- Instantiation of frozen slotted classes is now faster.\n  `#898 <https://github.com/python-attrs/attrs/issues/898>`_\n- If an ``eq`` key is defined, it is also used before hashing the attribute.\n  `#909 <https://github.com/python-attrs/attrs/issues/909>`_\n- Added ``attrs.validators.min_len()``.\n  `#916 <https://github.com/python-attrs/attrs/issues/916>`_\n- ``attrs.validators.deep_iterable()``'s *member_validator* argument now also accepts a list of validators and wraps them in an ``attrs.validators.and_()``.\n  `#925 <https://github.com/python-attrs/attrs/issues/925>`_\n- Added missing type stub re-imports for ``attrs.converters`` and ``attrs.filters``.\n  `#931 <https://github.com/python-attrs/attrs/issues/931>`_\n- Added missing stub for ``attr(s).cmp_using()``.\n  `#949 <https://github.com/python-attrs/attrs/issues/949>`_\n- ``attrs.validators._in()``'s ``ValueError`` is not missing the attribute, expected options, and the value it got anymore.\n  `#951 <https://github.com/python-attrs/attrs/issues/951>`_\n- Python 3.11 is now officially supported.\n  `#969 <https://github.com/python-attrs/attrs/issues/969>`_\n\n`Full changelog <https://www.attrs.org/en/stable/changelog.html>`_.\n\nCredits\n=======\n\n``attrs`` is written and maintained by `Hynek Schlawack <https://hynek.me/>`_.\n\nThe development is kindly supported by `Variomedia AG <https://www.variomedia.de/>`_.\n\nA full list of contributors can be found in `GitHub's overview <https://github.com/python-attrs/attrs/graphs/contributors>`_.\n\nIt’s the spiritual successor of `characteristic <https://characteristic.readthedocs.io/>`_ and aspires to fix some of it clunkiness and unfortunate decisions.\nBoth were inspired by Twisted’s `FancyEqMixin <https://docs.twisted.org/en/stable/api/twisted.python.util.FancyEqMixin.html>`_ but both are implemented using class decorators because `subclassing is bad for you <https://www.youtube.com/watch?v=3MNVP9-hglc>`_, m’kay?\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/2a/c0/a1372bd95578778aae8dc5359e4f8ec03a94479d2f36e30543298d30c48a/autopep8-2.0.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=ad924b42c2e27a1ac58e432166cc4588f5b80747de02d0d35b1ecbd3e7d57207"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "autopep8",
        "version": "2.0.0",
        "summary": "A tool that automatically formats Python code to conform to the PEP 8 style guide",
        "keywords": [
          "automation",
          "pep8",
          "format",
          "pycodestyle"
        ],
        "home_page": "https://github.com/hhatto/autopep8",
        "author": "Hideo Hattori",
        "author_email": "hhatto.jp@gmail.com",
        "license": "Expat License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Software Development :: Quality Assurance"
        ],
        "requires_dist": [
          "pycodestyle (>=2.9.1)",
          "tomli"
        ],
        "description": "========\nautopep8\n========\n\n.. image:: https://img.shields.io/pypi/v/autopep8.svg\n    :target: https://pypi.org/project/autopep8/\n    :alt: PyPI Version\n\n.. image:: https://github.com/hhatto/autopep8/workflows/Python%20package/badge.svg\n    :target: https://github.com/hhatto/autopep8/actions\n    :alt: Build status\n\n.. image:: https://codecov.io/gh/hhatto/autopep8/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/hhatto/autopep8\n    :alt: Code Coverage\n\nautopep8 automatically formats Python code to conform to the `PEP 8`_ style\nguide. It uses the pycodestyle_ utility to determine what parts of the code\nneeds to be formatted. autopep8 is capable of fixing most of the formatting\nissues_ that can be reported by pycodestyle.\n\n.. _PEP 8: https://www.python.org/dev/peps/pep-0008/\n.. _issues: https://pycodestyle.readthedocs.org/en/latest/intro.html#error-codes\n\n.. contents::\n\n\nInstallation\n============\n\nFrom pip::\n\n    $ pip install --upgrade autopep8\n\nConsider using the ``--user`` option_.\n\n.. _option: https://pip.pypa.io/en/latest/user_guide/#user-installs\n\n\nRequirements\n============\n\nautopep8 requires pycodestyle_.\n\n.. _pycodestyle: https://github.com/PyCQA/pycodestyle\n\n\nUsage\n=====\n\nTo modify a file in place (with aggressive level 2)::\n\n    $ autopep8 --in-place --aggressive --aggressive <filename>\n\nBefore running autopep8.\n\n.. code-block:: python\n\n    import math, sys;\n\n    def example1():\n        ####This is a long comment. This should be wrapped to fit within 72 characters.\n        some_tuple=(   1,2, 3,'a'  );\n        some_variable={'long':'Long code lines should be wrapped within 79 characters.',\n        'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\n        'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\n        20,300,40000,500000000,60000000000000000]}}\n        return (some_tuple, some_variable)\n    def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\n    class Example3(   object ):\n        def __init__    ( self, bar ):\n         #Comments should have a space after the hash.\n         if bar : bar+=1;  bar=bar* bar   ; return bar\n         else:\n                        some_string = \"\"\"\n    \t\t           Indentation in multiline strings should not be touched.\n    Only actual code should be reindented.\n    \"\"\"\n                        return (sys.path, some_string)\n\nAfter running autopep8.\n\n.. code-block:: python\n\n    import math\n    import sys\n\n\n    def example1():\n        # This is a long comment. This should be wrapped to fit within 72\n        # characters.\n        some_tuple = (1, 2, 3, 'a')\n        some_variable = {\n            'long': 'Long code lines should be wrapped within 79 characters.',\n            'other': [\n                math.pi,\n                100,\n                200,\n                300,\n                9876543210,\n                'This is a long string that goes on'],\n            'more': {\n                'inner': 'This whole logical line should be wrapped.',\n                some_tuple: [\n                    1,\n                    20,\n                    300,\n                    40000,\n                    500000000,\n                    60000000000000000]}}\n        return (some_tuple, some_variable)\n\n\n    def example2(): return ('' in {'f': 2}) in {'has_key() is deprecated': True}\n\n\n    class Example3(object):\n        def __init__(self, bar):\n            # Comments should have a space after the hash.\n            if bar:\n                bar += 1\n                bar = bar * bar\n                return bar\n            else:\n                some_string = \"\"\"\n    \t\t           Indentation in multiline strings should not be touched.\n    Only actual code should be reindented.\n    \"\"\"\n                return (sys.path, some_string)\n\nOptions::\n\n    usage: autopep8 [-h] [--version] [-v] [-d] [-i] [--global-config filename]\n                    [--ignore-local-config] [-r] [-j n] [-p n] [-a]\n                    [--experimental] [--exclude globs] [--list-fixes]\n                    [--ignore errors] [--select errors] [--max-line-length n]\n                    [--line-range line line] [--hang-closing] [--exit-code]\n                    [files [files ...]]\n\n    Automatically formats Python code to conform to the PEP 8 style guide.\n\n    positional arguments:\n      files                 files to format or '-' for standard in\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      -v, --verbose         print verbose messages; multiple -v result in more\n                            verbose messages\n      -d, --diff            print the diff for the fixed source\n      -i, --in-place        make changes to files in place\n      --global-config filename\n                            path to a global pep8 config file; if this file does\n                            not exist then this is ignored (default:\n                            ~/.config/pep8)\n      --ignore-local-config\n                            don't look for and apply local config files; if not\n                            passed, defaults are updated with any config files in\n                            the project's root directory\n      -r, --recursive       run recursively over directories; must be used with\n                            --in-place or --diff\n      -j n, --jobs n        number of parallel jobs; match CPU count if value is\n                            less than 1\n      -p n, --pep8-passes n\n                            maximum number of additional pep8 passes (default:\n                            infinite)\n      -a, --aggressive      enable non-whitespace changes; multiple -a result in\n                            more aggressive changes\n      --experimental        enable experimental fixes\n      --exclude globs       exclude file/directory names that match these comma-\n                            separated globs\n      --list-fixes          list codes for fixes; used by --ignore and --select\n      --ignore errors       do not fix these errors/warnings (default:\n                            E226,E24,W50,W690)\n      --select errors       fix only these errors/warnings (e.g. E4,W)\n      --max-line-length n   set maximum allowed line length (default: 79)\n      --line-range line line, --range line line\n                            only fix errors found within this inclusive range of\n                            line numbers (e.g. 1 99); line numbers are indexed at\n                            1\n      --hang-closing        hang-closing option passed to pycodestyle\n      --exit-code           change to behavior of exit code. default behavior of\n                            return value, 0 is no differences, 1 is error exit.\n                            return 2 when add this option. 2 is exists\n                            differences.\n\n\nFeatures\n========\n\nautopep8 fixes the following issues_ reported by pycodestyle_::\n\n    E101 - Reindent all lines.\n    E11  - Fix indentation.\n    E121 - Fix indentation to be a multiple of four.\n    E122 - Add absent indentation for hanging indentation.\n    E123 - Align closing bracket to match opening bracket.\n    E124 - Align closing bracket to match visual indentation.\n    E125 - Indent to distinguish line from next logical line.\n    E126 - Fix over-indented hanging indentation.\n    E127 - Fix visual indentation.\n    E128 - Fix visual indentation.\n    E129 - Fix visual indentation.\n    E131 - Fix hanging indent for unaligned continuation line.\n    E133 - Fix missing indentation for closing bracket.\n    E20  - Remove extraneous whitespace.\n    E211 - Remove extraneous whitespace.\n    E22  - Fix extraneous whitespace around keywords.\n    E224 - Remove extraneous whitespace around operator.\n    E225 - Fix missing whitespace around operator.\n    E226 - Fix missing whitespace around arithmetic operator.\n    E227 - Fix missing whitespace around bitwise/shift operator.\n    E228 - Fix missing whitespace around modulo operator.\n    E231 - Add missing whitespace.\n    E241 - Fix extraneous whitespace around keywords.\n    E242 - Remove extraneous whitespace around operator.\n    E251 - Remove whitespace around parameter '=' sign.\n    E252 - Missing whitespace around parameter equals.\n    E26  - Fix spacing after comment hash for inline comments.\n    E265 - Fix spacing after comment hash for block comments.\n    E266 - Fix too many leading '#' for block comments.\n    E27  - Fix extraneous whitespace around keywords.\n    E301 - Add missing blank line.\n    E302 - Add missing 2 blank lines.\n    E303 - Remove extra blank lines.\n    E304 - Remove blank line following function decorator.\n    E305 - Expected 2 blank lines after end of function or class.\n    E306 - Expected 1 blank line before a nested definition.\n    E401 - Put imports on separate lines.\n    E402 - Fix module level import not at top of file\n    E501 - Try to make lines fit within --max-line-length characters.\n    E502 - Remove extraneous escape of newline.\n    E701 - Put colon-separated compound statement on separate lines.\n    E70  - Put semicolon-separated compound statement on separate lines.\n    E711 - Fix comparison with None.\n    E712 - Fix comparison with boolean.\n    E713 - Use 'not in' for test for membership.\n    E714 - Use 'is not' test for object identity.\n    E721 - Use \"isinstance()\" instead of comparing types directly.\n    E722 - Fix bare except.\n    E731 - Use a def when use do not assign a lambda expression.\n    W291 - Remove trailing whitespace.\n    W292 - Add a single newline at the end of the file.\n    W293 - Remove trailing whitespace on blank line.\n    W391 - Remove trailing blank lines.\n    W503 - Fix line break before binary operator.\n    W504 - Fix line break after binary operator.\n    W601 - Use \"in\" rather than \"has_key()\".\n    W602 - Fix deprecated form of raising exception.\n    W603 - Use \"!=\" instead of \"<>\"\n    W604 - Use \"repr()\" instead of backticks.\n    W605 - Fix invalid escape sequence 'x'.\n    W690 - Fix various deprecated code (via lib2to3).\n\nautopep8 also fixes some issues not found by pycodestyle_.\n\n- Correct deprecated or non-idiomatic Python code (via ``lib2to3``). Use this\n  for making Python 2.7 code more compatible with Python 3. (This is triggered\n  if ``W690`` is enabled.)\n- Normalize files with mixed line endings.\n- Put a blank line between a class docstring and its first method\n  declaration. (Enabled with ``E301``.)\n- Remove blank lines between a function declaration and its docstring. (Enabled\n  with ``E303``.)\n\nautopep8 avoids fixing some issues found by pycodestyle_.\n\n- ``E112``/``E113`` for non comments are reports of bad indentation that break\n  syntax rules. These should not be modified at all.\n- ``E265``, which refers to spacing after comment hash, is ignored if the\n  comment looks like code. autopep8 avoids modifying these since they are not\n  real comments. If you really want to get rid of the pycodestyle_ warning,\n  consider just removing the commented-out code. (This can be automated via\n  eradicate_.)\n\n.. _eradicate: https://github.com/myint/eradicate\n\n\nMore advanced usage\n===================\n\nBy default autopep8 only makes whitespace changes. Thus, by default, it does\nnot fix ``E711`` and ``E712``. (Changing ``x == None`` to ``x is None`` may\nchange the meaning of the program if ``x`` has its ``__eq__`` method\noverridden.) Nor does it correct deprecated code ``W6``. To enable these\nmore aggressive fixes, use the ``--aggressive`` option::\n\n    $ autopep8 --aggressive <filename>\n\nUse multiple ``--aggressive`` to increase the aggressiveness level. For\nexample, ``E712`` requires aggressiveness level 2 (since ``x == True`` could be\nchanged to either ``x`` or ``x is True``, but autopep8 chooses the former).\n\n``--aggressive`` will also shorten lines more aggressively. It will also remove\ntrailing whitespace more aggressively. (Usually, we don't touch trailing\nwhitespace in docstrings and other multiline strings. And to do even more\naggressive changes to docstrings, use docformatter_.)\n\n.. _docformatter: https://github.com/myint/docformatter\n\nTo enable only a subset of the fixes, use the ``--select`` option. For example,\nto fix various types of indentation issues::\n\n    $ autopep8 --select=E1,W1 <filename>\n\nSimilarly, to just fix deprecated code::\n\n    $ autopep8 --aggressive --select=W6 <filename>\n\nThe above is useful when trying to port a single code base to work with both\nPython 2 and Python 3 at the same time.\n\nIf the file being fixed is large, you may want to enable verbose progress\nmessages::\n\n    $ autopep8 -v <filename>\n\nPassing in ``--experimental`` enables the following functionality:\n\n- Shortens code lines by taking its length into account\n\n::\n\n$ autopep8 --experimental <filename>\n\nDisabling line-by-line\n----------------------\n\nIt is possible to disable autopep8 untill it it turned back on again in the file, using ``autopep8: off`` and then renabling ``autopep8: on``. \n\n.. code-block:: python\n\n    # autopep8: off\n        [\n            [23, 23, 13, 43],\n            [32, 34, 34, 34],\n            [56, 34, 34, 11],\n            [10, 10, 10, 10],\n        ]\n    # autopep8: on\n         \n``fmt: off`` and ``fmt: on`` are also valid.\n\nUse as a module\n===============\n\nThe simplest way of using autopep8 as a module is via the ``fix_code()``\nfunction:\n\n    >>> import autopep8\n    >>> autopep8.fix_code('x=       123\\n')\n    'x = 123\\n'\n\nOr with options:\n\n    >>> import autopep8\n    >>> autopep8.fix_code('x.has_key(y)\\n',\n    ...                   options={'aggressive': 1})\n    'y in x\\n'\n    >>> autopep8.fix_code('print( 123 )\\n',\n    ...                   options={'ignore': ['E']})\n    'print( 123 )\\n'\n\n\nConfiguration\n=============\n\nBy default, if ``$HOME/.config/pycodestyle`` (``~\\.pycodestyle`` in Windows\nenvironment) exists, it will be used as global configuration file.\nAlternatively, you can specify the global configuration file with the\n``--global-config`` option.\n\nAlso, if ``setup.cfg``, ``tox.ini``, ``.pep8`` and ``.flake8`` files exist\nin the directory where the target file exists, it will be used as the\nconfiguration file.\n\n``pep8``, ``pycodestyle``, and ``flake8`` can be used as a section.\n\nconfiguration file example::\n\n    [pycodestyle]\n    max_line_length = 120\n    ignore = E501\n\npyproject.toml\n--------------\n\nautopep8 can also use ``pyproject.toml``.\nThe section must be ``[tool.autopep8]``, and ``pyproject.toml`` takes precedence\nover any other configuration files.\n\nconfiguration file example::\n\n    [tool.autopep8]\n    max_line_length = 120\n    ignore = \"E501,W6\"  # or [\"E501\", \"W6\"]\n    in-place = true\n    recursive = true\n    aggressive = 3\n\n\nTesting\n=======\n\nTest cases are in ``test/test_autopep8.py``. They can be run directly via\n``python test/test_autopep8.py`` or via tox_. The latter is useful for\ntesting against multiple Python interpreters. (We currently test against\nCPython versions 2.7, 3.6 3.7 and 3.8. We also test against PyPy.)\n\n.. _`tox`: https://pypi.org/project/tox/\n\nBroad spectrum testing is available via ``test/acid.py``. This script runs\nautopep8 against Python code and checks for correctness and completeness of the\ncode fixes. It can check that the bytecode remains identical.\n``test/acid_pypi.py`` makes use of ``acid.py`` to test against the latest\nreleased packages on PyPI.\n\n\nTroubleshooting\n===============\n\n``pkg_resources.DistributionNotFound``\n--------------------------------------\n\nIf you are using an ancient version of ``setuptools``, you might encounter\n``pkg_resources.DistributionNotFound`` when trying to run ``autopep8``. Try\nupgrading ``setuptools`` to workaround this ``setuptools`` problem::\n\n    $ pip install --upgrade setuptools\n\nUse ``sudo`` if you are installing to the system.\n\n\nLinks\n=====\n\n* PyPI_\n* GitHub_\n* `Travis CI`_\n* Coveralls_\n\n.. _PyPI: https://pypi.org/project/autopep8/\n.. _GitHub: https://github.com/hhatto/autopep8\n.. _`Travis CI`: https://travis-ci.org/hhatto/autopep8\n.. _`Coveralls`: https://coveralls.io/r/hhatto/autopep8\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/9c/d8/909c4089dbe4ade9f9705f143c9f13f065049a9d5e7d34c828aefdd0a97c/beautifulsoup4-4.11.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=58d5c3d29f5a36ffeb94f02f0d786cd53014cf9b3b3951d42e0080d8a9498d30"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "beautifulsoup4",
        "version": "4.11.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Screen-scraping library",
        "description_content_type": "text/markdown",
        "home_page": "https://www.crummy.com/software/BeautifulSoup/bs4/",
        "download_url": "https://www.crummy.com/software/BeautifulSoup/bs4/download/",
        "author": "Leonard Richardson",
        "author_email": "leonardr@segfault.org",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Topic :: Text Processing :: Markup :: HTML",
          "Topic :: Text Processing :: Markup :: XML",
          "Topic :: Text Processing :: Markup :: SGML",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "soupsieve (>1.2)",
          "html5lib; extra == 'html5lib'",
          "lxml; extra == 'lxml'"
        ],
        "requires_python": ">=3.6.0",
        "provides_extra": [
          "lxml",
          "html5lib",
          "html5lib",
          "lxml"
        ],
        "description": "Beautiful Soup is a library that makes it easy to scrape information\nfrom web pages. It sits atop an HTML or XML parser, providing Pythonic\nidioms for iterating, searching, and modifying the parse tree.\n\n# Quick start\n\n```\n>>> from bs4 import BeautifulSoup\n>>> soup = BeautifulSoup(\"<p>Some<b>bad<i>HTML\")\n>>> print(soup.prettify())\n<html>\n <body>\n  <p>\n   Some\n   <b>\n    bad\n    <i>\n     HTML\n    </i>\n   </b>\n  </p>\n </body>\n</html>\n>>> soup.find(text=\"bad\")\n'bad'\n>>> soup.i\n<i>HTML</i>\n#\n>>> soup = BeautifulSoup(\"<tag1>Some<tag2/>bad<tag3>XML\", \"xml\")\n#\n>>> print(soup.prettify())\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<tag1>\n Some\n <tag2/>\n bad\n <tag3>\n  XML\n </tag3>\n</tag1>\n```\n\nTo go beyond the basics, [comprehensive documentation is available](https://www.crummy.com/software/BeautifulSoup/bs4/doc/).\n\n# Links\n\n* [Homepage](https://www.crummy.com/software/BeautifulSoup/bs4/)\n* [Documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)\n* [Discussion group](https://groups.google.com/group/beautifulsoup/)\n* [Development](https://code.launchpad.net/beautifulsoup/)\n* [Bug tracker](https://bugs.launchpad.net/beautifulsoup/)\n* [Complete changelog](https://bazaar.launchpad.net/~leonardr/beautifulsoup/bs4/view/head:/CHANGELOG)\n\n# Note on Python 2 sunsetting\n\nBeautiful Soup's support for Python 2 was discontinued on December 31,\n2020: one year after the sunset date for Python 2 itself. From this\npoint onward, new Beautiful Soup development will exclusively target\nPython 3. The final release of Beautiful Soup 4 to support Python 2\nwas 4.9.3.\n\n# Supporting the project\n\nIf you use Beautiful Soup as part of your professional work, please consider a\n[Tidelift subscription](https://tidelift.com/subscription/pkg/pypi-beautifulsoup4?utm_source=pypi-beautifulsoup4&utm_medium=referral&utm_campaign=readme).\nThis will support many of the free software projects your organization\ndepends on, not just Beautiful Soup.\n\nIf you use Beautiful Soup for personal projects, the best way to say\nthank you is to read\n[Tool Safety](https://www.crummy.com/software/BeautifulSoup/zine/), a zine I\nwrote about what Beautiful Soup has taught me about software\ndevelopment.\n\n# Building the documentation\n\nThe bs4/doc/ directory contains full documentation in Sphinx\nformat. Run `make html` in that directory to create HTML\ndocumentation.\n\n# Running the unit tests\n\nBeautiful Soup supports unit test discovery using Pytest:\n\n```\n$ pytest\n```\n\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/d4/87/508104336a2bc0c4cfdbdceedc0f44dc72da3abc0460c57e323ddd1b3257/bleach-5.0.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=085f7f33c15bd408dd9b17a4ad77c577db66d76203e5984b1bd59baeee948b2a"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "bleach",
        "version": "5.0.1",
        "summary": "An easy safelist-based HTML-sanitizing tool.",
        "home_page": "https://github.com/mozilla/bleach",
        "maintainer": "Will Kahn-Greene",
        "maintainer_email": "willkg@mozilla.com",
        "license": "Apache Software License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "six (>=1.9.0)",
          "webencodings",
          "tinycss2 (<1.2,>=1.1.0) ; extra == 'css'",
          "build (==0.8.0) ; extra == 'dev'",
          "flake8 (==4.0.1) ; extra == 'dev'",
          "hashin (==0.17.0) ; extra == 'dev'",
          "pip-tools (==6.6.2) ; extra == 'dev'",
          "pytest (==7.1.2) ; extra == 'dev'",
          "Sphinx (==4.3.2) ; extra == 'dev'",
          "tox (==3.25.0) ; extra == 'dev'",
          "twine (==4.0.1) ; extra == 'dev'",
          "wheel (==0.37.1) ; extra == 'dev'",
          "black (==22.3.0) ; (implementation_name == \"cpython\") and extra == 'dev'",
          "mypy (==0.961) ; (implementation_name == \"cpython\") and extra == 'dev'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "css",
          "dev"
        ],
        "description": "======\nBleach\n======\n\n.. image:: https://github.com/mozilla/bleach/workflows/Test/badge.svg\n   :target: https://github.com/mozilla/bleach/actions?query=workflow%3ATest\n\n.. image:: https://github.com/mozilla/bleach/workflows/Lint/badge.svg\n   :target: https://github.com/mozilla/bleach/actions?query=workflow%3ALint\n\n.. image:: https://badge.fury.io/py/bleach.svg\n   :target: http://badge.fury.io/py/bleach\n\nBleach is an allowed-list-based HTML sanitizing library that escapes or strips\nmarkup and attributes.\n\nBleach can also linkify text safely, applying filters that Django's ``urlize``\nfilter cannot, and optionally setting ``rel`` attributes, even on links already\nin the text.\n\nBleach is intended for sanitizing text from *untrusted* sources. If you find\nyourself jumping through hoops to allow your site administrators to do lots of\nthings, you're probably outside the use cases. Either trust those users, or\ndon't.\n\nBecause it relies on html5lib_, Bleach is as good as modern browsers at dealing\nwith weird, quirky HTML fragments. And *any* of Bleach's methods will fix\nunbalanced or mis-nested tags.\n\nThe version on GitHub_ is the most up-to-date and contains the latest bug\nfixes. You can find full documentation on `ReadTheDocs`_.\n\n:Code:           https://github.com/mozilla/bleach\n:Documentation:  https://bleach.readthedocs.io/\n:Issue tracker:  https://github.com/mozilla/bleach/issues\n:License:        Apache License v2; see LICENSE file\n\n\nReporting Bugs\n==============\n\nFor regular bugs, please report them `in our issue tracker\n<https://github.com/mozilla/bleach/issues>`_.\n\nIf you believe that you've found a security vulnerability, please `file a secure\nbug report in our bug tracker\n<https://bugzilla.mozilla.org/enter_bug.cgi?assigned_to=nobody%40mozilla.org&product=Webtools&component=Bleach-security&groups=webtools-security>`_\nor send an email to *security AT mozilla DOT org*.\n\nFor more information on security-related bug disclosure and the PGP key to use\nfor sending encrypted mail or to verify responses received from that address,\nplease read our wiki page at\n`<https://www.mozilla.org/en-US/security/#For_Developers>`_.\n\n\nSecurity\n========\n\nBleach is a security-focused library.\n\nWe have a responsible security vulnerability reporting process. Please use\nthat if you're reporting a security issue.\n\nSecurity issues are fixed in private. After we land such a fix, we'll do a\nrelease.\n\nFor every release, we mark security issues we've fixed in the ``CHANGES`` in\nthe **Security issues** section. We include any relevant CVE links.\n\n\nInstalling Bleach\n=================\n\nBleach is available on PyPI_, so you can install it with ``pip``::\n\n    $ pip install bleach\n\n\nUpgrading Bleach\n================\n\n.. warning::\n\n   Before doing any upgrades, read through `Bleach Changes\n   <https://bleach.readthedocs.io/en/latest/changes.html>`_ for backwards\n   incompatible changes, newer versions, etc.\n\n   Bleach follows `semver 2`_ versioning. Vendored libraries will not\n   be changed in patch releases.\n\n\nBasic use\n=========\n\nThe simplest way to use Bleach is:\n\n.. code-block:: python\n\n    >>> import bleach\n\n    >>> bleach.clean('an <script>evil()</script> example')\n    u'an &lt;script&gt;evil()&lt;/script&gt; example'\n\n    >>> bleach.linkify('an http://example.com url')\n    u'an <a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a> url'\n\n\nCode of Conduct\n===============\n\nThis project and repository is governed by Mozilla's code of conduct and\netiquette guidelines. For more details please see the `CODE_OF_CONDUCT.md\n</CODE_OF_CONDUCT.md>`_\n\n\n.. _html5lib: https://github.com/html5lib/html5lib-python\n.. _GitHub: https://github.com/mozilla/bleach\n.. _ReadTheDocs: https://bleach.readthedocs.io/\n.. _PyPI: https://pypi.org/project/bleach/\n.. _semver 2: https://semver.org/\n\n\nBleach changes\n==============\n\nVersion 5.0.1 (June 27th, 2022)\n-------------------------------\n\n**Bugs**\n\n* Add missing comma to tinycss2 require. Thank you, @shadchin!\n\n* Add url parse tests based on wpt url tests. (#688)\n\n* Support scheme-less urls if \"https\" is in allow list. (#662)\n\n* Handle escaping ``<`` in edge cases where it doesn't start a tag. (#544)\n\n* Fix reference warnings in docs. (#660)\n\n* Correctly urlencode email address parts. Thank you, @larseggert! (#659)\n\n\nVersion 5.0.0 (April 7th, 2022)\n-------------------------------\n\n**Backwards incompatible changes**\n\n* ``clean`` and ``linkify`` now preserve the order of HTML attributes. Thank\n  you, @askoretskly! (#566)\n\n* Drop support for Python 3.6. Thank you, @hugovk! (#629)\n\n* CSS sanitization in style tags is completely different now. If you're using\n  Bleach ``clean`` to sanitize css in style tags, you'll need to update your\n  code and you'll need to install the ``css`` extras::\n\n      pip install 'bleach[css]'\n\n  See `the documentation on sanitizing CSS for how to do it\n  <https://bleach.readthedocs.io/en/latest/clean.html#sanitizing-css>`_. (#633)\n\n**Bug fixes**\n\n* Rework dev dependencies. We no longer have\n  ``requirements-dev.in``/``requirements-dev.txt``. Instead, we're using\n  ``dev`` extras.\n\n  See `development docs <https://bleach.readthedocs.io/en/latest/dev.html>`_\n  for more details. (#620)\n\n* Add newline when dropping block-level tags. Thank you, @jvanasco! (#369)\n\nVersion 4.1.0 (August 25th, 2021)\n---------------------------------\n\n**Features**\n\n* Python 3.9 support\n\n**Bug fixes**\n\n* Update sanitizer clean to use vendored 3.6.14 stdlib urllib.parse to\n  fix test failures on Python 3.9. (#536)\n\nVersion 4.0.0 (August 3rd, 2021)\n--------------------------------\n\n**Backwards incompatible changes**\n\n* Drop support for unsupported Python versions <3.6. (#520)\n\n**Security fixes**\n\nNone\n\n**Features**\n\n* fix attribute name in the linkify docs (thanks @CheesyFeet!)\n\nVersion 3.3.1 (July 14th, 2021)\n-------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\n* add more tests for CVE-2021-23980 / GHSA-vv2x-vrpj-qqpq\n* bump python version to 3.8 for tox doc, vendorverify, and lint targets\n* update bug report template tag\n* update vendorverify script to detect and fail when extra files are vendored\n* update release process docs to check vendorverify passes locally\n\n**Bug fixes**\n\n* remove extra vendored django present in the v3.3.0 whl (#595)\n* duplicate h1 header doc fix (thanks Nguyễn Gia Phong / @McSinyx!)\n\nVersion 3.3.0 (February 1st, 2021)\n----------------------------------\n\n**Backwards incompatible changes**\n\n* clean escapes HTML comments even when strip_comments=False\n\n**Security fixes**\n\n* Fix bug 1621692 / GHSA-m6xf-fq7q-8743. See the advisory for details.\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nVersion 3.2.3 (January 26th, 2021)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* fix clean and linkify raising ValueErrors for certain inputs. Thank you @Google-Autofuzz.\n\nVersion 3.2.2 (January 20th, 2021)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\n* Migrate CI to Github Actions. Thank you @hugovk.\n\n**Bug fixes**\n\n* fix linkify raising an IndexError on certain inputs. Thank you @Google-Autofuzz.\n\nVersion 3.2.1 (September 18th, 2020)\n------------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* change linkifier to add rel=\"nofollow\" as documented. Thank you @mitar.\n* suppress html5lib sanitizer DeprecationWarnings (#557)\n\nVersion 3.2.0 (September 16th, 2020)\n------------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* ``html5lib`` dependency to version 1.1.0. Thank you Sam Sneddon.\n* update tests_website terminology. Thank you Thomas Grainger.\n\nVersion 3.1.5 (April 29th, 2020)\n--------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* replace missing ``setuptools`` dependency with ``packaging``. Thank you Benjamin Peterson.\n\nVersion 3.1.4 (March 24th, 2020)\n--------------------------------\n\n**Security fixes**\n\n* ``bleach.clean`` behavior parsing style attributes could result in a\n  regular expression denial of service (ReDoS).\n\n  Calls to ``bleach.clean`` with an allowed tag with an allowed\n  ``style`` attribute were vulnerable to ReDoS. For example,\n  ``bleach.clean(..., attributes={'a': ['style']})``.\n\n  This issue was confirmed in Bleach versions v3.1.3, v3.1.2, v3.1.1,\n  v3.1.0, v3.0.0, v2.1.4, and v2.1.3. Earlier versions used a similar\n  regular expression and should be considered vulnerable too.\n\n  Anyone using Bleach <=v3.1.3 is encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1623633\n\n**Backwards incompatible changes**\n\n* Style attributes with dashes, or single or double quoted values are\n  cleaned instead of passed through.\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nVersion 3.1.3 (March 17th, 2020)\n--------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\n* Drop support for Python 3.4. Thank you, @hugovk!\n\n* Drop deprecated ``setup.py test`` support. Thank you, @jdufresne! (#507)\n\n**Features**\n\n* Add support for Python 3.8. Thank you, @jdufresne!\n\n* Add support for PyPy 7. Thank you, @hugovk!\n\n* Add pypy3 testing to tox and travis. Thank you, @jdufresne!\n\n**Bug fixes**\n\n* Add relative link to code of conduct. (#442)\n\n* Fix typo: curren -> current in tests/test_clean.py Thank you, timgates42! (#504)\n\n* Fix handling of non-ascii style attributes. Thank you, @sekineh! (#426)\n\n* Simplify tox configuration. Thank you, @jdufresne!\n\n* Make documentation reproducible. Thank you, @lamby!\n\n* Fix typos in code comments. Thank you, @zborboa-g!\n\n* Fix exception value testing. Thank you, @mastizada!\n\n* Fix parser-tags NoneType exception. Thank you, @bope!\n\n* Improve TLD support in linkify. Thank you, @pc-coholic!\n\n\nVersion 3.1.2 (March 11th, 2020)\n--------------------------------\n\n**Security fixes**\n\n* ``bleach.clean`` behavior parsing embedded MathML and SVG content\n  with RCDATA tags did not match browser behavior and could result in\n  a mutation XSS.\n\n  Calls to ``bleach.clean`` with ``strip=False`` and ``math`` or\n  ``svg`` tags and one or more of the RCDATA tags ``script``,\n  ``noscript``, ``style``, ``noframes``, ``iframe``, ``noembed``, or\n  ``xmp`` in the allowed tags whitelist were vulnerable to a mutation\n  XSS.\n\n  This security issue was confirmed in Bleach version v3.1.1. Earlier\n  versions are likely affected too.\n\n  Anyone using Bleach <=v3.1.1 is encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1621692\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nVersion 3.1.1 (February 13th, 2020)\n-----------------------------------\n\n**Security fixes**\n\n* ``bleach.clean`` behavior parsing ``noscript`` tags did not match\n  browser behavior.\n\n  Calls to ``bleach.clean`` allowing ``noscript`` and one or more of\n  the raw text tags (``title``, ``textarea``, ``script``, ``style``,\n  ``noembed``, ``noframes``, ``iframe``, and ``xmp``) were vulnerable\n  to a mutation XSS.\n\n  This security issue was confirmed in Bleach versions v2.1.4, v3.0.2,\n  and v3.1.0. Earlier versions are probably affected too.\n\n  Anyone using Bleach <=v3.1.0 is highly encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1615315\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nVersion 3.1.0 (January 9th, 2019)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\n* Add ``recognized_tags`` argument to the linkify ``Linker`` class. This\n  fixes issues when linkifying on its own and having some tags get escaped.\n  It defaults to a list of HTML5 tags. Thank you, Chad Birch! (#409)\n\n**Bug fixes**\n\n* Add ``six>=1.9`` to requirements. Thank you, Dave Shawley (#416)\n\n* Fix cases where attribute names could have invalid characters in them.\n  (#419)\n\n* Fix problems with ``LinkifyFilter`` not being able to match links\n  across ``&amp;``. (#422)\n\n* Fix ``InputStreamWithMemory`` when the ``BleachHTMLParser`` is\n  parsing ``meta`` tags. (#431)\n\n* Fix doctests. (#357)\n\n\nVersion 3.0.2 (October 11th, 2018)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Merge ``Characters`` tokens after sanitizing them. This fixes issues in the\n  ``LinkifyFilter`` where it was only linkifying parts of urls. (#374)\n\n\nVersion 3.0.1 (October 9th, 2018)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\n* Support Python 3.7. It supported Python 3.7 just fine, but we added 3.7 to\n  the list of Python environments we test so this is now officially supported.\n  (#377)\n\n**Bug fixes**\n\n* Fix ``list`` object has no attribute ``lower`` in ``clean``. (#398)\n* Fix ``abbr`` getting escaped in ``linkify``. (#400)\n\n\nVersion 3.0.0 (October 3rd, 2018)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\n* A bunch of functions were moved from one module to another.\n\n  These were moved from ``bleach.sanitizer`` to ``bleach.html5lib_shim``:\n\n  * ``convert_entity``\n  * ``convert_entities``\n  * ``match_entity``\n  * ``next_possible_entity``\n  * ``BleachHTMLSerializer``\n  * ``BleachHTMLTokenizer``\n  * ``BleachHTMLParser``\n\n  These functions and classes weren't documented and aren't part of the\n  public API, but people read code and might be using them so we're\n  considering it an incompatible API change.\n\n  If you're using them, you'll need to update your code.\n\n**Features**\n\n* Bleach no longer depends on html5lib. html5lib==1.0.1 is now vendored into\n  Bleach. You can remove it from your requirements file if none of your other\n  requirements require html5lib.\n\n  This means Bleach will now work fine with other libraries that depend on\n  html5lib regardless of what version of html5lib they require. (#386)\n\n**Bug fixes**\n\n* Fixed tags getting added when using clean or linkify. This was a\n  long-standing regression from the Bleach 2.0 rewrite. (#280, #392)\n\n* Fixed ``<isindex>`` getting replaced with a string. Now it gets escaped or\n  stripped depending on whether it's in the allowed tags or not. (#279)\n\n\nVersion 2.1.4 (August 16th, 2018)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\n* Dropped support for Python 3.3. (#328)\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Handle ambiguous ampersands in correctly. (#359)\n\n\nVersion 2.1.3 (March 5th, 2018)\n-------------------------------\n\n**Security fixes**\n\n* Attributes that have URI values weren't properly sanitized if the\n  values contained character entities. Using character entities, it\n  was possible to construct a URI value with a scheme that was not\n  allowed that would slide through unsanitized.\n\n  This security issue was introduced in Bleach 2.1. Anyone using\n  Bleach 2.1 is highly encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1442745\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Fixed some other edge cases for attribute URI value sanitizing and\n  improved testing of this code.\n\n\nVersion 2.1.2 (December 7th, 2017)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Support html5lib-python 1.0.1. (#337)\n\n* Add deprecation warning for supporting html5lib-python < 1.0.\n\n* Switch to semver.\n\n\nVersion 2.1.1 (October 2nd, 2017)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Fix ``setup.py`` opening files when ``LANG=``. (#324)\n\n\nVersion 2.1 (September 28th, 2017)\n----------------------------------\n\n**Security fixes**\n\n* Convert control characters (backspace particularly) to \"?\" preventing\n  malicious copy-and-paste situations. (#298)\n\n  See `<https://github.com/mozilla/bleach/issues/298>`_ for more details.\n\n  This affects all previous versions of Bleach. Check the comments on that\n  issue for ways to alleviate the issue if you can't upgrade to Bleach 2.1.\n\n\n**Backwards incompatible changes**\n\n* Redid versioning. ``bleach.VERSION`` is no longer available. Use the string\n  version at ``bleach.__version__`` and parse it with\n  ``pkg_resources.parse_version``. (#307)\n\n* clean, linkify: linkify and clean should only accept text types; thank you,\n  Janusz! (#292)\n\n* clean, linkify: accept only unicode or utf-8-encoded str (#176)\n\n\n**Features**\n\n\n**Bug fixes**\n\n* ``bleach.clean()`` no longer unescapes entities including ones that are missing\n  a ``;`` at the end which can happen in urls and other places. (#143)\n\n* linkify: fix http links inside of mailto links; thank you, sedrubal! (#300)\n\n* clarify security policy in docs (#303)\n\n* fix dependency specification for html5lib 1.0b8, 1.0b9, and 1.0b10; thank you,\n  Zoltán! (#268)\n\n* add Bleach vs. html5lib comparison to README; thank you, Stu Cox! (#278)\n\n* fix KeyError exceptions on tags without href attr; thank you, Alex Defsen!\n  (#273)\n\n* add test website and scripts to test ``bleach.clean()`` output in browser;\n  thank you, Greg Guthe!\n\n\nVersion 2.0 (March 8th, 2017)\n-----------------------------\n\n**Security fixes**\n\n* None\n\n\n**Backwards incompatible changes**\n\n* Removed support for Python 2.6. (#206)\n\n* Removed support for Python 3.2. (#224)\n\n* Bleach no longer supports html5lib < 0.99999999 (8 9s).\n\n  This version is a rewrite to use the new sanitizing API since the old\n  one was dropped in html5lib 0.99999999 (8 9s).\n\n  If you're using 0.9999999 (7 9s) upgrade to 0.99999999 (8 9s) or higher.\n\n  If you're using 1.0b8 (equivalent to 0.9999999 (7 9s)), upgrade to 1.0b9\n  (equivalent to 0.99999999 (8 9s)) or higher.\n\n* ``bleach.clean`` and friends were rewritten\n\n  ``clean`` was reimplemented as an html5lib filter and happens at a different\n  step in the HTML parsing -> traversing -> serializing process. Because of\n  that, there are some differences in clean's output as compared with previous\n  versions.\n\n  Amongst other things, this version will add end tags even if the tag in\n  question is to be escaped.\n\n* ``bleach.clean`` and friends attribute callables now take three arguments:\n  tag, attribute name and attribute value. Previously they only took attribute\n  name and attribute value.\n\n  All attribute callables will need to be updated.\n\n* ``bleach.linkify`` was rewritten\n\n  ``linkify`` was reimplemented as an html5lib Filter. As such, it no longer\n  accepts a ``tokenizer`` argument.\n\n  The callback functions for adjusting link attributes now takes a namespaced\n  attribute.\n\n  Previously you'd do something like this::\n\n      def check_protocol(attrs, is_new):\n          if not attrs.get('href', '').startswith('http:', 'https:')):\n              return None\n          return attrs\n\n  Now it's more like this::\n\n      def check_protocol(attrs, is_new):\n          if not attrs.get((None, u'href'), u'').startswith(('http:', 'https:')):\n              #            ^^^^^^^^^^^^^^^\n              return None\n          return attrs\n\n  Further, you need to make sure you're always using unicode values. If you\n  don't then html5lib will raise an assertion error that the value is not\n  unicode.\n\n  All linkify filters will need to be updated.\n\n* ``bleach.linkify`` and friends had a ``skip_pre`` argument--that's been\n  replaced with a more general ``skip_tags`` argument.\n\n  Before, you might do::\n\n      bleach.linkify(some_text, skip_pre=True)\n\n  The equivalent with Bleach 2.0 is::\n\n      bleach.linkify(some_text, skip_tags=['pre'])\n\n  You can skip other tags, too, like ``style`` or ``script`` or other places\n  where you don't want linkification happening.\n\n  All uses of linkify that use ``skip_pre`` will need to be updated.\n\n\n**Changes**\n\n* Supports Python 3.6.\n\n* Supports html5lib >= 0.99999999 (8 9s).\n\n* There's a ``bleach.sanitizer.Cleaner`` class that you can instantiate with your\n  favorite clean settings for easy reuse.\n\n* There's a ``bleach.linkifier.Linker`` class that you can instantiate with your\n  favorite linkify settings for easy reuse.\n\n* There's a ``bleach.linkifier.LinkifyFilter`` which is an htm5lib filter that\n  you can pass as a filter to ``bleach.sanitizer.Cleaner`` allowing you to clean\n  and linkify in one pass.\n\n* ``bleach.clean`` and friends can now take a callable as an attributes arg value.\n\n* Tons of bug fixes.\n\n* Cleaned up tests.\n\n* Documentation fixes.\n\n\nVersion 1.5 (November 4th, 2016)\n--------------------------------\n\n**Security fixes**\n\n* None\n\n**Backwards incompatible changes**\n\n* clean: The list of ``ALLOWED_PROTOCOLS`` now defaults to http, https and\n  mailto.\n\n  Previously it was a long list of protocols something like ed2k, ftp, http,\n  https, irc, mailto, news, gopher, nntp, telnet, webcal, xmpp, callto, feed,\n  urn, aim, rsync, tag, ssh, sftp, rtsp, afs, data. (#149)\n\n**Changes**\n\n* clean: Added ``protocols`` to arguments list to let you override the list of\n  allowed protocols. Thank you, Andreas Malecki! (#149)\n\n* linkify: Fix a bug involving periods at the end of an email address. Thank you,\n  Lorenz Schori! (#219)\n\n* linkify: Fix linkification of non-ascii ports. Thank you Alexandre, Macabies!\n  (#207)\n\n* linkify: Fix linkify inappropriately removing node tails when dropping nodes.\n  (#132)\n\n* Fixed a test that failed periodically. (#161)\n\n* Switched from nose to py.test. (#204)\n\n* Add test matrix for all supported Python and html5lib versions. (#230)\n\n* Limit to html5lib ``>=0.999,!=0.9999,!=0.99999,<0.99999999`` because 0.9999\n  and 0.99999 are busted.\n\n* Add support for ``python setup.py test``. (#97)\n\n\nVersion 1.4.3 (May 23rd, 2016)\n------------------------------\n\n**Security fixes**\n\n* None\n\n**Changes**\n\n* Limit to html5lib ``>=0.999,<0.99999999`` because of impending change to\n  sanitizer api. #195\n\n\nVersion 1.4.2 (September 11, 2015)\n----------------------------------\n\n**Changes**\n\n* linkify: Fix hang in linkify with ``parse_email=True``. (#124)\n\n* linkify: Fix crash in linkify when removing a link that is a first-child. (#136)\n\n* Updated TLDs.\n\n* linkify: Don't remove exterior brackets when linkifying. (#146)\n\n\nVersion 1.4.1 (December 15, 2014)\n---------------------------------\n\n**Changes**\n\n* Consistent order of attributes in output.\n\n* Python 3.4 support.\n\n\nVersion 1.4 (January 12, 2014)\n------------------------------\n\n**Changes**\n\n* linkify: Update linkify to use etree type Treewalker instead of simpletree.\n\n* Updated html5lib to version ``>=0.999``.\n\n* Update all code to be compatible with Python 3 and 2 using six.\n\n* Switch to Apache License.\n\n\nVersion 1.3\n-----------\n\n* Used by Python 3-only fork.\n\n\nVersion 1.2.2 (May 18, 2013)\n----------------------------\n\n* Pin html5lib to version 0.95 for now due to major API break.\n\n\nVersion 1.2.1 (February 19, 2013)\n---------------------------------\n\n* ``clean()`` no longer considers ``feed:`` an acceptable protocol due to\n  inconsistencies in browser behavior.\n\n\nVersion 1.2 (January 28, 2013)\n------------------------------\n\n* ``linkify()`` has changed considerably. Many keyword arguments have been\n  replaced with a single callbacks list. Please see the documentation for more\n  information.\n\n* Bleach will no longer consider unacceptable protocols when linkifying.\n\n* ``linkify()`` now takes a tokenizer argument that allows it to skip\n  sanitization.\n\n* ``delinkify()`` is gone.\n\n* Removed exception handling from ``_render``. ``clean()`` and ``linkify()`` may\n  now throw.\n\n* ``linkify()`` correctly ignores case for protocols and domain names.\n\n* ``linkify()`` correctly handles markup within an <a> tag.\n\n\nVersion 1.1.5\n-------------\n\n\nVersion 1.1.4\n-------------\n\n\nVersion 1.1.3 (July 10, 2012)\n-----------------------------\n\n* Fix parsing bare URLs when parse_email=True.\n\n\nVersion 1.1.2 (June 1, 2012)\n----------------------------\n\n* Fix hang in style attribute sanitizer. (#61)\n\n* Allow ``/`` in style attribute values.\n\n\nVersion 1.1.1 (February 17, 2012)\n---------------------------------\n\n* Fix tokenizer for html5lib 0.9.5.\n\n\nVersion 1.1.0 (October 24, 2011)\n--------------------------------\n\n* ``linkify()`` now understands port numbers. (#38)\n\n* Documented character encoding behavior. (#41)\n\n* Add an optional target argument to ``linkify()``.\n\n* Add ``delinkify()`` method. (#45)\n\n* Support subdomain whitelist for ``delinkify()``. (#47, #48)\n\n\nVersion 1.0.4 (September 2, 2011)\n---------------------------------\n\n* Switch to SemVer git tags.\n\n* Make ``linkify()`` smarter about trailing punctuation. (#30)\n\n* Pass ``exc_info`` to logger during rendering issues.\n\n* Add wildcard key for attributes. (#19)\n\n* Make ``linkify()`` use the ``HTMLSanitizer`` tokenizer. (#36)\n\n* Fix URLs wrapped in parentheses. (#23)\n\n* Make ``linkify()`` UTF-8 safe. (#33)\n\n\nVersion 1.0.3 (June 14, 2011)\n-----------------------------\n\n* ``linkify()`` works with 3rd level domains. (#24)\n\n* ``clean()`` supports vendor prefixes in style values. (#31, #32)\n\n* Fix ``linkify()`` email escaping.\n\n\nVersion 1.0.2 (June 6, 2011)\n----------------------------\n\n* ``linkify()`` supports email addresses.\n\n* ``clean()`` supports callables in attributes filter.\n\n\nVersion 1.0.1 (April 12, 2011)\n------------------------------\n\n* ``linkify()`` doesn't drop trailing slashes. (#21)\n* ``linkify()`` won't linkify 'libgl.so.1'. (#22)\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b7/8b/06f30caa03b5b3ac006de4f93478dbd0239e2a16566d81a106c322dc4f79/cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=4f2c9f67e9821cad2e5f480bc8d83b8742896f1242dba247911072d4fa94c192"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "cffi",
        "version": "1.15.1",
        "summary": "Foreign Function Interface for Python calling C code.",
        "home_page": "http://cffi.readthedocs.org",
        "author": "Armin Rigo, Maciej Fijalkowski",
        "author_email": "python-cffi@googlegroups.com",
        "license": "MIT",
        "classifier": [
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "License :: OSI Approved :: MIT License"
        ],
        "requires_dist": [
          "pycparser"
        ],
        "description": "\nCFFI\n====\n\nForeign Function Interface for Python calling C code.\nPlease see the `Documentation <http://cffi.readthedocs.org/>`_.\n\nContact\n-------\n\n`Mailing list <https://groups.google.com/forum/#!forum/python-cffi>`_\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/77/8b/7550e87b2d308a1b711725dfaddc19c695f8c5fa413c640b2be01662f4e6/colorama-0.4.5-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=854bf444933e37f5824ae7bfc1e98d5bce2ebe4160d46b5edf346a89358e99da"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "colorama",
        "version": "0.4.5",
        "summary": "Cross-platform colored terminal text.",
        "keywords": [
          "color",
          "colour",
          "terminal",
          "text",
          "ansi",
          "windows",
          "crossplatform",
          "xplatform"
        ],
        "home_page": "https://github.com/tartley/colorama",
        "author": "Jonathan Hartley",
        "author_email": "tartley@tartley.com",
        "maintainer": "Arnon Yaari",
        "license": "BSD",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Terminals"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "description": ".. image:: https://img.shields.io/pypi/v/colorama.svg\n    :target: https://pypi.org/project/colorama/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/colorama.svg\n    :target: https://pypi.org/project/colorama/\n    :alt: Supported Python versions\n\n.. image:: https://github.com/tartley/colorama/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/tartley/colorama/actions/workflows/test.yml\n    :alt: Build Status\n\nColorama\n========\n\nMakes ANSI escape character sequences (for producing colored terminal text and\ncursor positioning) work under MS Windows.\n\n.. |donate| image:: https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif\n  :target: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=2MZ9D2GMLYCUJ&item_name=Colorama&currency_code=USD\n  :alt: Donate with Paypal\n\n`PyPI for releases <https://pypi.org/project/colorama/>`_ |\n`Github for source <https://github.com/tartley/colorama>`_ |\n`Colorama for enterprise on Tidelift <https://github.com/tartley/colorama/blob/master/ENTERPRISE.md>`_\n\nIf you find Colorama useful, please |donate| to the authors. Thank you!\n\n\nInstallation\n------------\n\nTested on CPython 2.7, 3.5, 3.6, 3.7, 3.8, 3.9 and 3.10 and Pypy 2.7 and 3.6.\n\nNo requirements other than the standard library.\n\n.. code-block:: bash\n\n    pip install colorama\n    # or\n    conda install -c anaconda colorama\n\n\nDescription\n-----------\n\nANSI escape character sequences have long been used to produce colored terminal\ntext and cursor positioning on Unix and Macs. Colorama makes this work on\nWindows, too, by wrapping ``stdout``, stripping ANSI sequences it finds (which\nwould appear as gobbledygook in the output), and converting them into the\nappropriate win32 calls to modify the state of the terminal. On other platforms,\nColorama does nothing.\n\nThis has the upshot of providing a simple cross-platform API for printing\ncolored terminal text from Python, and has the happy side-effect that existing\napplications or libraries which use ANSI sequences to produce colored output on\nLinux or Macs can now also work on Windows, simply by calling\n``colorama.init()``.\n\nAn alternative approach is to install ``ansi.sys`` on Windows machines, which\nprovides the same behaviour for all applications running in terminals. Colorama\nis intended for situations where that isn't easy (e.g., maybe your app doesn't\nhave an installer.)\n\nDemo scripts in the source code repository print some colored text using\nANSI sequences. Compare their output under Gnome-terminal's built in ANSI\nhandling, versus on Windows Command-Prompt using Colorama:\n\n.. image:: https://github.com/tartley/colorama/raw/master/screenshots/ubuntu-demo.png\n    :width: 661\n    :height: 357\n    :alt: ANSI sequences on Ubuntu under gnome-terminal.\n\n.. image:: https://github.com/tartley/colorama/raw/master/screenshots/windows-demo.png\n    :width: 668\n    :height: 325\n    :alt: Same ANSI sequences on Windows, using Colorama.\n\nThese screenshots show that, on Windows, Colorama does not support ANSI 'dim\ntext'; it looks the same as 'normal text'.\n\nUsage\n-----\n\nInitialisation\n..............\n\nApplications should initialise Colorama using:\n\n.. code-block:: python\n\n    from colorama import init\n    init()\n\nOn Windows, calling ``init()`` will filter ANSI escape sequences out of any\ntext sent to ``stdout`` or ``stderr``, and replace them with equivalent Win32\ncalls.\n\nOn other platforms, calling ``init()`` has no effect (unless you request other\noptional functionality, see \"Init Keyword Args\" below; or if output\nis redirected). By design, this permits applications to call ``init()``\nunconditionally on all platforms, after which ANSI output should just work.\n\nOn all platforms, if output is redirected, ANSI escape sequences are completely\nstripped out.\n\nTo stop using Colorama before your program exits, simply call ``deinit()``.\nThis will restore ``stdout`` and ``stderr`` to their original values, so that\nColorama is disabled. To resume using Colorama again, call ``reinit()``; it is\ncheaper than calling ``init()`` again (but does the same thing).\n\n\nColored Output\n..............\n\nCross-platform printing of colored text can then be done using Colorama's\nconstant shorthand for ANSI escape sequences. These are deliberately\nrudimentary, see below.\n\n.. code-block:: python\n\n    from colorama import Fore, Back, Style\n    print(Fore.RED + 'some red text')\n    print(Back.GREEN + 'and with a green background')\n    print(Style.DIM + 'and in dim text')\n    print(Style.RESET_ALL)\n    print('back to normal now')\n\n...or simply by manually printing ANSI sequences from your own code:\n\n.. code-block:: python\n\n    print('\\033[31m' + 'some red text')\n    print('\\033[39m') # and reset to default color\n\n...or, Colorama can be used in conjunction with existing ANSI libraries\nsuch as the venerable `Termcolor <https://pypi.org/project/termcolor/>`_\nthe fabulous `Blessings <https://pypi.org/project/blessings/>`_,\nor the incredible `_Rich <https://pypi.org/project/rich/>`_.\n\nIf you wish Colorama's Fore, Back and Style constants were more capable,\nthen consider using one of the above highly capable libraries to generate\ncolors, etc, and use Colorama just for its primary purpose: to convert\nthose ANSI sequences to also work on Windows:\n\n.. code-block:: python\n\n    from colorama import init\n    from termcolor import colored\n\n    # use Colorama to make Termcolor work on Windows too\n    init()\n\n    # then use Termcolor for all colored text output\n    print(colored('Hello, World!', 'green', 'on_red'))\n\nAvailable formatting constants are::\n\n    Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Style: DIM, NORMAL, BRIGHT, RESET_ALL\n\n``Style.RESET_ALL`` resets foreground, background, and brightness. Colorama will\nperform this reset automatically on program exit.\n\nThese are fairly well supported, but not part of the standard::\n\n    Fore: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\n    Back: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\n\n\nCursor Positioning\n..................\n\nANSI codes to reposition the cursor are supported. See ``demos/demo06.py`` for\nan example of how to generate them.\n\n\nInit Keyword Args\n.................\n\n``init()`` accepts some ``**kwargs`` to override default behaviour.\n\ninit(autoreset=False):\n    If you find yourself repeatedly sending reset sequences to turn off color\n    changes at the end of every print, then ``init(autoreset=True)`` will\n    automate that:\n\n    .. code-block:: python\n\n        from colorama import init\n        init(autoreset=True)\n        print(Fore.RED + 'some red text')\n        print('automatically back to default color again')\n\ninit(strip=None):\n    Pass ``True`` or ``False`` to override whether ANSI codes should be\n    stripped from the output. The default behaviour is to strip if on Windows\n    or if output is redirected (not a tty).\n\ninit(convert=None):\n    Pass ``True`` or ``False`` to override whether to convert ANSI codes in the\n    output into win32 calls. The default behaviour is to convert if on Windows\n    and output is to a tty (terminal).\n\ninit(wrap=True):\n    On Windows, Colorama works by replacing ``sys.stdout`` and ``sys.stderr``\n    with proxy objects, which override the ``.write()`` method to do their work.\n    If this wrapping causes you problems, then this can be disabled by passing\n    ``init(wrap=False)``. The default behaviour is to wrap if ``autoreset`` or\n    ``strip`` or ``convert`` are True.\n\n    When wrapping is disabled, colored printing on non-Windows platforms will\n    continue to work as normal. To do cross-platform colored output, you can\n    use Colorama's ``AnsiToWin32`` proxy directly:\n\n    .. code-block:: python\n\n        import sys\n        from colorama import init, AnsiToWin32\n        init(wrap=False)\n        stream = AnsiToWin32(sys.stderr).stream\n\n        # Python 2\n        print >>stream, Fore.BLUE + 'blue text on stderr'\n\n        # Python 3\n        print(Fore.BLUE + 'blue text on stderr', file=stream)\n\n\nRecognised ANSI Sequences\n.........................\n\nANSI sequences generally take the form::\n\n    ESC [ <param> ; <param> ... <command>\n\nWhere ``<param>`` is an integer, and ``<command>`` is a single letter. Zero or\nmore params are passed to a ``<command>``. If no params are passed, it is\ngenerally synonymous with passing a single zero. No spaces exist in the\nsequence; they have been inserted here simply to read more easily.\n\nThe only ANSI sequences that Colorama converts into win32 calls are::\n\n    ESC [ 0 m       # reset all (colors and brightness)\n    ESC [ 1 m       # bright\n    ESC [ 2 m       # dim (looks same as normal brightness)\n    ESC [ 22 m      # normal brightness\n\n    # FOREGROUND:\n    ESC [ 30 m      # black\n    ESC [ 31 m      # red\n    ESC [ 32 m      # green\n    ESC [ 33 m      # yellow\n    ESC [ 34 m      # blue\n    ESC [ 35 m      # magenta\n    ESC [ 36 m      # cyan\n    ESC [ 37 m      # white\n    ESC [ 39 m      # reset\n\n    # BACKGROUND\n    ESC [ 40 m      # black\n    ESC [ 41 m      # red\n    ESC [ 42 m      # green\n    ESC [ 43 m      # yellow\n    ESC [ 44 m      # blue\n    ESC [ 45 m      # magenta\n    ESC [ 46 m      # cyan\n    ESC [ 47 m      # white\n    ESC [ 49 m      # reset\n\n    # cursor positioning\n    ESC [ y;x H     # position cursor at x across, y down\n    ESC [ y;x f     # position cursor at x across, y down\n    ESC [ n A       # move cursor n lines up\n    ESC [ n B       # move cursor n lines down\n    ESC [ n C       # move cursor n characters forward\n    ESC [ n D       # move cursor n characters backward\n\n    # clear the screen\n    ESC [ mode J    # clear the screen\n\n    # clear the line\n    ESC [ mode K    # clear the line\n\nMultiple numeric params to the ``'m'`` command can be combined into a single\nsequence::\n\n    ESC [ 36 ; 45 ; 1 m     # bright cyan text on magenta background\n\nAll other ANSI sequences of the form ``ESC [ <param> ; <param> ... <command>``\nare silently stripped from the output on Windows.\n\nAny other form of ANSI sequence, such as single-character codes or alternative\ninitial characters, are not recognised or stripped. It would be cool to add\nthem though. Let me know if it would be useful for you, via the Issues on\nGitHub.\n\n\nStatus & Known Problems\n-----------------------\n\nI've personally only tested it on Windows XP (CMD, Console2), Ubuntu\n(gnome-terminal, xterm), and OS X.\n\nSome presumably valid ANSI sequences aren't recognised (see details below),\nbut to my knowledge nobody has yet complained about this. Puzzling.\n\nSee outstanding issues and wish-list:\nhttps://github.com/tartley/colorama/issues\n\nIf anything doesn't work for you, or doesn't do what you expected or hoped for,\nI'd love to hear about it on that issues list, would be delighted by patches,\nand would be happy to grant commit access to anyone who submits a working patch\nor two.\n\nIf you're hacking on the code, see `README-hacking.md`_.\n\n.. _README-hacking.md: README-hacking.md\n\n\nLicense\n-------\n\nCopyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause license; see\nLICENSE file.\n\n\nProfessional support\n--------------------\n\n.. |tideliftlogo| image:: https://cdn2.hubspot.net/hubfs/4008838/website/logos/logos_for_download/Tidelift_primary-shorthand-logo.png\n   :alt: Tidelift\n   :target: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\n\n.. list-table::\n   :widths: 10 100\n\n   * - |tideliftlogo|\n     - Professional support for colorama is available as part of the\n       `Tidelift Subscription`_.\n       Tidelift gives software development teams a single source for purchasing\n       and maintaining their software, with professional grade assurances from\n       the experts who know it best, while seamlessly integrating with existing\n       tools.\n\n.. _Tidelift Subscription: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\n\n\nThanks\n------\n\n* Marc Schlaich (schlamar) for a ``setup.py`` fix for Python2.5.\n* Marc Abramowitz, reported & fixed a crash on exit with closed ``stdout``,\n  providing a solution to issue #7's setuptools/distutils debate,\n  and other fixes.\n* User 'eryksun', for guidance on correctly instantiating ``ctypes.windll``.\n* Matthew McCormick for politely pointing out a longstanding crash on non-Win.\n* Ben Hoyt, for a magnificent fix under 64-bit Windows.\n* Jesse at Empty Square for submitting a fix for examples in the README.\n* User 'jamessp', an observant documentation fix for cursor positioning.\n* User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but much-needed Win7\n  fix.\n* Julien Stuyck, for wisely suggesting Python3 compatible updates to README.\n* Daniel Griffith for multiple fabulous patches.\n* Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty\n  output.\n* Roger Binns, for many suggestions, valuable feedback, & bug reports.\n* Tim Golden for thought and much appreciated feedback on the initial idea.\n* User 'Zearin' for updates to the README file.\n* John Szakmeister for adding support for light colors\n* Charles Merriam for adding documentation to demos\n* Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes\n* Florian Bruhin for a fix when stdout or stderr are None\n* Thomas Weininger for fixing ValueError on Windows\n* Remi Rampin for better Github integration and fixes to the README file\n* Simeon Visser for closing a file handle using 'with' and updating classifiers\n  to include Python 3.3 and 3.4\n* Andy Neff for fixing RESET of LIGHT_EX colors.\n* Jonathan Hartley for the initial idea and implementation.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/07/6c/aa3f2f849e01cb6a001cd8554a88d4c77c5c1a31c95bdf1cf9301e6d9ef4/defusedxml-0.7.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "defusedxml",
        "version": "0.7.1",
        "platform": [
          "all"
        ],
        "summary": "XML bomb protection for Python stdlib modules",
        "keywords": [
          "xml",
          "bomb",
          "DoS"
        ],
        "home_page": "https://github.com/tiran/defusedxml",
        "download_url": "https://pypi.python.org/pypi/defusedxml",
        "author": "Christian Heimes",
        "author_email": "christian@python.org",
        "maintainer": "Christian Heimes",
        "maintainer_email": "christian@python.org",
        "license": "PSFL",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Python Software Foundation License",
          "Natural Language :: English",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Text Processing :: Markup :: XML"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "description": "===================================================\ndefusedxml -- defusing XML bombs and other exploits\n===================================================\n\n.. image:: https://img.shields.io/pypi/v/defusedxml.svg\n    :target: https://pypi.org/project/defusedxml/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/defusedxml.svg\n    :target: https://pypi.org/project/defusedxml/\n    :alt: Supported Python versions\n\n.. image:: https://travis-ci.org/tiran/defusedxml.svg?branch=master\n    :target: https://travis-ci.org/tiran/defusedxml\n    :alt: Travis CI\n\n.. image:: https://codecov.io/github/tiran/defusedxml/coverage.svg?branch=master\n    :target: https://codecov.io/github/tiran/defusedxml?branch=master\n    :alt: codecov\n\n.. image:: https://img.shields.io/pypi/dm/defusedxml.svg\n    :target: https://pypistats.org/packages/defusedxml\n    :alt: PyPI downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: Code style: black\n\n..\n\n    \"It's just XML, what could probably go wrong?\"\n\nChristian Heimes <christian@python.org>\n\nSynopsis\n========\n\nThe results of an attack on a vulnerable XML library can be fairly dramatic.\nWith just a few hundred **Bytes** of XML data an attacker can occupy several\n**Gigabytes** of memory within **seconds**. An attacker can also keep\nCPUs busy for a long time with a small to medium size request. Under some\ncircumstances it is even possible to access local files on your\nserver, to circumvent a firewall, or to abuse services to rebound attacks to\nthird parties.\n\nThe attacks use and abuse less common features of XML and its parsers. The\nmajority of developers are unacquainted with features such as processing\ninstructions and entity expansions that XML inherited from SGML. At best\nthey know about ``<!DOCTYPE>`` from experience with HTML but they are not\naware that a document type definition (DTD) can generate an HTTP request\nor load a file from the file system.\n\nNone of the issues is new. They have been known for a long time. Billion\nlaughs was first reported in 2003. Nevertheless some XML libraries and\napplications are still vulnerable and even heavy users of XML are\nsurprised by these features. It's hard to say whom to blame for the\nsituation. It's too short sighted to shift all blame on XML parsers and\nXML libraries for using insecure default settings. After all they\nproperly implement XML specifications. Application developers must not rely\nthat a library is always configured for security and potential harmful data\nby default.\n\n\n.. contents:: Table of Contents\n   :depth: 2\n\n\nAttack vectors\n==============\n\nbillion laughs / exponential entity expansion\n---------------------------------------------\n\nThe `Billion Laughs`_ attack -- also known as exponential entity expansion --\nuses multiple levels of nested entities. The original example uses 9 levels\nof 10 expansions in each level to expand the string ``lol`` to a string of\n3 * 10 :sup:`9` bytes, hence the name \"billion laughs\". The resulting string\noccupies 3 GB (2.79 GiB) of memory; intermediate strings require additional\nmemory. Because most parsers don't cache the intermediate step for every\nexpansion it is repeated over and over again. It increases the CPU load even\nmore.\n\nAn XML document of just a few hundred bytes can disrupt all services on a\nmachine within seconds.\n\nExample XML::\n\n    <!DOCTYPE xmlbomb [\n    <!ENTITY a \"1234567890\" >\n    <!ENTITY b \"&a;&a;&a;&a;&a;&a;&a;&a;\">\n    <!ENTITY c \"&b;&b;&b;&b;&b;&b;&b;&b;\">\n    <!ENTITY d \"&c;&c;&c;&c;&c;&c;&c;&c;\">\n    ]>\n    <bomb>&d;</bomb>\n\n\nquadratic blowup entity expansion\n---------------------------------\n\nA quadratic blowup attack is similar to a `Billion Laughs`_ attack; it abuses\nentity expansion, too. Instead of nested entities it repeats one large entity\nwith a couple of thousand chars over and over again. The attack isn't as\nefficient as the exponential case but it avoids triggering countermeasures of\nparsers against heavily nested entities. Some parsers limit the depth and\nbreadth of a single entity but not the total amount of expanded text\nthroughout an entire XML document.\n\nA medium-sized XML document with a couple of hundred kilobytes can require a\ncouple of hundred MB to several GB of memory. When the attack is combined\nwith some level of nested expansion an attacker is able to achieve a higher\nratio of success.\n\n::\n\n    <!DOCTYPE bomb [\n    <!ENTITY a \"xxxxxxx... a couple of ten thousand chars\">\n    ]>\n    <bomb>&a;&a;&a;... repeat</bomb>\n\n\nexternal entity expansion (remote)\n----------------------------------\n\nEntity declarations can contain more than just text for replacement. They can\nalso point to external resources by public identifiers or system identifiers.\nSystem identifiers are standard URIs. When the URI is a URL (e.g. a\n``http://`` locator) some parsers download the resource from the remote\nlocation and embed them into the XML document verbatim.\n\nSimple example of a parsed external entity::\n\n    <!DOCTYPE external [\n    <!ENTITY ee SYSTEM \"http://www.python.org/some.xml\">\n    ]>\n    <root>&ee;</root>\n\nThe case of parsed external entities works only for valid XML content. The\nXML standard also supports unparsed external entities with a\n``NData declaration``.\n\nExternal entity expansion opens the door to plenty of exploits. An attacker\ncan abuse a vulnerable XML library and application to rebound and forward\nnetwork requests with the IP address of the server. It highly depends\non the parser and the application what kind of exploit is possible. For\nexample:\n\n* An attacker can circumvent firewalls and gain access to restricted\n  resources as all the requests are made from an internal and trustworthy\n  IP address, not from the outside.\n* An attacker can abuse a service to attack, spy on or DoS your servers but\n  also third party services. The attack is disguised with the IP address of\n  the server and the attacker is able to utilize the high bandwidth of a big\n  machine.\n* An attacker can exhaust additional resources on the machine, e.g. with\n  requests to a service that doesn't respond or responds with very large\n  files.\n* An attacker may gain knowledge, when, how often and from which IP address\n  an XML document is accessed.\n* An attacker could send mail from inside your network if the URL handler\n  supports ``smtp://`` URIs.\n\n\nexternal entity expansion (local file)\n--------------------------------------\n\nExternal entities with references to local files are a sub-case of external\nentity expansion. It's listed as an extra attack because it deserves extra\nattention. Some XML libraries such as lxml disable network access by default\nbut still allow entity expansion with local file access by default. Local\nfiles are either referenced with a ``file://`` URL or by a file path (either\nrelative or absolute).\n\nAn attacker may be able to access and download all files that can be read by\nthe application process. This may include critical configuration files, too.\n\n::\n\n    <!DOCTYPE external [\n    <!ENTITY ee SYSTEM \"file:///PATH/TO/simple.xml\">\n    ]>\n    <root>&ee;</root>\n\n\nDTD retrieval\n-------------\n\nThis case is similar to external entity expansion, too. Some XML libraries\nlike Python's xml.dom.pulldom retrieve document type definitions from remote\nor local locations. Several attack scenarios from the external entity case\napply to this issue as well.\n\n::\n\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    <html>\n        <head/>\n        <body>text</body>\n    </html>\n\n\nPython XML Libraries\n====================\n\n.. csv-table:: vulnerabilities and features\n   :header: \"kind\", \"sax\", \"etree\", \"minidom\", \"pulldom\", \"xmlrpc\", \"lxml\", \"genshi\"\n   :widths: 24, 7, 8, 8, 7, 8, 8, 8\n   :stub-columns: 0\n\n   \"billion laughs\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"False (1)\", \"False (5)\"\n   \"quadratic blowup\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"False (5)\"\n   \"external entity expansion (remote)\", \"**True**\", \"False (3)\", \"False (4)\", \"**True**\", \"false\", \"False (1)\", \"False (5)\"\n   \"external entity expansion (local file)\", \"**True**\", \"False (3)\", \"False (4)\", \"**True**\", \"false\", \"**True**\", \"False (5)\"\n   \"DTD retrieval\", \"**True**\", \"False\", \"False\", \"**True**\", \"false\", \"False (1)\", \"False\"\n   \"gzip bomb\", \"False\", \"False\", \"False\", \"False\", \"**True**\", \"**partly** (2)\", \"False\"\n   \"xpath support (7)\", \"False\", \"False\", \"False\", \"False\", \"False\", \"**True**\", \"False\"\n   \"xsl(t) support (7)\", \"False\", \"False\", \"False\", \"False\", \"False\", \"**True**\", \"False\"\n   \"xinclude support (7)\", \"False\", \"**True** (6)\", \"False\", \"False\", \"False\", \"**True** (6)\", \"**True**\"\n   \"C library\", \"expat\", \"expat\", \"expat\", \"expat\", \"expat\", \"libxml2\", \"expat\"\n\n1. Lxml is protected against billion laughs attacks and doesn't do network\n   lookups by default.\n2. libxml2 and lxml are not directly vulnerable to gzip decompression bombs\n   but they don't protect you against them either.\n3. xml.etree doesn't expand entities and raises a ParserError when an entity\n   occurs.\n4. minidom doesn't expand entities and simply returns the unexpanded entity\n   verbatim.\n5. genshi.input of genshi 0.6 doesn't support entity expansion and raises a\n   ParserError when an entity occurs.\n6. Library has (limited) XInclude support but requires an additional step to\n   process inclusion.\n7. These are features but they may introduce exploitable holes, see\n   `Other things to consider`_\n\n\nSettings in standard library\n----------------------------\n\n\nxml.sax.handler Features\n........................\n\nfeature_external_ges (http://xml.org/sax/features/external-general-entities)\n  disables external entity expansion\n\nfeature_external_pes (http://xml.org/sax/features/external-parameter-entities)\n  the option is ignored and doesn't modify any functionality\n\nDOM xml.dom.xmlbuilder.Options\n..............................\n\nexternal_parameter_entities\n  ignored\n\nexternal_general_entities\n  ignored\n\nexternal_dtd_subset\n  ignored\n\nentities\n  unsure\n\n\ndefusedxml\n==========\n\nThe `defusedxml package`_ (`defusedxml on PyPI`_)\ncontains several Python-only workarounds and fixes\nfor denial of service and other vulnerabilities in Python's XML libraries.\nIn order to benefit from the protection you just have to import and use the\nlisted functions / classes from the right defusedxml module instead of the\noriginal module. Merely `defusedxml.xmlrpc`_ is implemented as monkey patch.\n\nInstead of::\n\n   >>> from xml.etree.ElementTree import parse\n   >>> et = parse(xmlfile)\n\nalter code to::\n\n   >>> from defusedxml.ElementTree import parse\n   >>> et = parse(xmlfile)\n\nAdditionally the package has an **untested** function to monkey patch\nall stdlib modules with ``defusedxml.defuse_stdlib()``.\n\nAll functions and parser classes accept three additional keyword arguments.\nThey return either the same objects as the original functions or compatible\nsubclasses.\n\nforbid_dtd (default: False)\n  disallow XML with a ``<!DOCTYPE>`` processing instruction and raise a\n  *DTDForbidden* exception when a DTD processing instruction is found.\n\nforbid_entities (default: True)\n  disallow XML with ``<!ENTITY>`` declarations inside the DTD and raise an\n  *EntitiesForbidden* exception when an entity is declared.\n\nforbid_external (default: True)\n  disallow any access to remote or local resources in external entities\n  or DTD and raising an *ExternalReferenceForbidden* exception when a DTD\n  or entity references an external resource.\n\n\ndefusedxml (package)\n--------------------\n\nDefusedXmlException, DTDForbidden, EntitiesForbidden,\nExternalReferenceForbidden, NotSupportedError\n\ndefuse_stdlib() (*experimental*)\n\n\ndefusedxml.cElementTree\n-----------------------\n\n**NOTE** ``defusedxml.cElementTree`` is deprecated and will be removed in a\nfuture release. Import from ``defusedxml.ElementTree`` instead.\n\nparse(), iterparse(), fromstring(), XMLParser\n\n\ndefusedxml.ElementTree\n-----------------------\n\nparse(), iterparse(), fromstring(), XMLParser\n\n\ndefusedxml.expatreader\n----------------------\n\ncreate_parser(), DefusedExpatParser\n\n\ndefusedxml.sax\n--------------\n\nparse(), parseString(), make_parser()\n\n\ndefusedxml.expatbuilder\n-----------------------\n\nparse(), parseString(), DefusedExpatBuilder, DefusedExpatBuilderNS\n\n\ndefusedxml.minidom\n------------------\n\nparse(), parseString()\n\n\ndefusedxml.pulldom\n------------------\n\nparse(), parseString()\n\n\ndefusedxml.xmlrpc\n-----------------\n\nThe fix is implemented as monkey patch for the stdlib's xmlrpc package (3.x)\nor xmlrpclib module (2.x). The function `monkey_patch()` enables the fixes,\n`unmonkey_patch()` removes the patch and puts the code in its former state.\n\nThe monkey patch protects against XML related attacks as well as\ndecompression bombs and excessively large requests or responses. The default\nsetting is 30 MB for requests, responses and gzip decompression. You can\nmodify the default by changing the module variable `MAX_DATA`. A value of\n`-1` disables the limit.\n\n\ndefusedxml.lxml\n---------------\n\n**DEPRECATED** The module is deprecated and will be removed in a future\nrelease.\n\nThe module acts as an *example* how you could protect code that uses\nlxml.etree. It implements a custom Element class that filters out\nEntity instances, a custom parser factory and a thread local storage for\nparser instances. It also has a check_docinfo() function which inspects\na tree for internal or external DTDs and entity declarations. In order to\ncheck for entities lxml > 3.0 is required.\n\nparse(), fromstring()\nRestrictedElement, GlobalParserTLS, getDefaultParser(), check_docinfo()\n\n\ndefusedexpat\n============\n\nThe `defusedexpat package`_ (`defusedexpat on PyPI`_)\ncomes with binary extensions and a\n`modified expat`_ library instead of the standard `expat parser`_. It's\nbasically a stand-alone version of the patches for Python's standard\nlibrary C extensions.\n\nModifications in expat\n----------------------\n\nnew definitions::\n\n  XML_BOMB_PROTECTION\n  XML_DEFAULT_MAX_ENTITY_INDIRECTIONS\n  XML_DEFAULT_MAX_ENTITY_EXPANSIONS\n  XML_DEFAULT_RESET_DTD\n\nnew XML_FeatureEnum members::\n\n  XML_FEATURE_MAX_ENTITY_INDIRECTIONS\n  XML_FEATURE_MAX_ENTITY_EXPANSIONS\n  XML_FEATURE_IGNORE_DTD\n\nnew XML_Error members::\n\n  XML_ERROR_ENTITY_INDIRECTIONS\n  XML_ERROR_ENTITY_EXPANSION\n\nnew API functions::\n\n  int XML_GetFeature(XML_Parser parser,\n                     enum XML_FeatureEnum feature,\n                     long *value);\n  int XML_SetFeature(XML_Parser parser,\n                     enum XML_FeatureEnum feature,\n                     long value);\n  int XML_GetFeatureDefault(enum XML_FeatureEnum feature,\n                            long *value);\n  int XML_SetFeatureDefault(enum XML_FeatureEnum feature,\n                            long value);\n\nXML_FEATURE_MAX_ENTITY_INDIRECTIONS\n   Limit the amount of indirections that are allowed to occur during the\n   expansion of a nested entity. A counter starts when an entity reference\n   is encountered. It resets after the entity is fully expanded. The limit\n   protects the parser against exponential entity expansion attacks (aka\n   billion laughs attack). When the limit is exceeded the parser stops and\n   fails with `XML_ERROR_ENTITY_INDIRECTIONS`.\n   A value of 0 disables the protection.\n\n   Supported range\n     0 .. UINT_MAX\n   Default\n     40\n\nXML_FEATURE_MAX_ENTITY_EXPANSIONS\n   Limit the total length of all entity expansions throughout the entire\n   document. The lengths of all entities are accumulated in a parser variable.\n   The setting protects against quadratic blowup attacks (lots of expansions\n   of a large entity declaration). When the sum of all entities exceeds\n   the limit, the parser stops and fails with `XML_ERROR_ENTITY_EXPANSION`.\n   A value of 0 disables the protection.\n\n   Supported range\n     0 .. UINT_MAX\n   Default\n     8 MiB\n\nXML_FEATURE_RESET_DTD\n   Reset all DTD information after the <!DOCTYPE> block has been parsed. When\n   the flag is set (default: false) all DTD information after the\n   endDoctypeDeclHandler has been called. The flag can be set inside the\n   endDoctypeDeclHandler. Without DTD information any entity reference in\n   the document body leads to `XML_ERROR_UNDEFINED_ENTITY`.\n\n   Supported range\n     0, 1\n   Default\n     0\n\n\nHow to avoid XML vulnerabilities\n================================\n\nBest practices\n--------------\n\n* Don't allow DTDs\n* Don't expand entities\n* Don't resolve externals\n* Limit parse depth\n* Limit total input size\n* Limit parse time\n* Favor a SAX or iterparse-like parser for potential large data\n* Validate and properly quote arguments to XSL transformations and\n  XPath queries\n* Don't use XPath expression from untrusted sources\n* Don't apply XSL transformations that come untrusted sources\n\n(based on Brad Hill's `Attacking XML Security`_)\n\n\nOther things to consider\n========================\n\nXML, XML parsers and processing libraries have more features and possible\nissue that could lead to DoS vulnerabilities or security exploits in\napplications. I have compiled an incomplete list of theoretical issues that\nneed further research and more attention. The list is deliberately pessimistic\nand a bit paranoid, too. It contains things that might go wrong under daffy\ncircumstances.\n\n\nattribute blowup / hash collision attack\n----------------------------------------\n\nXML parsers may use an algorithm with quadratic runtime O(n :sup:`2`) to\nhandle attributes and namespaces. If it uses hash tables (dictionaries) to\nstore attributes and namespaces the implementation may be vulnerable to\nhash collision attacks, thus reducing the performance to O(n :sup:`2`) again.\nIn either case an attacker is able to forge a denial of service attack with\nan XML document that contains thousands upon thousands of attributes in\na single node.\n\nI haven't researched yet if expat, pyexpat or libxml2 are vulnerable.\n\n\ndecompression bomb\n------------------\n\nThe issue of decompression bombs (aka `ZIP bomb`_) apply to all XML libraries\nthat can parse compressed XML stream like gzipped HTTP streams or LZMA-ed\nfiles. For an attacker it can reduce the amount of transmitted data by three\nmagnitudes or more. Gzip is able to compress 1 GiB zeros to roughly 1 MB,\nlzma is even better::\n\n    $ dd if=/dev/zero bs=1M count=1024 | gzip > zeros.gz\n    $ dd if=/dev/zero bs=1M count=1024 | lzma -z > zeros.xy\n    $ ls -sh zeros.*\n    1020K zeros.gz\n     148K zeros.xy\n\nNone of Python's standard XML libraries decompress streams except for\n``xmlrpclib``. The module is vulnerable <https://bugs.python.org/issue16043>\nto decompression bombs.\n\nlxml can load and process compressed data through libxml2 transparently.\nlibxml2 can handle even very large blobs of compressed data efficiently\nwithout using too much memory. But it doesn't protect applications from\ndecompression bombs. A carefully written SAX or iterparse-like approach can\nbe safe.\n\n\nProcessing Instruction\n----------------------\n\n`PI`_'s like::\n\n  <?xml-stylesheet type=\"text/xsl\" href=\"style.xsl\"?>\n\nmay impose more threats for XML processing. It depends if and how a\nprocessor handles processing instructions. The issue of URL retrieval with\nnetwork or local file access apply to processing instructions, too.\n\n\nOther DTD features\n------------------\n\n`DTD`_ has more features like ``<!NOTATION>``. I haven't researched how\nthese features may be a security threat.\n\n\nXPath\n-----\n\nXPath statements may introduce DoS vulnerabilities. Code should never execute\nqueries from untrusted sources. An attacker may also be able to create an XML\ndocument that makes certain XPath queries costly or resource hungry.\n\n\nXPath injection attacks\n-----------------------\n\nXPath injeciton attacks pretty much work like SQL injection attacks.\nArguments to XPath queries must be quoted and validated properly, especially\nwhen they are taken from the user. The page `Avoid the dangers of XPath injection`_\nlist some ramifications of XPath injections.\n\nPython's standard library doesn't have XPath support. Lxml supports\nparameterized XPath queries which does proper quoting. You just have to use\nits xpath() method correctly::\n\n   # DON'T\n   >>> tree.xpath(\"/tag[@id='%s']\" % value)\n\n   # instead do\n   >>> tree.xpath(\"/tag[@id=$tagid]\", tagid=name)\n\n\nXInclude\n--------\n\n`XML Inclusion`_ is another way to load and include external files::\n\n   <root xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n     <xi:include href=\"filename.txt\" parse=\"text\" />\n   </root>\n\nThis feature should be disabled when XML files from an untrusted source are\nprocessed. Some Python XML libraries and libxml2 support XInclude but don't\nhave an option to sandbox inclusion and limit it to allowed directories.\n\n\nXMLSchema location\n------------------\n\nA validating XML parser may download schema files from the information in a\n``xsi:schemaLocation`` attribute.\n\n::\n\n  <ead xmlns=\"urn:isbn:1-931666-22-9\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"urn:isbn:1-931666-22-9 http://www.loc.gov/ead/ead.xsd\">\n  </ead>\n\n\nXSL Transformation\n------------------\n\nYou should keep in mind that XSLT is a Turing complete language. Never\nprocess XSLT code from unknown or untrusted source! XSLT processors may\nallow you to interact with external resources in ways you can't even imagine.\nSome processors even support extensions that allow read/write access to file\nsystem, access to JRE objects or scripting with Jython.\n\nExample from `Attacking XML Security`_ for Xalan-J::\n\n    <xsl:stylesheet version=\"1.0\"\n     xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n     xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\"\n     xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"\n     exclude-result-prefixes= \"rt ob\">\n     <xsl:template match=\"/\">\n       <xsl:variable name=\"runtimeObject\" select=\"rt:getRuntime()\"/>\n       <xsl:variable name=\"command\"\n         select=\"rt:exec($runtimeObject, &apos;c:\\Windows\\system32\\cmd.exe&apos;)\"/>\n       <xsl:variable name=\"commandAsString\" select=\"ob:toString($command)\"/>\n       <xsl:value-of select=\"$commandAsString\"/>\n     </xsl:template>\n    </xsl:stylesheet>\n\n\nRelated CVEs\n============\n\nCVE-2013-1664\n  Unrestricted entity expansion induces DoS vulnerabilities in Python XML\n  libraries (XML bomb)\n\nCVE-2013-1665\n  External entity expansion in Python XML libraries inflicts potential\n  security flaws and DoS vulnerabilities\n\n\nOther languages / frameworks\n=============================\n\nSeveral other programming languages and frameworks are vulnerable as well. A\ncouple of them are affected by the fact that libxml2 up to 2.9.0 has no\nprotection against quadratic blowup attacks. Most of them have potential\ndangerous default settings for entity expansion and external entities, too.\n\nPerl\n----\n\nPerl's XML::Simple is vulnerable to quadratic entity expansion and external\nentity expansion (both local and remote).\n\n\nRuby\n----\n\nRuby's REXML document parser is vulnerable to entity expansion attacks\n(both quadratic and exponential) but it doesn't do external entity\nexpansion by default. In order to counteract entity expansion you have to\ndisable the feature::\n\n  REXML::Document.entity_expansion_limit = 0\n\nlibxml-ruby and hpricot don't expand entities in their default configuration.\n\n\nPHP\n---\n\nPHP's SimpleXML API is vulnerable to quadratic entity expansion and loads\nentities from local and remote resources. The option ``LIBXML_NONET`` disables\nnetwork access but still allows local file access. ``LIBXML_NOENT`` seems to\nhave no effect on entity expansion in PHP 5.4.6.\n\n\nC# / .NET / Mono\n----------------\n\nInformation in `XML DoS and Defenses (MSDN)`_ suggest that .NET is\nvulnerable with its default settings. The article contains code snippets\nhow to create a secure XML reader::\n\n  XmlReaderSettings settings = new XmlReaderSettings();\n  settings.ProhibitDtd = false;\n  settings.MaxCharactersFromEntities = 1024;\n  settings.XmlResolver = null;\n  XmlReader reader = XmlReader.Create(stream, settings);\n\n\nJava\n----\n\nUntested. The documentation of Xerces and its `Xerces SecurityMananger`_\nsounds like Xerces is also vulnerable to billion laugh attacks with its\ndefault settings. It also does entity resolving when an\n``org.xml.sax.EntityResolver`` is configured. I'm not yet sure about the\ndefault setting here.\n\nJava specialists suggest to have a custom builder factory::\n\n  DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n  builderFactory.setXIncludeAware(False);\n  builderFactory.setExpandEntityReferences(False);\n  builderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, True);\n  # either\n  builderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", True);\n  # or if you need DTDs\n  builderFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", False);\n  builderFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", False);\n  builderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", False);\n  builderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\", False);\n\n\nTODO\n====\n\n* DOM: Use xml.dom.xmlbuilder options for entity handling\n* SAX: take feature_external_ges and feature_external_pes (?) into account\n* test experimental monkey patching of stdlib modules\n* improve documentation\n\n\nLicense\n=======\n\nCopyright (c) 2013-2017 by Christian Heimes <christian@python.org>\n\nLicensed to PSF under a Contributor Agreement.\n\nSee https://www.python.org/psf/license for licensing details.\n\n\nAcknowledgements\n================\n\nBrett Cannon (Python Core developer)\n  review and code cleanup\n\nAntoine Pitrou (Python Core developer)\n  code review\n\nAaron Patterson, Ben Murphy and Michael Koziarski (Ruby community)\n  Many thanks to Aaron, Ben and Michael from the Ruby community for their\n  report and assistance.\n\nThierry Carrez (OpenStack)\n  Many thanks to Thierry for his report to the Python Security Response\n  Team on behalf of the OpenStack security team.\n\nCarl Meyer (Django)\n  Many thanks to Carl for his report to PSRT on behalf of the Django security\n  team.\n\nDaniel Veillard (libxml2)\n  Many thanks to Daniel for his insight and assistance with libxml2.\n\nsemantics GmbH (https://www.semantics.de/)\n  Many thanks to my employer semantics for letting me work on the issue\n  during working hours as part of semantics's open source initiative.\n\n\nReferences\n==========\n\n* `XML DoS and Defenses (MSDN)`_\n* `Billion Laughs`_ on Wikipedia\n* `ZIP bomb`_ on Wikipedia\n* `Configure SAX parsers for secure processing`_\n* `Testing for XML Injection`_\n\n.. _defusedxml package: https://github.com/tiran/defusedxml\n.. _defusedxml on PyPI: https://pypi.python.org/pypi/defusedxml\n.. _defusedexpat package: https://github.com/tiran/defusedexpat\n.. _defusedexpat on PyPI: https://pypi.python.org/pypi/defusedexpat\n.. _modified expat: https://github.com/tiran/expat\n.. _expat parser: http://expat.sourceforge.net/\n.. _Attacking XML Security: https://www.isecpartners.com/media/12976/iSEC-HILL-Attacking-XML-Security-bh07.pdf\n.. _Billion Laughs: https://en.wikipedia.org/wiki/Billion_laughs\n.. _XML DoS and Defenses (MSDN): https://msdn.microsoft.com/en-us/magazine/ee335713.aspx\n.. _ZIP bomb: https://en.wikipedia.org/wiki/Zip_bomb\n.. _DTD: https://en.wikipedia.org/wiki/Document_Type_Definition\n.. _PI: https://en.wikipedia.org/wiki/Processing_Instruction\n.. _Avoid the dangers of XPath injection: http://www.ibm.com/developerworks/xml/library/x-xpathinjection/index.html\n.. _Configure SAX parsers for secure processing: http://www.ibm.com/developerworks/xml/library/x-tipcfsx/index.html\n.. _Testing for XML Injection: https://www.owasp.org/index.php/Testing_for_XML_Injection_(OWASP-DV-008)\n.. _Xerces SecurityMananger: https://xerces.apache.org/xerces2-j/javadocs/xerces2/org/apache/xerces/util/SecurityManager.html\n.. _XML Inclusion: https://www.w3.org/TR/xinclude/#include_element\n\nChangelog\n=========\n\ndefusedxml 0.7.1\n---------------------\n\n*Release date: 08-Mar-2021*\n\n- Fix regression ``defusedxml.ElementTree.ParseError`` (#63)\n  The ``ParseError`` exception is now the same class object as\n  ``xml.etree.ElementTree.ParseError`` again.\n\n\ndefusedxml 0.7.0\n----------------\n\n*Release date: 4-Mar-2021*\n\n- No changes\n\n\ndefusedxml 0.7.0rc2\n-------------------\n\n*Release date: 12-Jan-2021*\n\n- Re-add and deprecate ``defusedxml.cElementTree``\n- Use GitHub Actions instead of TravisCI\n- Restore ``ElementTree`` attribute of ``xml.etree`` module after patching\n\ndefusedxml 0.7.0rc1\n-------------------\n\n*Release date: 04-May-2020*\n\n- Add support for Python 3.9\n- ``defusedxml.cElementTree`` is not available with Python 3.9.\n- Python 2 is deprecate. Support for Python 2 will be removed in 0.8.0.\n\n\ndefusedxml 0.6.0\n----------------\n\n*Release date: 17-Apr-2019*\n\n- Increase test coverage.\n- Add badges to README.\n\n\ndefusedxml 0.6.0rc1\n-------------------\n\n*Release date: 14-Apr-2019*\n\n- Test on Python 3.7 stable and 3.8-dev\n- Drop support for Python 3.4\n- No longer pass *html* argument to XMLParse. It has been deprecated and\n  ignored for a long time. The DefusedXMLParser still takes a html argument.\n  A deprecation warning is issued when the argument is False and a TypeError\n  when it's True.\n- defusedxml now fails early when pyexpat stdlib module is not available or\n  broken.\n- defusedxml.ElementTree.__all__ now lists ParseError as public attribute.\n- The defusedxml.ElementTree and defusedxml.cElementTree modules had a typo\n  and used XMLParse instead of XMLParser as an alias for DefusedXMLParser.\n  Both the old and fixed name are now available.\n\n\ndefusedxml 0.5.0\n----------------\n\n*Release date: 07-Feb-2017*\n\n- No changes\n\n\ndefusedxml 0.5.0.rc1\n--------------------\n\n*Release date: 28-Jan-2017*\n\n- Add compatibility with Python 3.6\n- Drop support for Python 2.6, 3.1, 3.2, 3.3\n- Fix lxml tests (XMLSyntaxError: Detected an entity reference loop)\n\n\ndefusedxml 0.4.1\n----------------\n\n*Release date: 28-Mar-2013*\n\n- Add more demo exploits, e.g. python_external.py and Xalan XSLT demos.\n- Improved documentation.\n\n\ndefusedxml 0.4\n--------------\n\n*Release date: 25-Feb-2013*\n\n- As per http://seclists.org/oss-sec/2013/q1/340 please REJECT\n  CVE-2013-0278, CVE-2013-0279 and CVE-2013-0280 and use CVE-2013-1664,\n  CVE-2013-1665 for OpenStack/etc.\n- Add missing parser_list argument to sax.make_parser(). The argument is\n  ignored, though. (thanks to Florian Apolloner)\n- Add demo exploit for external entity attack on Python's SAX parser, XML-RPC\n  and WebDAV.\n\n\ndefusedxml 0.3\n--------------\n\n*Release date: 19-Feb-2013*\n\n- Improve documentation\n\n\ndefusedxml 0.2\n--------------\n\n*Release date: 15-Feb-2013*\n\n- Rename ExternalEntitiesForbidden to ExternalReferenceForbidden\n- Rename defusedxml.lxml.check_dtd() to check_docinfo()\n- Unify argument names in callbacks\n- Add arguments and formatted representation to exceptions\n- Add forbid_external argument to all functions and classes\n- More tests\n- LOTS of documentation\n- Add example code for other languages (Ruby, Perl, PHP) and parsers (Genshi)\n- Add protection against XML and gzip attacks to xmlrpclib\n\ndefusedxml 0.1\n--------------\n\n*Release date: 08-Feb-2013*\n\n- Initial and internal release for PSRT review\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/e4/be/cf1b876348070a23cb0c3ebfee7a452ad3a91b07b456dade3bd514656009/fastjsonschema-2.16.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=21f918e8d9a1a4ba9c22e09574ba72267a6762d47822db9add95f6454e51cc1c"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "fastjsonschema",
        "version": "2.16.2",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Fastest Python implementation of JSON schema",
        "home_page": "https://github.com/horejsek/python-fastjsonschema",
        "author": "Michal Horejsek",
        "author_email": "fastjsonschema@horejsek.com",
        "license": "BSD",
        "classifier": [
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: Implementation :: CPython",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "colorama ; extra == 'devel'",
          "jsonschema ; extra == 'devel'",
          "json-spec ; extra == 'devel'",
          "pylint ; extra == 'devel'",
          "pytest ; extra == 'devel'",
          "pytest-benchmark ; extra == 'devel'",
          "pytest-cache ; extra == 'devel'",
          "validictory ; extra == 'devel'"
        ],
        "provides_extra": [
          "devel"
        ],
        "description": "===========================\nFast JSON schema for Python\n===========================\n\n|PyPI| |Pythons|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/fastjsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.python.org/pypi/fastjsonschema\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/fastjsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.python.org/pypi/fastjsonschema\n\nSee `documentation <https://horejsek.github.io/python-fastjsonschema/>`_.\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/cf/58/8acf1b3e91c58313ce5cb67df61001fc9dcd21be4fadb76c1a2d540e09ed/fqdn-1.5.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=3a179af3761e4df6eb2e026ff9e1a3033d3587bf980a0b1b2e1e5d08d7358014"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "fqdn",
        "version": "1.5.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Validates fully-qualified domain names against RFC 1123, so that they are acceptable to modern bowsers",
        "keywords": [
          "fqdn",
          "domain",
          "hostname",
          "RFC3686",
          "dns"
        ],
        "home_page": "https://github.com/ypcrts/fqdn",
        "author": "ypcrts",
        "author_email": "ypcrts@users.noreply.github.com",
        "license": "MPL 2.0",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: Name Service (DNS)",
          "Topic :: Internet",
          "Topic :: System :: Systems Administration",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "cached-property (>=1.3.0) ; python_version < \"3.8\""
        ],
        "requires_python": ">=2.7, !=3.0, !=3.1, !=3.2, !=3.3, !=3.4, <4",
        "description": "UNKNOWN\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c7/53/072d677a16fd61f5806d80218c65202cc0ee77b831088af8f79ef59efcf2/ipython-8.6.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=91ef03016bcf72dd17190f863476e7c799c6126ec7e8be97719d1bc9a78a59a4"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "ipython",
        "version": "8.6.0",
        "platform": [
          "Linux",
          "Mac OSX",
          "Windows"
        ],
        "summary": "IPython: Productive Interactive Computing",
        "description_content_type": "text/x-rst",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Embedding"
        ],
        "home_page": "https://ipython.org",
        "author": "The IPython Development Team",
        "author_email": "ipython-dev@python.org",
        "license": "BSD-3-Clause",
        "classifier": [
          "Framework :: IPython",
          "Framework :: Jupyter",
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Topic :: System :: Shells"
        ],
        "requires_dist": [
          "backcall",
          "decorator",
          "jedi (>=0.16)",
          "matplotlib-inline",
          "pickleshare",
          "prompt-toolkit (<3.1.0,>3.0.1)",
          "pygments (>=2.4.0)",
          "stack-data",
          "traitlets (>=5)",
          "pexpect (>4.3) ; sys_platform != \"win32\"",
          "appnope ; sys_platform == \"darwin\"",
          "colorama ; sys_platform == \"win32\"",
          "black ; extra == 'all'",
          "ipykernel ; extra == 'all'",
          "setuptools (>=18.5) ; extra == 'all'",
          "sphinx (>=1.3) ; extra == 'all'",
          "sphinx-rtd-theme ; extra == 'all'",
          "docrepr ; extra == 'all'",
          "matplotlib ; extra == 'all'",
          "stack-data ; extra == 'all'",
          "pytest (<7) ; extra == 'all'",
          "typing-extensions ; extra == 'all'",
          "pytest (<7.1) ; extra == 'all'",
          "pytest-asyncio ; extra == 'all'",
          "testpath ; extra == 'all'",
          "nbconvert ; extra == 'all'",
          "nbformat ; extra == 'all'",
          "ipywidgets ; extra == 'all'",
          "notebook ; extra == 'all'",
          "ipyparallel ; extra == 'all'",
          "qtconsole ; extra == 'all'",
          "curio ; extra == 'all'",
          "matplotlib (!=3.2.0) ; extra == 'all'",
          "numpy (>=1.20) ; extra == 'all'",
          "pandas ; extra == 'all'",
          "trio ; extra == 'all'",
          "black ; extra == 'black'",
          "ipykernel ; extra == 'doc'",
          "setuptools (>=18.5) ; extra == 'doc'",
          "sphinx (>=1.3) ; extra == 'doc'",
          "sphinx-rtd-theme ; extra == 'doc'",
          "docrepr ; extra == 'doc'",
          "matplotlib ; extra == 'doc'",
          "stack-data ; extra == 'doc'",
          "pytest (<7) ; extra == 'doc'",
          "typing-extensions ; extra == 'doc'",
          "pytest (<7.1) ; extra == 'doc'",
          "pytest-asyncio ; extra == 'doc'",
          "testpath ; extra == 'doc'",
          "ipykernel ; extra == 'kernel'",
          "nbconvert ; extra == 'nbconvert'",
          "nbformat ; extra == 'nbformat'",
          "ipywidgets ; extra == 'notebook'",
          "notebook ; extra == 'notebook'",
          "ipyparallel ; extra == 'parallel'",
          "qtconsole ; extra == 'qtconsole'",
          "pytest (<7.1) ; extra == 'test'",
          "pytest-asyncio ; extra == 'test'",
          "testpath ; extra == 'test'",
          "pytest (<7.1) ; extra == 'test_extra'",
          "pytest-asyncio ; extra == 'test_extra'",
          "testpath ; extra == 'test_extra'",
          "curio ; extra == 'test_extra'",
          "matplotlib (!=3.2.0) ; extra == 'test_extra'",
          "nbformat ; extra == 'test_extra'",
          "numpy (>=1.20) ; extra == 'test_extra'",
          "pandas ; extra == 'test_extra'",
          "trio ; extra == 'test_extra'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Documentation, https://ipython.readthedocs.io/",
          "Funding, https://numfocus.org/",
          "Source, https://github.com/ipython/ipython",
          "Tracker, https://github.com/ipython/ipython/issues"
        ],
        "provides_extra": [
          "all",
          "black",
          "doc",
          "kernel",
          "nbconvert",
          "nbformat",
          "notebook",
          "parallel",
          "qtconsole",
          "terminal",
          "test",
          "test_extra"
        ],
        "description": "IPython provides a rich toolkit to help you make the most out of using Python\ninteractively.  Its main components are:\n\n * A powerful interactive Python shell\n * A `Jupyter <https://jupyter.org/>`_ kernel to work with Python code in Jupyter\n   notebooks and other interactive frontends.\n\nThe enhanced interactive Python shells have the following main features:\n\n * Comprehensive object introspection.\n\n * Input history, persistent across sessions.\n\n * Caching of output results during a session with automatically generated\n   references.\n\n * Extensible tab completion, with support by default for completion of python\n   variables and keywords, filenames and function keywords.\n\n * Extensible system of 'magic' commands for controlling the environment and\n   performing many tasks related either to IPython or the operating system.\n\n * A rich configuration system with easy switching between different setups\n   (simpler than changing $PYTHONSTARTUP environment variables every time).\n\n * Session logging and reloading.\n\n * Extensible syntax processing for special purpose situations.\n\n * Access to the system shell with user-extensible alias system.\n\n * Easily embeddable in other Python programs and GUIs.\n\n * Integrated access to the pdb debugger and the Python profiler.\n\nThe latest development version is always available from IPython's `GitHub\nsite <http://github.com/ipython>`_.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/fa/bc/9bd3b5c2b4774d5f33b2d544f1460be9df7df2fe42f352135381c347c69a/ipython_genutils-0.2.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=72dd37233799e619666c9f639a9da83c34013a73e8bbc79a7a6348d93c61fab8"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.0",
        "name": "ipython-genutils",
        "version": "0.2.0",
        "platform": [
          "Linux",
          "Mac OS X",
          "Windows"
        ],
        "summary": "Vestigial utilities from IPython",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Web"
        ],
        "home_page": "http://ipython.org",
        "author": "IPython Development Team",
        "author_email": "ipython-dev@scipy.org",
        "license": "BSD",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.3"
        ],
        "description": "Pretend this doesn't exist. Nobody should use it.\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/7b/55/e5326141505c5d5e34c5e0935d2908a74e4561eca44108fbfb9c13d2911a/isoduration-20.11.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=b2904c2a4228c3d44f409c8ae8e2370eb21a26f7ac2ec5446df141dde3452042"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "isoduration",
        "version": "20.11.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Operations with ISO 8601 durations",
        "description_content_type": "text/markdown",
        "keywords": [
          "datetime",
          "date",
          "time",
          "duration",
          "duration-parsing",
          "duration-string",
          "iso8601",
          "iso8601-duration"
        ],
        "home_page": "https://github.com/bolsote/isoduration",
        "author": "Víctor Muñoz",
        "author_email": "victorm@marshland.es",
        "license": "UNKNOWN",
        "classifier": [
          "Programming Language :: Python :: 3",
          "Operating System :: OS Independent",
          "License :: OSI Approved :: ISC License (ISCL)",
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "arrow (>=0.15.0)"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Repository, https://github.com/bolsote/isoduration",
          "Bug Reports, https://github.com/bolsote/isoduration/issues",
          "Changelog, https://github.com/bolsote/isoduration/blob/master/CHANGELOG"
        ],
        "description": "# isoduration: Operations with ISO 8601 durations.\n\n[![PyPI Package](https://img.shields.io/pypi/v/isoduration?style=flat-square)](https://pypi.org/project/isoduration/)\n\n## What is this.\n\nISO 8601 is most commonly known as a way to exchange datetimes in textual format. A\nlesser known aspect of the standard is the representation of durations. They have a\nshape similar to this:\n\n```\nP3Y6M4DT12H30M5S\n```\n\nThis string represents a duration of 3 years, 6 months, 4 days, 12 hours, 30 minutes,\nand 5 seconds.\n\nThe state of the art of ISO 8601 duration handling in Python is more or less limited to\nwhat's offered by [`isodate`](https://pypi.org/project/isodate/). What we are trying to\nachieve here is to address the shortcomings of `isodate` (as described in their own\n[_Limitations_](https://github.com/gweis/isodate/#limitations) section), and a few of\nour own annoyances with their interface, such as the lack of uniformity in their\nhandling of types, and the use of regular expressions for parsing.\n\n## How to use it.\n\nThis package revolves around the [`Duration`](src/isoduration/types.py) type.\n\nGiven a ISO duration string we can produce such a type by using the `parse_duration()`\nfunction:\n\n```py\n>>> from isoduration import parse_duration\n>>> duration = parse_duration(\"P3Y6M4DT12H30M5S\")\n>>> duration.date\nDateDuration(years=Decimal('3'), months=Decimal('6'), days=Decimal('4'), weeks=Decimal('0'))\n>>> duration.time\nTimeDuration(hours=Decimal('12'), minutes=Decimal('30'), seconds=Decimal('5'))\n```\n\nThe `date` and `time` portions of the parsed duration are just regular\n[dataclasses](https://docs.python.org/3/library/dataclasses.html), so their members can\nbe accessed in a non-surprising way.\n\nBesides just parsing them, a number of additional operations are available:\n\n- Durations can be compared and negated:\n  ```py\n  >>> parse_duration(\"P3Y4D\") == parse_duration(\"P3Y4DT0H\")\n  True\n  >>> -parse_duration(\"P3Y4D\")\n  Duration(DateDuration(years=Decimal('-3'), months=Decimal('0'), days=Decimal('-4'), weeks=Decimal('0')), TimeDuration(hours=Decimal('0'), minutes=Decimal('0'), seconds=Decimal('0')))\n  ```\n- Durations can be added to, or subtracted from, Python datetimes:\n  ```py\n  >>> from datetime import datetime\n  >>> datetime(2020, 3, 15) + parse_duration(\"P2Y\")\n  datetime.datetime(2022, 3, 15, 0, 0)\n  >>> datetime(2020, 3, 15) - parse_duration(\"P33Y1M4D\")\n  datetime.datetime(1987, 2, 11, 0, 0)\n  ```\n- Durations are hashable, so they can be used as dictionary keys or as part of sets.\n- Durations can be formatted back to a ISO 8601-compliant duration string:\n  ```py\n  >>> from isoduration import parse_duration, format_duration\n  >>> format_duration(parse_duration(\"P11YT2H\"))\n  'P11YT2H'\n  >>> str(parse_duration(\"P11YT2H\"))\n  'P11YT2H'\n  ```\n\n## How to improve it.\n\nThese steps, in this order, should land you in a development environment:\n\n```sh\ngit clone git@github.com:bolsote/isoduration.git\ncd isoduration/\npython -m venv ve\n. ve/bin/activate\npip install -U pip\npip install -e .\npip install -r requirements/dev.txt\n```\n\nAdapt to your own likings and/or needs.\n\nTesting is driven by [tox](https://tox.readthedocs.io). The output of `tox -l` and a\ncareful read of [tox.ini](tox.ini) should get you there.\n\n## FAQs.\n\n### How come `P1Y != P365D`?\nSome years have 366 days. If it's not always the same, then it's not the same.\n\n### Why do you create your own types, instead of somewhat shoehorning a `timedelta`?\n`timedelta` cannot represent certain durations, such as those involving years or months.\nSince it cannot represent all possible durations without dangerous arithmetic, then it\nmust not be the right type.\n\n### Why don't you use regular expressions to parse duration strings?\n[Regular expressions should only be used to parse regular languages.](https://stackoverflow.com/a/1732454)\n\n### Why is parsing the inverse of formatting, but the converse is not true?\nBecause this wonderful representation is not unique.\n\n### Why do you support `<insert here a weird case>`?\nProbably because the standard made me to.\n\n### Why do you not support `<insert here a weird case>`?\nProbably because the standard doesn't allow me to.\n\n### Why is it not possible to subtract a datetime from a duration?\nI'm confused.\n\n### Why should I use this over some other thing?\nYou shouldn't do what people on the Internet tell you to do.\n\n### Why are ISO standards so strange?\nYes.\n\n## References.\n\n- [XML Schema Part 2: Datatypes, Appendix D](https://www.w3.org/TR/xmlschema-2/#isoformats):\n  This excitingly named document contains more details about ISO 8601 than any human\n  should be allowed to understand.\n- [`isodate`](https://pypi.org/project/isodate/): The original implementation of ISO\n  durations in Python. Worth a look. But ours is cooler.\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b3/0e/836f12ec50075161e365131f13f5758451645af75c2becf61c6351ecec39/jedi-0.18.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=637c9635fcf47945ceb91cd7f320234a7be540ded6f3e99a50cb6febdfd1ba8d"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jedi",
        "version": "0.18.1",
        "platform": [
          "any"
        ],
        "summary": "An autocompletion tool for Python that can be used for text editors.",
        "keywords": [
          "python",
          "completion",
          "refactoring",
          "vim"
        ],
        "home_page": "https://github.com/davidhalter/jedi",
        "author": "David Halter",
        "author_email": "davidhalter88@gmail.com",
        "maintainer": "David Halter",
        "maintainer_email": "davidhalter88@gmail.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Environment :: Plugins",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Text Editors :: Integrated Development Environments (IDE)",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "parso (<0.9.0,>=0.8.0)",
          "flake8 (==3.8.3) ; extra == 'qa'",
          "mypy (==0.782) ; extra == 'qa'",
          "Django (<3.1) ; extra == 'testing'",
          "colorama ; extra == 'testing'",
          "docopt ; extra == 'testing'",
          "pytest (<7.0.0) ; extra == 'testing'"
        ],
        "requires_python": ">=3.6",
        "provides_extra": [
          "qa",
          "testing"
        ],
        "description": "####################################################################################\nJedi - an awesome autocompletion, static analysis and refactoring library for Python\n####################################################################################\n\n.. image:: http://isitmaintained.com/badge/open/davidhalter/jedi.svg\n    :target: https://github.com/davidhalter/jedi/issues\n    :alt: The percentage of open issues and pull requests\n\n.. image:: http://isitmaintained.com/badge/resolution/davidhalter/jedi.svg\n    :target: https://github.com/davidhalter/jedi/issues\n    :alt: The resolution time is the median time an issue or pull request stays open.\n\n.. image:: https://github.com/davidhalter/jedi/workflows/ci/badge.svg?branch=master\n    :target: https://github.com/davidhalter/jedi/actions\n    :alt: Tests\n\n.. image:: https://pepy.tech/badge/jedi\n    :target: https://pepy.tech/project/jedi\n    :alt: PyPI Downloads\n\n\nJedi is a static analysis tool for Python that is typically used in\nIDEs/editors plugins. Jedi has a focus on autocompletion and goto\nfunctionality. Other features include refactoring, code search and finding\nreferences.\n\nJedi has a simple API to work with. There is a reference implementation as a\n`VIM-Plugin <https://github.com/davidhalter/jedi-vim>`_. Autocompletion in your\nREPL is also possible, IPython uses it natively and for the CPython REPL you\ncan install it. Jedi is well tested and bugs should be rare.\n\nJedi can currently be used with the following editors/projects:\n\n- Vim (jedi-vim_, YouCompleteMe_, deoplete-jedi_, completor.vim_)\n- `Visual Studio Code`_ (via `Python Extension <https://marketplace.visualstudio.com/items?itemName=ms-python.python>`_)\n- Emacs (Jedi.el_, company-mode_, elpy_, anaconda-mode_, ycmd_)\n- Sublime Text (SublimeJEDI_ [ST2 + ST3], anaconda_ [only ST3])\n- TextMate_ (Not sure if it's actually working)\n- Kate_ version 4.13+ supports it natively, you have to enable it, though.  [`see\n  <https://projects.kde.org/projects/kde/applications/kate/repository/show?rev=KDE%2F4.13>`_]\n- Atom_ (autocomplete-python-jedi_)\n- `GNOME Builder`_ (with support for GObject Introspection)\n- Gedit (gedi_)\n- wdb_ - Web Debugger\n- `Eric IDE`_ (Available as a plugin)\n- `IPython 6.0.0+ <https://ipython.readthedocs.io/en/stable/whatsnew/version6.html>`_\n- `xonsh shell <https://xon.sh/contents.html>`_ has `jedi extension <https://xon.sh/xontribs.html#jedi>`_\n\nand many more!\n\nThere are a few language servers that use Jedi:\n\n- `jedi-language-server <https://github.com/pappasam/jedi-language-server>`_\n- `python-language-server <https://github.com/palantir/python-language-server>`_\n- `anakin-language-server <https://github.com/muffinmad/anakin-language-server>`_\n\nHere are some pictures taken from jedi-vim_:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_complete.png\n\nCompletion for almost anything:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_function.png\n\nDocumentation:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_pydoc.png\n\n\nGet the latest version from `github <https://github.com/davidhalter/jedi>`_\n(master branch should always be kind of stable/working).\n\nDocs are available at `https://jedi.readthedocs.org/en/latest/\n<https://jedi.readthedocs.org/en/latest/>`_. Pull requests with enhancements\nand/or fixes are awesome and most welcome. Jedi uses `semantic versioning\n<https://semver.org/>`_.\n\nIf you want to stay **up-to-date** with releases, please **subscribe** to this\nmailing list: https://groups.google.com/g/jedi-announce. To subscribe you can\nsimply send an empty email to ``jedi-announce+subscribe@googlegroups.com``.\n\nIssues & Questions\n==================\n\nYou can file issues and questions in the `issue tracker\n<https://github.com/davidhalter/jedi/>`. Alternatively you can also ask on\n`Stack Overflow <https://stackoverflow.com/questions/tagged/python-jedi>`_ with\nthe label ``python-jedi``.\n\nInstallation\n============\n\n`Check out the docs <https://jedi.readthedocs.org/en/latest/docs/installation.html>`_.\n\nFeatures and Limitations\n========================\n\nJedi's features are listed here:\n`Features <https://jedi.readthedocs.org/en/latest/docs/features.html>`_.\n\nYou can run Jedi on Python 3.6+ but it should also\nunderstand code that is older than those versions. Additionally you should be\nable to use `Virtualenvs <https://jedi.readthedocs.org/en/latest/docs/api.html#environments>`_\nvery well.\n\nTips on how to use Jedi efficiently can be found `here\n<https://jedi.readthedocs.org/en/latest/docs/features.html#recipes>`_.\n\nAPI\n---\n\nYou can find a comprehensive documentation for the\n`API here <https://jedi.readthedocs.org/en/latest/docs/api.html>`_.\n\nAutocompletion / Goto / Documentation\n-------------------------------------\n\nThere are the following commands:\n\n- ``jedi.Script.goto``\n- ``jedi.Script.infer``\n- ``jedi.Script.help``\n- ``jedi.Script.complete``\n- ``jedi.Script.get_references``\n- ``jedi.Script.get_signatures``\n- ``jedi.Script.get_context``\n\nThe returned objects are very powerful and are really all you might need.\n\nAutocompletion in your REPL (IPython, etc.)\n-------------------------------------------\n\nJedi is a dependency of IPython. Autocompletion in IPython with Jedi is\ntherefore possible without additional configuration.\n\nHere is an `example video <https://vimeo.com/122332037>`_ how REPL completion\ncan look like.\nFor the ``python`` shell you can enable tab completion in a `REPL\n<https://jedi.readthedocs.org/en/latest/docs/usage.html#tab-completion-in-the-python-shell>`_.\n\nStatic Analysis\n---------------\n\nFor a lot of forms of static analysis, you can try to use\n``jedi.Script(...).get_names``. It will return a list of names that you can\nthen filter and work with. There is also a way to list the syntax errors in a\nfile: ``jedi.Script.get_syntax_errors``.\n\n\nRefactoring\n-----------\n\nJedi supports the following refactorings:\n\n- ``jedi.Script.inline``\n- ``jedi.Script.rename``\n- ``jedi.Script.extract_function``\n- ``jedi.Script.extract_variable``\n\nCode Search\n-----------\n\nThere is support for module search with ``jedi.Script.search``, and project\nsearch for ``jedi.Project.search``. The way to search is either by providing a\nname like ``foo`` or by using dotted syntax like ``foo.bar``. Additionally you\ncan provide the API type like ``class foo.bar.Bar``. There are also the\nfunctions ``jedi.Script.complete_search`` and ``jedi.Project.complete_search``.\n\nDevelopment\n===========\n\nThere's a pretty good and extensive `development documentation\n<https://jedi.readthedocs.org/en/latest/docs/development.html>`_.\n\nTesting\n=======\n\nThe test suite uses ``pytest``::\n\n    pip install pytest\n\nIf you want to test only a specific Python version (e.g. Python 3.8), it is as\neasy as::\n\n    python3.8 -m pytest\n\nFor more detailed information visit the `testing documentation\n<https://jedi.readthedocs.org/en/latest/docs/testing.html>`_.\n\nAcknowledgements\n================\n\nThanks a lot to all the\n`contributors <https://jedi.readthedocs.org/en/latest/docs/acknowledgements.html>`_!\n\n\n.. _jedi-vim: https://github.com/davidhalter/jedi-vim\n.. _youcompleteme: https://github.com/ycm-core/YouCompleteMe\n.. _deoplete-jedi: https://github.com/zchee/deoplete-jedi\n.. _completor.vim: https://github.com/maralla/completor.vim\n.. _Jedi.el: https://github.com/tkf/emacs-jedi\n.. _company-mode: https://github.com/syohex/emacs-company-jedi\n.. _elpy: https://github.com/jorgenschaefer/elpy\n.. _anaconda-mode: https://github.com/proofit404/anaconda-mode\n.. _ycmd: https://github.com/abingham/emacs-ycmd\n.. _sublimejedi: https://github.com/srusskih/SublimeJEDI\n.. _anaconda: https://github.com/DamnWidget/anaconda\n.. _wdb: https://github.com/Kozea/wdb\n.. _TextMate: https://github.com/lawrenceakka/python-jedi.tmbundle\n.. _Kate: https://kate-editor.org\n.. _Atom: https://atom.io/\n.. _autocomplete-python-jedi: https://atom.io/packages/autocomplete-python-jedi\n.. _GNOME Builder: https://wiki.gnome.org/Apps/Builder\n.. _Visual Studio Code: https://code.visualstudio.com/\n.. _gedi: https://github.com/isamert/gedi\n.. _Eric IDE: https://eric-ide.python-projects.org\n\n\n.. :changelog:\n\nChangelog\n---------\n\nUnreleased\n++++++++++\n\n0.18.1 (2021-11-17)\n+++++++++++++++++++\n\n- Implict namespaces are now a separate types in ``Name().type``\n- Python 3.10 support\n- Mostly bugfixes\n\n0.18.0 (2020-12-25)\n+++++++++++++++++++\n\n- Dropped Python 2 and Python 3.5\n- Using ``pathlib.Path()`` as an output instead of ``str`` in most places:\n  - ``Project.path``\n  - ``Script.path``\n  - ``Definition.module_path``\n  - ``Refactoring.get_renames``\n  - ``Refactoring.get_changed_files``\n- Functions with ``@property`` now return ``property`` instead of ``function``\n  in ``Name().type``\n- Started using annotations\n- Better support for the walrus operator\n- Project attributes are now read accessible\n- Removed all deprecations\n\nThis is likely going to be the last minor release before 1.0.\n\n0.17.2 (2020-07-17)\n+++++++++++++++++++\n\n- Added an option to pass environment variables to ``Environment``\n- ``Project(...).path`` exists now\n- Support for Python 3.9\n- A few bugfixes\n\nThis will be the last release that supports Python 2 and Python 3.5.\n``0.18.0`` will be Python 3.6+.\n\n0.17.1 (2020-06-20)\n+++++++++++++++++++\n\n- Django ``Model`` meta class support\n- Django Manager support (completion on Managers/QuerySets)\n- Added Django Stubs to Jedi, thanks to all contributors of the\n  `Django Stubs <https://github.com/typeddjango/django-stubs>`_ project\n- Added ``SyntaxError.get_message``\n- Python 3.9 support\n- Bugfixes (mostly towards Generics)\n\n0.17.0 (2020-04-14)\n+++++++++++++++++++\n\n- Added ``Project`` support. This allows a user to specify which folders Jedi\n  should work with.\n- Added support for Refactoring. The following refactorings have been\n  implemented: ``Script.rename``, ``Script.inline``,\n  ``Script.extract_variable`` and ``Script.extract_function``.\n- Added ``Script.get_syntax_errors`` to display syntax errors in the current\n  script.\n- Added code search capabilities both for individual files and projects. The\n  new functions are ``Project.search``, ``Project.complete_search``,\n  ``Script.search`` and ``Script.complete_search``.\n- Added ``Script.help`` to make it easier to display a help window to people.\n  Now returns pydoc information as well for Python keywords/operators.  This\n  means that on the class keyword it will now return the docstring of Python's\n  builtin function ``help('class')``.\n- The API documentation is now way more readable and complete. Check it out\n  under https://jedi.readthedocs.io. A lot of it has been rewritten.\n- Removed Python 3.4 support\n- Many bugfixes\n\nThis is likely going to be the last minor version that supports Python 2 and\nPython3.5. Bugfixes will be provided in 0.17.1+. The next minor/major version\nwill probably be Jedi 1.0.0.\n\n0.16.0 (2020-01-26)\n+++++++++++++++++++\n\n- **Added** ``Script.get_context`` to get information where you currently are.\n- Completions/type inference of **Pytest fixtures**.\n- Tensorflow, Numpy and Pandas completions should now be about **4-10x faster**\n  after the first time they are used.\n- Dict key completions are working now. e.g. ``d = {1000: 3}; d[10`` will\n  expand to ``1000``.\n- Completion for \"proxies\" works now. These are classes that have a\n  ``__getattr__(self, name)`` method that does a ``return getattr(x, name)``.\n  after loading them initially.\n- Goto on a function/attribute in a class now goes to the definition in its\n  super class.\n- Big **Script API Changes**:\n    - The line and column parameters of ``jedi.Script`` are now deprecated\n    - ``completions`` deprecated, use ``complete`` instead\n    - ``goto_assignments`` deprecated, use ``goto`` instead\n    - ``goto_definitions`` deprecated, use ``infer`` instead\n    - ``call_signatures`` deprecated, use ``get_signatures`` instead\n    - ``usages`` deprecated, use ``get_references`` instead\n    - ``jedi.names`` deprecated, use ``jedi.Script(...).get_names()``\n- ``BaseName.goto_assignments`` renamed to ``BaseName.goto``\n- Add follow_imports to ``Name.goto``. Now its signature matches\n  ``Script.goto``.\n- **Python 2 support deprecated**. For this release it is best effort. Python 2\n  has reached the end of its life and now it's just about a smooth transition.\n  Bugs for Python 2 will not be fixed anymore and a third of the tests are\n  already skipped.\n- Removed ``settings.no_completion_duplicates``. It wasn't tested and nobody\n  was probably using it anyway.\n- Removed ``settings.use_filesystem_cache`` and\n  ``settings.additional_dynamic_modules``, they have no usage anymore. Pretty\n  much nobody was probably using them.\n\n0.15.2 (2019-12-20)\n+++++++++++++++++++\n\n- Signatures are now detected a lot better\n- Add fuzzy completions with ``Script(...).completions(fuzzy=True)``\n- Files bigger than one MB (about 20kLOC) get cropped to avoid getting\n  stuck completely.\n- Many small Bugfixes\n- A big refactoring around contexts/values\n\n0.15.1 (2019-08-13)\n+++++++++++++++++++\n\n- Small bugfix and removal of a print statement\n\n0.15.0 (2019-08-11)\n+++++++++++++++++++\n\n- Added file path completions, there's a **new** ``Completion.type`` now:\n  ``path``. Example: ``'/ho`` -> ``'/home/``\n- ``*args``/``**kwargs`` resolving. If possible Jedi replaces the parameters\n  with the actual alternatives.\n- Better support for enums/dataclasses\n- When using Interpreter, properties are now executed, since a lot of people\n  have complained about this. Discussion in #1299, #1347.\n\nNew APIs:\n\n- ``Name.get_signatures() -> List[Signature]``. Signatures are similar to\n  ``CallSignature``. ``Name.params`` is therefore deprecated.\n- ``Signature.to_string()`` to format signatures.\n- ``Signature.params -> List[ParamName]``, ParamName has the\n  following additional attributes ``infer_default()``, ``infer_annotation()``,\n  ``to_string()``, and ``kind``.\n- ``Name.execute() -> List[Name]``, makes it possible to infer\n  return values of functions.\n\n\n0.14.1 (2019-07-13)\n+++++++++++++++++++\n\n- CallSignature.index should now be working a lot better\n- A couple of smaller bugfixes\n\n0.14.0 (2019-06-20)\n+++++++++++++++++++\n\n- Added ``goto_*(prefer_stubs=True)`` as well as ``goto_*(prefer_stubs=True)``\n- Stubs are used now for type inference\n- Typeshed is used for better type inference\n- Reworked Name.full_name, should have more correct return values\n\n0.13.3 (2019-02-24)\n+++++++++++++++++++\n\n- Fixed an issue with embedded Python, see https://github.com/davidhalter/jedi-vim/issues/870\n\n0.13.2 (2018-12-15)\n+++++++++++++++++++\n\n- Fixed a bug that led to Jedi spawning a lot of subprocesses.\n\n0.13.1 (2018-10-02)\n+++++++++++++++++++\n\n- Bugfixes, because tensorflow completions were still slow.\n\n0.13.0 (2018-10-02)\n+++++++++++++++++++\n\n- A small release. Some bug fixes.\n- Remove Python 3.3 support. Python 3.3 support has been dropped by the Python\n  foundation.\n- Default environments are now using the same Python version as the Python\n  process. In 0.12.x, we used to load the latest Python version on the system.\n- Added ``include_builtins`` as a parameter to usages.\n- ``goto_assignments`` has a new ``follow_builtin_imports`` parameter that\n  changes the previous behavior slightly.\n\n0.12.1 (2018-06-30)\n+++++++++++++++++++\n\n- This release forces you to upgrade parso. If you don't, nothing will work\n  anymore. Otherwise changes should be limited to bug fixes. Unfortunately Jedi\n  still uses a few internals of parso that make it hard to keep compatibility\n  over multiple releases. Parso >=0.3.0 is going to be needed.\n\n0.12.0 (2018-04-15)\n+++++++++++++++++++\n\n- Virtualenv/Environment support\n- F-String Completion/Goto Support\n- Cannot crash with segfaults anymore\n- Cleaned up import logic\n- Understand async/await and autocomplete it (including async generators)\n- Better namespace completions\n- Passing tests for Windows (including CI for Windows)\n- Remove Python 2.6 support\n\n0.11.1 (2017-12-14)\n+++++++++++++++++++\n\n- Parso update - the caching layer was broken\n- Better usages - a lot of internal code was ripped out and improved.\n\n0.11.0 (2017-09-20)\n+++++++++++++++++++\n\n- Split Jedi's parser into a separate project called ``parso``.\n- Avoiding side effects in REPL completion.\n- Numpy docstring support should be much better.\n- Moved the `settings.*recursion*` away, they are no longer usable.\n\n0.10.2 (2017-04-05)\n+++++++++++++++++++\n\n- Python Packaging sucks. Some files were not included in 0.10.1.\n\n0.10.1 (2017-04-05)\n+++++++++++++++++++\n\n- Fixed a few very annoying bugs.\n- Prepared the parser to be factored out of Jedi.\n\n0.10.0 (2017-02-03)\n+++++++++++++++++++\n\n- Actual semantic completions for the complete Python syntax.\n- Basic type inference for ``yield from`` PEP 380.\n- PEP 484 support (most of the important features of it). Thanks Claude! (@reinhrst)\n- Added ``get_line_code`` to ``Name`` and ``Completion`` objects.\n- Completely rewritten the type inference engine.\n- A new and better parser for (fast) parsing diffs of Python code.\n\n0.9.0 (2015-04-10)\n++++++++++++++++++\n\n- The import logic has been rewritten to look more like Python's. There is now\n  an ``InferState.modules`` import cache, which resembles ``sys.modules``.\n- Integrated the parser of 2to3. This will make refactoring possible. It will\n  also be possible to check for error messages (like compiling an AST would give)\n  in the future.\n- With the new parser, the type inference also completely changed. It's now\n  simpler and more readable.\n- Completely rewritten REPL completion.\n- Added ``jedi.names``, a command to do static analysis. Thanks to that\n  sourcegraph guys for sponsoring this!\n- Alpha version of the linter.\n\n\n0.8.1 (2014-07-23)\n+++++++++++++++++++\n\n- Bugfix release, the last release forgot to include files that improve\n  autocompletion for builtin libraries. Fixed.\n\n0.8.0 (2014-05-05)\n+++++++++++++++++++\n\n- Memory Consumption for compiled modules (e.g. builtins, sys) has been reduced\n  drastically. Loading times are down as well (it takes basically as long as an\n  import).\n- REPL completion is starting to become usable.\n- Various small API changes. Generally this release focuses on stability and\n  refactoring of internal APIs.\n- Introducing operator precedence, which makes calculating correct Array\n  indices and ``__getattr__`` strings possible.\n\n0.7.0 (2013-08-09)\n++++++++++++++++++\n\n- Switched from LGPL to MIT license.\n- Added an Interpreter class to the API to make autocompletion in REPL\n  possible.\n- Added autocompletion support for namespace packages.\n- Add sith.py, a new random testing method.\n\n0.6.0 (2013-05-14)\n++++++++++++++++++\n\n- Much faster parser with builtin part caching.\n- A test suite, thanks @tkf.\n\n0.5 versions (2012)\n+++++++++++++++++++\n\n- Initial development.\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/bc/c3/f068337a370801f372f2f8f6bad74a5c140f6fda3d9de154052708dd3c65/Jinja2-3.1.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "Jinja2",
        "version": "3.1.2",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "A very fast and expressive template engine.",
        "description_content_type": "text/x-rst",
        "home_page": "https://palletsprojects.com/p/jinja/",
        "author": "Armin Ronacher",
        "author_email": "armin.ronacher@active-4.com",
        "maintainer": "Pallets",
        "maintainer_email": "contact@palletsprojects.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
          "Topic :: Text Processing :: Markup :: HTML"
        ],
        "requires_dist": [
          "MarkupSafe (>=2.0)",
          "Babel (>=2.7) ; extra == 'i18n'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Donate, https://palletsprojects.com/donate",
          "Documentation, https://jinja.palletsprojects.com/",
          "Changes, https://jinja.palletsprojects.com/changes/",
          "Source Code, https://github.com/pallets/jinja/",
          "Issue Tracker, https://github.com/pallets/jinja/issues/",
          "Twitter, https://twitter.com/PalletsTeam",
          "Chat, https://discord.gg/pallets"
        ],
        "provides_extra": [
          "i18n"
        ],
        "description": "Jinja\n=====\n\nJinja is a fast, expressive, extensible templating engine. Special\nplaceholders in the template allow writing code similar to Python\nsyntax. Then the template is passed data to render the final document.\n\nIt includes:\n\n-   Template inheritance and inclusion.\n-   Define and import macros within templates.\n-   HTML templates can use autoescaping to prevent XSS from untrusted\n    user input.\n-   A sandboxed environment can safely render untrusted templates.\n-   AsyncIO support for generating templates and calling async\n    functions.\n-   I18N support with Babel.\n-   Templates are compiled to optimized Python code just-in-time and\n    cached, or can be compiled ahead-of-time.\n-   Exceptions point to the correct line in templates to make debugging\n    easier.\n-   Extensible filters, tests, functions, and even syntax.\n\nJinja's philosophy is that while application logic belongs in Python if\npossible, it shouldn't make the template designer's job difficult by\nrestricting functionality too much.\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    $ pip install -U Jinja2\n\n.. _pip: https://pip.pypa.io/en/stable/getting-started/\n\n\nIn A Nutshell\n-------------\n\n.. code-block:: jinja\n\n    {% extends \"base.html\" %}\n    {% block title %}Members{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\n\nDonate\n------\n\nThe Pallets organization develops and supports Jinja and other popular\npackages. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, `please\ndonate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://jinja.palletsprojects.com/\n-   Changes: https://jinja.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/Jinja2/\n-   Source Code: https://github.com/pallets/jinja/\n-   Issue Tracker: https://github.com/pallets/jinja/issues/\n-   Website: https://palletsprojects.com/p/jinja/\n-   Twitter: https://twitter.com/PalletsTeam\n-   Chat: https://discord.gg/pallets\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/a3/be/8dc9d31b50e38172c8020c40f497ce8debdb721545ddb9fcb7cca89ea9e6/jsonpointer-2.3-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=51801e558539b4e9cd268638c078c6c5746c9ac96bc38152d443400e4f3793e9"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jsonpointer",
        "version": "2.3",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Identify specific nodes in a JSON document (RFC 6901) ",
        "description_content_type": "text/markdown",
        "home_page": "https://github.com/stefankoegl/python-json-pointer",
        "author": "Stefan Kögl",
        "author_email": "stefan@skoegl.net",
        "license": "Modified BSD License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries",
          "Topic :: Utilities"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "description": "python-json-pointer\n===================\n\n[![PyPI version](https://img.shields.io/pypi/v/jsonpointer.svg)](https://pypi.python.org/pypi/jsonpointer/)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/jsonpointer.svg)](https://pypi.python.org/pypi/jsonpointer/)\n[![Build Status](https://travis-ci.org/stefankoegl/python-json-pointer.svg?branch=master)](https://travis-ci.org/stefankoegl/python-json-pointer)\n[![Coverage Status](https://coveralls.io/repos/stefankoegl/python-json-pointer/badge.svg?branch=master)](https://coveralls.io/r/stefankoegl/python-json-pointer?branch=master)\n\n\nResolve JSON Pointers in Python\n-------------------------------\n\nLibrary to resolve JSON Pointers according to\n[RFC 6901](http://tools.ietf.org/html/rfc6901)\n\nSee source code for examples\n* Website: https://github.com/stefankoegl/python-json-pointer\n* Repository: https://github.com/stefankoegl/python-json-pointer.git\n* Documentation: https://python-json-pointer.readthedocs.org/\n* PyPI: https://pypi.python.org/pypi/jsonpointer\n* Travis CI: https://travis-ci.org/stefankoegl/python-json-pointer\n* Coveralls: https://coveralls.io/r/stefankoegl/python-json-pointer\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c1/97/c698bd9350f307daad79dd740806e1a59becd693bd11443a0f531e3229b3/jsonschema-4.17.3-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=a870ad254da1a8ca84b6a2905cac29d265f805acc57af304784962a2aa6508f6"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jsonschema",
        "version": "4.17.3",
        "summary": "An implementation of JSON Schema validation for Python",
        "description_content_type": "text/x-rst",
        "keywords": [
          "data validation",
          "json",
          "jsonschema",
          "validation"
        ],
        "author": "Julian Berman",
        "author_email": "Julian+jsonschema@GrayVines.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy"
        ],
        "requires_dist": [
          "attrs>=17.4.0",
          "importlib-metadata; python_version < '3.8'",
          "importlib-resources>=1.4.0; python_version < '3.9'",
          "pkgutil-resolve-name>=1.3.10; python_version < '3.9'",
          "pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0",
          "typing-extensions; python_version < '3.8'",
          "fqdn; extra == 'format'",
          "idna; extra == 'format'",
          "isoduration; extra == 'format'",
          "jsonpointer>1.13; extra == 'format'",
          "rfc3339-validator; extra == 'format'",
          "rfc3987; extra == 'format'",
          "uri-template; extra == 'format'",
          "webcolors>=1.11; extra == 'format'",
          "fqdn; extra == 'format-nongpl'",
          "idna; extra == 'format-nongpl'",
          "isoduration; extra == 'format-nongpl'",
          "jsonpointer>1.13; extra == 'format-nongpl'",
          "rfc3339-validator; extra == 'format-nongpl'",
          "rfc3986-validator>0.1.0; extra == 'format-nongpl'",
          "uri-template; extra == 'format-nongpl'",
          "webcolors>=1.11; extra == 'format-nongpl'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://github.com/python-jsonschema/jsonschema",
          "Documentation, https://python-jsonschema.readthedocs.io/",
          "Issues, https://github.com/python-jsonschema/jsonschema/issues/",
          "Funding, https://github.com/sponsors/Julian",
          "Tidelift, https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&utm_medium=referral&utm_campaign=pypi-link",
          "Changelog, https://github.com/python-jsonschema/jsonschema/blob/main/CHANGELOG.rst",
          "Source, https://github.com/python-jsonschema/jsonschema"
        ],
        "provides_extra": [
          "format",
          "format-nongpl"
        ],
        "description": "==========\njsonschema\n==========\n\n|PyPI| |Pythons| |CI| |ReadTheDocs| |Precommit| |Zenodo|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.org/project/jsonschema/\n\n.. |CI| image:: https://github.com/python-jsonschema/jsonschema/workflows/CI/badge.svg\n  :alt: Build status\n  :target: https://github.com/python-jsonschema/jsonschema/actions?query=workflow%3ACI\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat\n   :alt: ReadTheDocs status\n   :target: https://python-jsonschema.readthedocs.io/en/stable/\n\n.. |Precommit| image:: https://results.pre-commit.ci/badge/github/python-jsonschema/jsonschema/main.svg\n   :alt: pre-commit.ci status\n   :target: https://results.pre-commit.ci/latest/github/python-jsonschema/jsonschema/main\n\n.. |Zenodo| image:: https://zenodo.org/badge/3072629.svg\n   :target: https://zenodo.org/badge/latestdoi/3072629\n\n\n``jsonschema`` is an implementation of the `JSON Schema\n<https://json-schema.org>`_ specification for Python.\n\n.. code-block:: python\n\n    >>> from jsonschema import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)\n\n    >>> validate(\n    ...     instance={\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema=schema,\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from console:\n\n.. code-block:: bash\n\n    $ jsonschema --instance sample.json sample.schema\n\nFeatures\n--------\n\n* Partial support for\n  `Draft 2020-12 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft202012Validator>`_ and\n  `Draft 2019-09 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft201909Validator>`_,\n  except for ``dynamicRef`` / ``recursiveRef`` and ``$vocabulary`` (in-progress).\n  Full support for\n  `Draft 7 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft7Validator>`_,\n  `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft6Validator>`_,\n  `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft4Validator>`_\n  and\n  `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft3Validator>`_\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/protocols/#jsonschema.protocols.Validator.iter_errors>`_\n  that can iteratively report *all* validation errors.\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/>`_\n  of which properties or items failed validation.\n\n\nInstallation\n------------\n\n``jsonschema`` is available on `PyPI <https://pypi.org/project/jsonschema/>`_. You can install using `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code-block:: bash\n\n    $ pip install jsonschema\n\n\nExtras\n======\n\nTwo extras are available when installing the package, both currently related to ``format`` validation:\n\n    * ``format``\n    * ``format-nongpl``\n\nThey can be used when installing in order to include additional dependencies, e.g.:\n\n.. code-block:: bash\n\n    $ pip install jsonschema'[format]'\n\nBe aware that the mere presence of these dependencies – or even the specification of ``format`` checks in a schema – do *not* activate format checks (as per the specification).\nPlease read the `format validation documentation <https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats>`_ for further details.\n\nAbout\n-----\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <https://github.com/python-jsonschema/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute,\nit'd be most welcome!\n\nYou can also generally find me on Libera (nick: ``Julian``) in various\nchannels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can also `sponsor me\n<https://github.com/sponsors/Julian/>`_.\n\nAnd for companies who appreciate ``jsonschema`` and its continued support\nand growth, ``jsonschema`` is also now supportable via `TideLift\n<https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-j\nsonschema&utm_medium=referral&utm_campaign=readme>`_.\n\n\nRelease Information\n-------------------\n\nv4.17.3\n=======\n\n* Fix instantiating validators with cached refs to boolean schemas\n  rather than objects (#1018).\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/db/ca/5417fe822262649957f3447de549f918cda0eb65ae3e44ce33cf86806de3/jupyter_events-0.5.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=6f7b67bf42b8a370c992187194ed02847dfa02307a7aebe9913e2d3979b9b6b8"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jupyter-events",
        "version": "0.5.0",
        "summary": "Jupyter Event System library",
        "description_content_type": "text/markdown",
        "keywords": [
          "Jupyter",
          "JupyterLab"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# Licensing terms\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2022-, Jupyter Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the Jupyter Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the Jupyter Development Team\n        \n        The Jupyter Development Team is the set of all contributors to the Jupyter project.\n        This includes all of the Jupyter subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        Jupyter uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to Jupyter. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the Jupyter\n        source code, in its entirety is not the copyright of any single person or\n        institution. Instead, it is the collective copyright of the entire Jupyter\n        Development Team. If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the Jupyter repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n            # Copyright (c) Jupyter Development Team.\n            # Distributed under the terms of the Modified BSD License.",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3"
        ],
        "requires_dist": [
          "jsonschema[format-nongpl]>=4.3.0",
          "python-json-logger",
          "pyyaml",
          "traitlets",
          "click; extra == 'cli'",
          "rich; extra == 'cli'",
          "click; extra == 'test'",
          "coverage; extra == 'test'",
          "pre-commit; extra == 'test'",
          "pytest-asyncio>=0.19.0; extra == 'test'",
          "pytest-console-scripts; extra == 'test'",
          "pytest-cov; extra == 'test'",
          "pytest>=6.1.0; extra == 'test'",
          "rich; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, http://jupyter.org"
        ],
        "provides_extra": [
          "cli",
          "test"
        ],
        "description": "# Jupyter Events\n\n_An event system for Jupyter Applications and extensions._\n\nJupyter Events enables Jupyter Python Applications (e.g. Jupyter Server, JupyterLab Server, JupyterHub, etc.) to emit **events**—structured data describing things happening inside the application. Other software (e.g. client applications like JupyterLab) can _listen_ and respond to these events.\n\n## Install\n\nInstall Jupyter Events directly from PyPI:\n\n```\npip install jupyter_events\n```\n\nor conda-forge:\n\n```\nconda install -c conda-forge jupyter_events\n```\n\n## Documentation\n\nDocumentation is available at [jupyter-events.readthedocs.io](https://jupyter-events.readthedocs.io).\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/4b/b4/df6186d9d1c7e8d943febb8e1a17aedc031ab374924fd19193f9efb0fbb2/jupyter_client-7.4.7-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=df56ae23b8e1da1b66f89dee1368e948b24a7f780fa822c5735187589fc4c157"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jupyter_client",
        "version": "7.4.7",
        "summary": "Jupyter protocol implementation and client libraries",
        "description_content_type": "text/markdown",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Web"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# Licensing terms\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2001-2015, IPython Development Team\n        - Copyright (c) 2015-, Jupyter Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the Jupyter Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the Jupyter Development Team\n        \n        The Jupyter Development Team is the set of all contributors to the Jupyter project.\n        This includes all of the Jupyter subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        Jupyter uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to Jupyter. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the Jupyter\n        source code, in its entirety is not the copyright of any single person or\n        institution. Instead, it is the collective copyright of the entire Jupyter\n        Development Team. If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the Jupyter repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n            # Copyright (c) Jupyter Development Team.\n            # Distributed under the terms of the Modified BSD License.",
        "classifier": [
          "Framework :: Jupyter",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_dist": [
          "entrypoints",
          "jupyter-core>=4.9.2",
          "nest-asyncio>=1.5.4",
          "python-dateutil>=2.8.2",
          "pyzmq>=23.0",
          "tornado>=6.2",
          "traitlets",
          "ipykernel; extra == 'doc'",
          "myst-parser; extra == 'doc'",
          "sphinx-rtd-theme; extra == 'doc'",
          "sphinx>=1.3.6; extra == 'doc'",
          "sphinxcontrib-github-alt; extra == 'doc'",
          "codecov; extra == 'test'",
          "coverage; extra == 'test'",
          "ipykernel>=6.12; extra == 'test'",
          "ipython; extra == 'test'",
          "mypy; extra == 'test'",
          "pre-commit; extra == 'test'",
          "pytest; extra == 'test'",
          "pytest-asyncio>=0.18; extra == 'test'",
          "pytest-cov; extra == 'test'",
          "pytest-timeout; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://jupyter.org"
        ],
        "provides_extra": [
          "doc",
          "test"
        ],
        "description": "# Jupyter Client\n\n[![Build Status](https://github.com/jupyter/jupyter_client/workflows/CI/badge.svg)](https://github.com/jupyter/jupyter_client/actions)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n`jupyter_client` contains the reference implementation of the [Jupyter protocol][].\nIt also provides client and kernel management APIs for working with kernels.\n\nIt also provides the `jupyter kernelspec` entrypoint\nfor installing kernelspecs for use with Jupyter frontends.\n\n[jupyter protocol]: https://jupyter-client.readthedocs.io/en/latest/messaging.html\n\n## Development Setup\n\nThe [Jupyter Contributor Guides](https://jupyter.readthedocs.io/en/latest/contributing/content-contributor.html) provide extensive information on contributing code or documentation to Jupyter projects. The limited instructions below for setting up a development environment are for your convenience.\n\n## Coding\n\nYou'll need Python and `pip` on the search path. Clone the Jupyter Client git repository to your computer, for example in `/my/project/jupyter_client`\n\n```bash\ncd /my/projects/\ngit clone git@github.com:jupyter/jupyter_client.git\n```\n\nNow create an [editable install](https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs)\nand download the dependencies of code and test suite by executing:\n\n```bash\ncd /my/projects/jupyter_client/\npip install -e \".[test]\"\npytest\n```\n\nThe last command runs the test suite to verify the setup. During development, you can pass filenames to `pytest`, and it will execute only those tests.\n\n## Documentation\n\nThe documentation of Jupyter Client is generated from the files in `docs/` using Sphinx. Instructions for setting up Sphinx with a selection of optional modules are in the [Documentation Guide](https://jupyter.readthedocs.io/en/latest/contributing/docs-contributions/index.html). You'll also need the `make` command.\nFor a minimal Sphinx installation to process the Jupyter Client docs, execute:\n\n```bash\npip install \".[doc]\"\n```\n\nThe following commands build the documentation in HTML format and check for broken links:\n\n```bash\ncd /my/projects/jupyter_client/docs/\nmake html linkcheck\n```\n\nPoint your browser to the following URL to access the generated documentation:\n\n_file:///my/projects/jupyter_client/docs/\\_build/html/index.html_\n\n## Contributing\n\n`jupyter-client` has adopted automatic code formatting so you shouldn't\nneed to worry too much about your code style.\nAs long as your code is valid,\nthe pre-commit hook should take care of how it should look.\nYou can invoke the pre-commit hook by hand at any time with:\n\n```bash\npre-commit run\n```\n\nwhich should run any autoformatting on your code\nand tell you about any errors it couldn't fix automatically.\nYou may also install [black integration](https://black.readthedocs.io/en/stable/integrations/editors.html)\ninto your text editor to format code automatically.\n\nIf you have already committed files before setting up the pre-commit\nhook with `pre-commit install`, you can fix everything up using\n`pre-commit run --all-files`. You need to make the fixing commit\nyourself after that.\n\nSome of the hooks only run on CI by default, but you can invoke them by\nrunning with the `--hook-stage manual` argument.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/af/21/9b36b20e8c93f4dc14e99674a85672f97f8ecef9a88337ecff998770e768/jupyter_server-2.0.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=3bc09974a5290249de6924a614933e6f4f3d6d11f3061423a9f4e0271064a8b3"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jupyter_server",
        "version": "2.0.1",
        "summary": "The backend—i.e. core services, APIs, and REST endpoints—to Jupyter web applications.",
        "description_content_type": "text/markdown",
        "keywords": [
          "ipython",
          "jupyter"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# Licensing terms\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2001-2015, IPython Development Team\n        - Copyright (c) 2015-, Jupyter Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the Jupyter Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the Jupyter Development Team\n        \n        The Jupyter Development Team is the set of all contributors to the Jupyter project.\n        This includes all of the Jupyter subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        Jupyter uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to Jupyter. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the Jupyter\n        source code, in its entirety is not the copyright of any single person or\n        institution. Instead, it is the collective copyright of the entire Jupyter\n        Development Team. If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the Jupyter repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n        ```\n        # Copyright (c) Jupyter Development Team.\n        # Distributed under the terms of the Modified BSD License.\n        ```",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: Jupyter",
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11"
        ],
        "requires_dist": [
          "anyio<4,>=3.1.0",
          "argon2-cffi",
          "jinja2",
          "jupyter-client>=7.4.4",
          "jupyter-core!=5.0.*,>=4.12",
          "jupyter-events>=0.4.0",
          "jupyter-server-terminals",
          "nbconvert>=6.4.4",
          "nbformat>=5.3.0",
          "packaging",
          "prometheus-client",
          "pywinpty; os_name == 'nt'",
          "pyzmq>=24",
          "send2trash",
          "terminado>=0.8.3",
          "tornado>=6.2.0",
          "traitlets>=5.6.0",
          "websocket-client",
          "docutils<0.20; extra == 'docs'",
          "ipykernel; extra == 'docs'",
          "jinja2; extra == 'docs'",
          "jupyter-client; extra == 'docs'",
          "jupyter-server; extra == 'docs'",
          "mistune<1.0.0; extra == 'docs'",
          "myst-parser; extra == 'docs'",
          "nbformat; extra == 'docs'",
          "prometheus-client; extra == 'docs'",
          "pydata-sphinx-theme; extra == 'docs'",
          "send2trash; extra == 'docs'",
          "sphinxcontrib-github-alt; extra == 'docs'",
          "sphinxcontrib-openapi; extra == 'docs'",
          "sphinxemoji; extra == 'docs'",
          "tornado; extra == 'docs'",
          "black>=22.6.0; extra == 'lint'",
          "mdformat>0.7; extra == 'lint'",
          "ruff>=0.0.156; extra == 'lint'",
          "ipykernel; extra == 'test'",
          "pre-commit; extra == 'test'",
          "pytest-console-scripts; extra == 'test'",
          "pytest-jupyter[server]>=0.4; extra == 'test'",
          "pytest-timeout; extra == 'test'",
          "pytest>=7.0; extra == 'test'",
          "requests; extra == 'test'",
          "mypy>=0.990; extra == 'typing'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Homepage, https://jupyter-server.readthedocs.io",
          "Documentation, https://jupyter-server.readthedocs.io",
          "Funding, https://numfocus.org/donate",
          "Source, https://github.com/jupyter-server/jupyter_server",
          "Tracker, https://github.com/jupyter-server/jupyter_server/issues"
        ],
        "provides_extra": [
          "docs",
          "lint",
          "test",
          "typing"
        ],
        "description": "# Jupyter Server\n\n[![Build Status](https://github.com/jupyter-server/jupyter_server/actions/workflows/python-tests.yml/badge.svg?query=branch%3Amain++)](https://github.com/jupyter-server/jupyter_server/actions/workflows/python-tests.yml/badge.svg?query=branch%3Amain++)\n[![codecov](https://codecov.io/gh/jupyter-server/jupyter_server/branch/main/graph/badge.svg?token=S9WiBg2iL0)](https://codecov.io/gh/jupyter-server/jupyter_server)\n[![Documentation Status](https://readthedocs.org/projects/jupyter-server/badge/?version=latest)](http://jupyter-server.readthedocs.io/en/latest/?badge=latest)\n\nThe Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications like Jupyter notebook, JupyterLab, and Voila.\n\nFor more information, read our [documentation here](http://jupyter-server.readthedocs.io/en/latest/?badge=latest).\n\n## Installation and Basic usage\n\nTo install the latest release locally, make sure you have\n[pip installed](https://pip.readthedocs.io/en/stable/installing/) and run:\n\n```\npip install jupyter_server\n```\n\nJupyter Server currently supports Python>=3.6 on Linux, OSX and Windows.\n\n### Versioning and Branches\n\nIf Jupyter Server is a dependency of your project/application, it is important that you pin it to a version that works for your application. Currently, Jupyter Server only has minor and patch versions. Different minor versions likely include API-changes while patch versions do not change API.\n\nWhen a new minor version is released on PyPI, a branch for that version will be created in this repository, and the version of the main branch will be bumped to the next minor version number. That way, the main branch always reflects the latest un-released version.\n\nTo see the changes between releases, checkout the [CHANGELOG](https://github.com/jupyter/jupyter_server/blob/main/CHANGELOG.md).\n\n## Usage - Running Jupyter Server\n\n### Running in a local installation\n\nLaunch with:\n\n```\njupyter server\n```\n\n### Testing\n\nSee [CONTRIBUTING](https://github.com/jupyter-server/jupyter_server/blob/main/CONTRIBUTING.rst#running-tests).\n\n## Contributing\n\nIf you are interested in contributing to the project, see [`CONTRIBUTING.rst`](CONTRIBUTING.rst).\n\n## Team Meetings and Roadmap\n\n- When: Thursdays [8:00am, Pacific time](https://www.thetimezoneconverter.com/?t=8%3A00%20am&tz=San%20Francisco&)\n- Where: [Jovyan Zoom](https://zoom.us/my/jovyan?pwd=c0JZTHlNdS9Sek9vdzR3aTJ4SzFTQT09)\n- What: [Meeting notes](https://github.com/jupyter-server/team-compass/issues/4)\n\nSee our tentative [roadmap here](https://github.com/jupyter/jupyter_server/issues/127).\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/5e/85/279bb5a32f7f49a6c68964a19871b3ac27a03ac47783879a860ca4d26598/jupyter_server_terminals-0.4.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=c0eaacee6cac21b597c23c38dd523dc4e9b947f97af5101e0396c08f28db3e37"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jupyter_server_terminals",
        "version": "0.4.2",
        "summary": "A Jupyter Server Extension Providing Terminals.",
        "description_content_type": "text/markdown",
        "keywords": [
          "ipython",
          "jupyter"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# Licensing terms\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2021-, Jupyter Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the Jupyter Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the Jupyter Development Team\n        \n        The Jupyter Development Team is the set of all contributors to the Jupyter project.\n        This includes all of the Jupyter subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        Jupyter uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to Jupyter. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the Jupyter\n        source code, in its entirety is not the copyright of any single person or\n        institution. Instead, it is the collective copyright of the entire Jupyter\n        Development Team. If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the Jupyter repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n            # Copyright (c) Jupyter Development Team.\n            # Distributed under the terms of the Modified BSD License.",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_dist": [
          "pywinpty>=2.0.3; os_name == 'nt'",
          "terminado>=0.8.3",
          "jinja2; extra == 'docs'",
          "jupyter-server; extra == 'docs'",
          "mistune<2.0; extra == 'docs'",
          "myst-parser; extra == 'docs'",
          "nbformat; extra == 'docs'",
          "packaging; extra == 'docs'",
          "pydata-sphinx-theme; extra == 'docs'",
          "sphinxcontrib-github-alt; extra == 'docs'",
          "sphinxcontrib-openapi; extra == 'docs'",
          "sphinxemoji; extra == 'docs'",
          "tornado; extra == 'docs'",
          "coverage; extra == 'test'",
          "jupyter-server>=2.0.0rc8; extra == 'test'",
          "pytest-cov; extra == 'test'",
          "pytest-jupyter[server]>=0.5.3; extra == 'test'",
          "pytest-timeout; extra == 'test'",
          "pytest>=7.0; extra == 'test'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Homepage, https://jupyter.org"
        ],
        "provides_extra": [
          "docs",
          "test"
        ],
        "description": "# Jupyter Server Terminals\n\n[![Build Status](https://github.com/jupyter-server/jupyter_server_terminals/actions/workflows/test.yml/badge.svg?query=branch%3Amain++)](https://github.com/jupyter-server/jupyter_server_terminals/actions?query=branch%3Amain++)\n[![codecov](https://codecov.io/gh/jupyter-server/jupyter_server_terminals/branch/main/graph/badge.svg?token=6OPBSEMMUG)](https://codecov.io/gh/jupyter-server/jupyter_server_terminals)\n[![Documentation Status](https://readthedocs.org/projects/jupyter-server-terminals/badge/?version=latest)](http://jupyter-server-terminals.readthedocs.io/en/latest/?badge=latest)\n\nJupyter Server Terminals is a Jupyter Server Extension providing support for terminals.\n\n## Installation and Basic usage\n\nTo install the latest release locally, make sure you have\n[pip installed](https://pip.readthedocs.io/en/stable/installing/) and run:\n\n```\npip install jupyter_server_terminals\n```\n\nJupyter Server Terminals currently supports Python>=3.6 on Linux, OSX and Windows.\n\n### Testing\n\nSee [CONTRIBUTING](./CONTRIBUTING.rst#running-tests).\n\n## Contributing\n\nIf you are interested in contributing to the project, see [CONTRIBUTING](./CONTRIBUTING.rst).\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c0/7e/c3d1df3ae9b41686e664051daedbd70eea2e1d2bd9d9c33e7e1455bc9f96/jupyterlab_pygments-0.2.2-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2405800db07c9f770863bcf8049a529c3dd4d3e28536638bd7c1c01d2748309f"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "jupyterlab-pygments",
        "version": "0.2.2",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Pygments theme using JupyterLab CSS variables",
        "description_content_type": "text/markdown",
        "keywords": [
          "jupyter",
          "jupyterlab",
          "JupyterLab3",
          "pygments"
        ],
        "home_page": "https://github.com/jupyterlab/jupyterlab_pygments",
        "author": "Jupyter Development Team",
        "author_email": "jupyter@googlegroups.com",
        "license": "BSD",
        "requires_python": ">=3.7",
        "description": "# JupyterLab Pygments Theme\n\nThis package contains a syntax coloring theme for [pygments](http://pygments.org/) making use of\nthe JupyterLab CSS variables.\n\nThe goal is to enable the use of JupyterLab's themes with pygments-generated HTML.\n\n## Screencast\n\nIn the following screencast, we demonstrate how Pygments-highlighted code can make use of the JupyterLab theme.\n\n![pygments screencast](pygments.gif)\n\n## Installation\n\n`jupyterlab_pygments` can be installed with the conda package manager\n\n```\nconda install -c conda-forge jupyterlab_pygments\n```\n\nor from pypi\n\n```\npip install jupyterlab_pygments\n```\n\n## Dependencies\n\n- `jupyterlab_pygments` requires [pygments](http://pygments.org) version `2.4.1`.\n- The CSS variables used by the theme correspond to the CodeMirror syntex coloring\n  theme defined in the NPM package [@jupyterlab/codemirror](https://www.npmjs.com/package/@jupyterlab/codemirror). Supported versions for `@jupyterlab/codemirror`'s CSS include `0.19.1`, `^1.0`, and, `^2.0`.\n\n## Limitations\n\nPygments-generated HTML and CSS classes are not granular enough to reproduce\nall of the details of codemirror (the JavaScript text editor used by JupyterLab).\n\nThis includes the ability to differentiate properties from general names.\n\n## License\n\n`jupyterlab_pygments` uses a shared copyright model that enables all contributors to maintain the\ncopyright on their contributions. All code is licensed under the terms of the revised [BSD license](LICENSE).\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/fd/f4/524d2e8f5a3727cf309c2b7df7c732038375322df1376c9e9ef3aa92fcaf/MarkupSafe-2.1.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=4b9fe39a2ccc108a4accc2676e77da025ce383c108593d65cc909add5c3bd601"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "MarkupSafe",
        "version": "2.1.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Safely add untrusted strings to HTML/XML markup.",
        "description_content_type": "text/x-rst",
        "home_page": "https://palletsprojects.com/p/markupsafe/",
        "author": "Armin Ronacher",
        "author_email": "armin.ronacher@active-4.com",
        "maintainer": "Pallets",
        "maintainer_email": "contact@palletsprojects.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
          "Topic :: Text Processing :: Markup :: HTML"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Donate, https://palletsprojects.com/donate",
          "Documentation, https://markupsafe.palletsprojects.com/",
          "Changes, https://markupsafe.palletsprojects.com/changes/",
          "Source Code, https://github.com/pallets/markupsafe/",
          "Issue Tracker, https://github.com/pallets/markupsafe/issues/",
          "Twitter, https://twitter.com/PalletsTeam",
          "Chat, https://discord.gg/pallets"
        ],
        "description": "MarkupSafe\n==========\n\nMarkupSafe implements a text object that escapes characters so it is\nsafe to use in HTML and XML. Characters that have special meanings are\nreplaced so that they display as the actual characters. This mitigates\ninjection attacks, meaning untrusted user input can safely be displayed\non a page.\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    pip install -U MarkupSafe\n\n.. _pip: https://pip.pypa.io/en/stable/getting-started/\n\n\nExamples\n--------\n\n.. code-block:: pycon\n\n    >>> from markupsafe import Markup, escape\n\n    >>> # escape replaces special characters and wraps in Markup\n    >>> escape(\"<script>alert(document.cookie);</script>\")\n    Markup('&lt;script&gt;alert(document.cookie);&lt;/script&gt;')\n\n    >>> # wrap in Markup to mark text \"safe\" and prevent escaping\n    >>> Markup(\"<strong>Hello</strong>\")\n    Markup('<strong>hello</strong>')\n\n    >>> escape(Markup(\"<strong>Hello</strong>\"))\n    Markup('<strong>hello</strong>')\n\n    >>> # Markup is a str subclass\n    >>> # methods and operators escape their arguments\n    >>> template = Markup(\"Hello <em>{name}</em>\")\n    >>> template.format(name='\"World\"')\n    Markup('Hello <em>&#34;World&#34;</em>')\n\n\nDonate\n------\n\nThe Pallets organization develops and supports MarkupSafe and other\npopular packages. In order to grow the community of contributors and\nusers, and allow the maintainers to devote more time to the projects,\n`please donate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://markupsafe.palletsprojects.com/\n-   Changes: https://markupsafe.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/MarkupSafe/\n-   Source Code: https://github.com/pallets/markupsafe/\n-   Issue Tracker: https://github.com/pallets/markupsafe/issues/\n-   Website: https://palletsprojects.com/p/markupsafe/\n-   Twitter: https://twitter.com/PalletsTeam\n-   Chat: https://discord.gg/pallets\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/3a/c7/b0a4413a4d9b7a4fda0d710fd90dba62375f0d0c4544e848dc7656757c0c/mistune-2.0.4-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=182cc5ee6f8ed1b807de6b7bb50155df7b66495412836b9a74c8fbdfc75fe36d"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "mistune",
        "version": "2.0.4",
        "platform": [
          "any"
        ],
        "summary": "A sane Markdown parser with useful plugins and renderers",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/lepture/mistune",
        "author": "Hsiaoming Yang",
        "author_email": "me@lepture.com",
        "license": "BSD 3-Clause License",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Framework :: Flask",
          "Framework :: Django",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Text Processing :: Markup"
        ],
        "description": "Mistune\n=======\n\nA fast yet powerful Python Markdown parser with renderers and plugins.\n\nUseful Links\n------------\n\n1. GitHub: https://github.com/lepture/mistune\n\nLicense\n-------\n\nMistune is licensed under BSD. Please see LICENSE for licensing details.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/a6/85/2a240df7326b7311ebd926c12d7df5394aef2f9f76ffbb294079cc43960e/nbclassic-0.4.8-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=cbf05df5842b420d5cece0143462380ea9d308ff57c2dc0eb4d6e035b18fbfb3"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "nbclassic",
        "version": "0.4.8",
        "platform": [
          "Linux",
          "Mac OS X",
          "Windows"
        ],
        "summary": "A web-based notebook environment for interactive computing",
        "description_content_type": "text/markdown",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Web"
        ],
        "home_page": "http://jupyter.org",
        "author": "Jupyter Development Team",
        "author_email": "jupyter@googlegroups.com",
        "license": "BSD",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_dist": [
          "jinja2",
          "tornado (>=6.1)",
          "pyzmq (>=17)",
          "argon2-cffi",
          "traitlets (>=4.2.1)",
          "jupyter-core (>=4.6.1)",
          "jupyter-client (>=6.1.1)",
          "ipython-genutils",
          "jupyter-server (>=1.8)",
          "nbformat",
          "notebook-shim (>=0.1.0)",
          "nbconvert (>=5)",
          "nest-asyncio (>=1.5)",
          "ipykernel",
          "Send2Trash (>=1.8.0)",
          "terminado (>=0.8.3)",
          "prometheus-client",
          "sphinx ; extra == 'docs'",
          "nbsphinx ; extra == 'docs'",
          "sphinxcontrib-github-alt ; extra == 'docs'",
          "sphinx-rtd-theme ; extra == 'docs'",
          "myst-parser ; extra == 'docs'",
          "json-logging ; extra == 'json-logging'",
          "pytest ; extra == 'test'",
          "coverage ; extra == 'test'",
          "requests ; extra == 'test'",
          "testpath ; extra == 'test'",
          "nbval ; extra == 'test'",
          "pytest-playwright ; extra == 'test'",
          "pytest-cov ; extra == 'test'",
          "pytest-tornasync ; extra == 'test'",
          "requests-unixsocket ; (sys_platform != \"win32\") and extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "docs",
          "json-logging",
          "test"
        ],
        "description": "\nThe Jupyter NbClassic is a web application that allows you to create and\nshare documents that contain live code, equations, visualizations, and\nexplanatory text. The NbClassic has support for multiple programming\nlanguages, sharing, and interactive widgets.\n\nRead `the documentation <https://jupyter-notebook.readthedocs.io>`_\nfor more information.\n    \n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/15/49/ea7a0c7e649c54883d76f5119a3e0be592d82a7df1a9b87124fa6663d9c7/nbclient-0.7.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=d97ac6257de2794f5397609df754fcbca1a603e94e924eb9b99787c031ae2e7c"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "nbclient",
        "version": "0.7.2",
        "summary": "A client library for executing notebooks. Formerly nbconvert's ExecutePreprocessor.",
        "description_content_type": "text/markdown",
        "keywords": [
          "executor",
          "jupyter",
          "notebook",
          "pipeline"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# Licensing terms\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2020-, Jupyter Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the Jupyter Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the Jupyter Development Team\n        \n        The Jupyter Development Team is the set of all contributors to the Jupyter project.\n        This includes all of the Jupyter subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        Jupyter uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to Jupyter. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the Jupyter\n        source code, in its entirety is not the copyright of any single person or\n        institution.  Instead, it is the collective copyright of the entire Jupyter\n        Development Team.  If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the Jupyter repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n            # Copyright (c) Jupyter Development Team.\n            # Distributed under the terms of the Modified BSD License.",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11"
        ],
        "requires_dist": [
          "jupyter-client>=6.1.12",
          "jupyter-core!=5.0.*,>=4.12",
          "nbformat>=5.1",
          "traitlets>=5.3",
          "pre-commit; extra == 'dev'",
          "autodoc-traits; extra == 'docs'",
          "mock; extra == 'docs'",
          "moto; extra == 'docs'",
          "myst-parser; extra == 'docs'",
          "nbclient[test]; extra == 'docs'",
          "sphinx-book-theme; extra == 'docs'",
          "sphinx>=1.7; extra == 'docs'",
          "ipykernel; extra == 'test'",
          "ipython; extra == 'test'",
          "ipywidgets; extra == 'test'",
          "nbconvert>=7.0.0; extra == 'test'",
          "pytest-asyncio; extra == 'test'",
          "pytest-cov>=4.0; extra == 'test'",
          "pytest>=7.0; extra == 'test'",
          "testpath; extra == 'test'",
          "xmltodict; extra == 'test'"
        ],
        "requires_python": ">=3.7.0",
        "project_url": [
          "Documentation, https://nbclient.readthedocs.io",
          "Funding, https://numfocus.org/",
          "Homepage, https://jupyter.org",
          "Source, https://github.com/jupyter/nbclient",
          "Tracker, https://github.com/jupyter/nbclient/issues"
        ],
        "provides_extra": [
          "dev",
          "docs",
          "test"
        ],
        "description": "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/jupyter/nbclient/main?filepath=binder%2Frun_nbclient.ipynb)\n[![Build Status](https://github.com/jupyter/nbclient/workflows/CI/badge.svg)](https://github.com/jupyter/nbclient/actions)\n[![Documentation Status](https://readthedocs.org/projects/nbclient/badge/?version=latest)](https://nbclient.readthedocs.io/en/latest/?badge=latest)\n[![image](https://codecov.io/github/jupyter/nbclient/coverage.svg?branch=main)](https://codecov.io/github/jupyter/nbclient?branch=main)\n[![Python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)\n[![Python 3.8](https://img.shields.io/badge/python-3.8-blue.svg)](https://www.python.org/downloads/release/python-380/)\n[![Python 3.9](https://img.shields.io/badge/python-3.9-blue.svg)](https://www.python.org/downloads/release/python-390/)\n[![Python 3.10](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3100/)\n[![Python 3.11](https://img.shields.io/badge/python-3.11-blue.svg)](https://www.python.org/downloads/release/python-3110/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n# nbclient\n\n**NBClient** lets you **execute** notebooks.\n\nA client library for programmatic notebook execution, **NBClient** is a tool for running Jupyter Notebooks in\ndifferent execution contexts, including the command line.\n\n## Interactive Demo\n\nTo demo **NBClient** interactively, click this Binder badge to start the demo:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/jupyter/nbclient/main?filepath=binder%2Frun_nbclient.ipynb)\n\n## Installation\n\nIn a terminal, run:\n\n```\npython3 -m pip install nbclient\n```\n\n## Documentation\n\nSee [ReadTheDocs](https://nbclient.readthedocs.io/en/latest/) for more in-depth details about the project and the\n[API Reference](https://nbclient.readthedocs.io/en/latest/reference/index.html).\n\n## Python Version Support\n\nThis library currently supports Python 3.6+ versions. As minor Python\nversions are officially sunset by the Python org, nbclient will similarly\ndrop support in the future.\n\n## Origins\n\nThis library used to be part of the [nbconvert](https://nbconvert.readthedocs.io/en/latest/) project. NBClient extracted nbconvert's `ExecutePreprocessor`into its own library for easier updating and importing by downstream libraries and applications.\n\n## Relationship to JupyterClient\n\nNBClient and JupyterClient are distinct projects.\n\n`jupyter_client` is a client library for the jupyter protocol. Specifically, `jupyter_client` provides the Python API\nfor starting, managing and communicating with Jupyter kernels.\n\nWhile, nbclient allows notebooks to be run in different execution contexts.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/1b/6b/a1216abad17b6d142ba3f766e790fbe87357875ac2c97a2cf55f892fc4e1/nbconvert-7.2.6-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f933e82fe48b9a421e4252249f6c0a9a9940dc555642b4729f3f1f526bb16779"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "nbconvert",
        "version": "7.2.6",
        "summary": "Converting Jupyter Notebooks",
        "description_content_type": "text/markdown",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Web"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# Licensing terms\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2001-2015, IPython Development Team\n        - Copyright (c) 2015-, Jupyter Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the Jupyter Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the Jupyter Development Team\n        \n        The Jupyter Development Team is the set of all contributors to the Jupyter project.\n        This includes all of the Jupyter subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        Jupyter uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to Jupyter. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the Jupyter\n        source code, in its entirety is not the copyright of any single person or\n        institution.  Instead, it is the collective copyright of the entire Jupyter\n        Development Team.  If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the Jupyter repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n            # Copyright (c) Jupyter Development Team.\n            # Distributed under the terms of the Modified BSD License.",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3"
        ],
        "requires_dist": [
          "beautifulsoup4",
          "bleach",
          "defusedxml",
          "importlib-metadata>=3.6; python_version < '3.10'",
          "jinja2>=3.0",
          "jupyter-core>=4.7",
          "jupyterlab-pygments",
          "markupsafe>=2.0",
          "mistune<3,>=2.0.3",
          "nbclient>=0.5.0",
          "nbformat>=5.1",
          "packaging",
          "pandocfilters>=1.4.1",
          "pygments>=2.4.1",
          "tinycss2",
          "traitlets>=5.0",
          "nbconvert[docs,qtpdf,serve,test,webpdf]; extra == 'all'",
          "ipykernel; extra == 'docs'",
          "ipython; extra == 'docs'",
          "myst-parser; extra == 'docs'",
          "nbsphinx>=0.2.12; extra == 'docs'",
          "pydata-sphinx-theme; extra == 'docs'",
          "sphinx==5.0.2; extra == 'docs'",
          "nbconvert[qtpng]; extra == 'qtpdf'",
          "pyqtwebengine>=5.15; extra == 'qtpng'",
          "tornado>=6.1; extra == 'serve'",
          "ipykernel; extra == 'test'",
          "ipywidgets>=7; extra == 'test'",
          "pre-commit; extra == 'test'",
          "pyppeteer<1.1,>=1; extra == 'test'",
          "pytest; extra == 'test'",
          "pytest-dependency; extra == 'test'",
          "pyppeteer<1.1,>=1; extra == 'webpdf'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://jupyter.org"
        ],
        "provides_extra": [
          "all",
          "docs",
          "qtpdf",
          "qtpng",
          "serve",
          "test",
          "webpdf"
        ],
        "description": "# nbconvert\n\n### Jupyter Notebook Conversion\n\n[![Build Status](https://travis-ci.org/jupyter/nbconvert.svg?branch=main)](https://travis-ci.org/jupyter/nbconvert)\n[![Documentation Status](https://readthedocs.org/projects/nbconvert/badge/?version=latest)](https://nbconvert.readthedocs.io/en/latest/?badge=latest)\n[![codecov.io](https://codecov.io/github/jupyter/nbconvert/coverage.svg?branch=main)](https://codecov.io/github/jupyter/nbconvert?branch=main)\n\nThe **nbconvert** tool, `jupyter nbconvert`, converts notebooks to various other\nformats via [Jinja] templates. The nbconvert tool allows you to convert an\n`.ipynb` notebook file into various static formats including:\n\n- HTML\n- LaTeX\n- PDF\n- Reveal JS\n- Markdown (md)\n- ReStructured Text (rst)\n- executable script\n\n## Usage\n\nFrom the command line, use nbconvert to convert a Jupyter notebook (_input_) to a\na different format (_output_). The basic command structure is:\n\n```\n$ jupyter nbconvert --to <output format> <input notebook>\n```\n\nwhere `<output format>` is the desired output format and `<input notebook>` is the\nfilename of the Jupyter notebook.\n\n### Example: Convert a notebook to HTML\n\nConvert Jupyter notebook file, `mynotebook.ipynb`, to HTML using:\n\n```\n$ jupyter nbconvert --to html mynotebook.ipynb\n```\n\nThis command creates an HTML output file named `mynotebook.html`.\n\n## Dev Install\n\nCheck if pandoc is installed (`pandoc --version`); if needed, install:\n\n```\nsudo apt-get install pandoc\n```\n\nOr\n\n```\nbrew install pandoc\n```\n\nInstall nbconvert for development using:\n\n```\ngit clone https://github.com/jupyter/nbconvert.git\ncd nbconvert\npip install -e .\n```\n\nRunning the tests after a dev install above:\n\n```\npip install nbconvert[test]\npy.test --pyargs nbconvert\n```\n\n## Documentation\n\n- [Documentation for Jupyter nbconvert](https://nbconvert.readthedocs.io/en/latest/)\n  \\[[PDF](https://media.readthedocs.org/pdf/nbconvert/latest/nbconvert.pdf)\\]\n- [nbconvert examples on GitHub](https://github.com/jupyter/nbconvert-examples)\n- [Documentation for Project Jupyter](https://jupyter.readthedocs.io/en/latest/index.html)\n  \\[[PDF](https://media.readthedocs.org/pdf/jupyter/latest/jupyter.pdf)\\]\n\n## Technical Support\n\n- [Issues and Bug Reports](https://github.com/jupyter/nbconvert/issues): A place to report\n  bugs or regressions found for nbconvert\n- [Community Technical Support and Discussion - Discourse](https://discourse.jupyter.org/): A place for\n  installation, configuration, and troubleshooting assistannce by the Jupyter community.\n  As a non-profit project and maintainers who are primarily volunteers, we encourage you\n  to ask questions and share your knowledge on Discourse.\n\n## Jupyter Resources\n\n- [Jupyter mailing list](https://groups.google.com/forum/#!forum/jupyter)\n- [Project Jupyter website](https://jupyter.org)\n\n[jinja]: http://jinja.pocoo.org/\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/5c/9f/957655d02f43b8bff77e6da08c94472b1229c13e7455bbd662163c9b78c0/nbformat-5.7.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=1b05ec2c552c2f1adc745f4eddce1eac8ca9ffd59bb9fd859e827eaa031319f9"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "nbformat",
        "version": "5.7.0",
        "summary": "The Jupyter Notebook format",
        "description_content_type": "text/plain",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Web"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# Licensing terms\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2001-2015, IPython Development Team\n        - Copyright (c) 2015-, Jupyter Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the Jupyter Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the Jupyter Development Team\n        \n        The Jupyter Development Team is the set of all contributors to the Jupyter project.\n        This includes all of the Jupyter subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        Jupyter uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to Jupyter. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the Jupyter\n        source code, in its entirety is not the copyright of any single person or\n        institution. Instead, it is the collective copyright of the entire Jupyter\n        Development Team. If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the Jupyter repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n            # Copyright (c) Jupyter Development Team.\n            # Distributed under the terms of the Modified BSD License.",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_dist": [
          "fastjsonschema",
          "importlib-metadata>=3.6; python_version < '3.8'",
          "jsonschema>=2.6",
          "jupyter-core",
          "traitlets>=5.1",
          "check-manifest; extra == 'test'",
          "pep440; extra == 'test'",
          "pre-commit; extra == 'test'",
          "pytest; extra == 'test'",
          "testpath; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://jupyter.org"
        ],
        "provides_extra": [
          "test"
        ],
        "description": "This package contains the base implementation of the Jupyter Notebook format,\nand Python APIs for working with notebooks."
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/db/40/2d321ba572dc9a94a090d92c9826291a1dcee1e05bc6c1d641ce419b701d/notebook-6.5.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=e04f9018ceb86e4fa841e92ea8fb214f8d23c1cedfde530cc96f92446924f0e4"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "notebook",
        "version": "6.5.2",
        "platform": [
          "Linux",
          "Mac OS X",
          "Windows"
        ],
        "summary": "A web-based notebook environment for interactive computing",
        "description_content_type": "text/markdown",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Web"
        ],
        "home_page": "http://jupyter.org",
        "author": "Jupyter Development Team",
        "author_email": "jupyter@googlegroups.com",
        "license": "BSD",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_dist": [
          "jinja2",
          "tornado (>=6.1)",
          "pyzmq (>=17)",
          "argon2-cffi",
          "traitlets (>=4.2.1)",
          "jupyter-core (>=4.6.1)",
          "jupyter-client (>=5.3.4)",
          "ipython-genutils",
          "nbformat",
          "nbconvert (>=5)",
          "nest-asyncio (>=1.5)",
          "ipykernel",
          "Send2Trash (>=1.8.0)",
          "terminado (>=0.8.3)",
          "prometheus-client",
          "nbclassic (>=0.4.7)",
          "sphinx ; extra == 'docs'",
          "nbsphinx ; extra == 'docs'",
          "sphinxcontrib-github-alt ; extra == 'docs'",
          "sphinx-rtd-theme ; extra == 'docs'",
          "myst-parser ; extra == 'docs'",
          "json-logging ; extra == 'json-logging'",
          "pytest ; extra == 'test'",
          "coverage ; extra == 'test'",
          "requests ; extra == 'test'",
          "testpath ; extra == 'test'",
          "nbval ; extra == 'test'",
          "selenium (==4.1.5) ; extra == 'test'",
          "pytest-cov ; extra == 'test'",
          "requests-unixsocket ; (sys_platform != \"win32\") and extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "docs",
          "json-logging",
          "test"
        ],
        "description": "\nThe Jupyter Notebook is a web application that allows you to create and\nshare documents that contain live code, equations, visualizations, and\nexplanatory text. The Notebook has support for multiple programming\nlanguages, sharing, and interactive widgets.\n\nRead `the documentation <https://jupyter-notebook.readthedocs.io>`_\nfor more information.\n    \n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/29/34/b3d57a23287c55fe964da403bb5457baacc2c0edc1fc3bf2739d4a958d90/notebook_shim-0.2.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=9c6c30f74c4fbea6fce55c1be58e7fd0409b1c681b075dcedceb005db5026949"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "notebook_shim",
        "version": "0.2.2",
        "summary": "A shim layer for notebook traits and config",
        "description_content_type": "text/markdown",
        "keywords": [
          "ipython",
          "jupyter"
        ],
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "BSD 3-Clause License\n        \n        Copyright (c) 2022 Project Jupyter Contributors\n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        1. Redistributions of source code must retain the above copyright notice, this\n           list of conditions and the following disclaimer.\n        \n        2. Redistributions in binary form must reproduce the above copyright notice,\n           this list of conditions and the following disclaimer in the documentation\n           and/or other materials provided with the distribution.\n        \n        3. Neither the name of the copyright holder nor the names of its\n           contributors may be used to endorse or promote products derived from\n           this software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "classifier": [
          "Framework :: Jupyter",
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_dist": [
          "jupyter-server<3,>=1.8",
          "pytest; extra == 'test'",
          "pytest-console-scripts; extra == 'test'",
          "pytest-tornasync; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "test"
        ],
        "description": "# Notebook Shim\n\nThis project provides a way for JupyterLab and other frontends to switch to [Jupyter Server](https://github.com/jupyter/jupyter_server/) for their Python Web application backend.\n\n## Basic Usage\n\nInstall from PyPI:\n\n```\npip install notebook_shim\n```\n\nThis will automatically enable the extension in Jupyter Server.\n\n## Usage\n\nThis project also includes an API for shimming traits that moved from `NotebookApp` in to `ServerApp` in Jupyter Server. This can be used by applications that subclassed `NotebookApp` to leverage the Python server backend of Jupyter Notebooks. Such extensions should *now* switch to `ExtensionApp` API in Jupyter Server and add `NotebookConfigShimMixin` in their inheritance list to properly handle moved traits.\n\nFor example, an application class that previously looked like:\n\n```python\nfrom notebook.notebookapp import NotebookApp\n\nclass MyApplication(NotebookApp):\n```\n\nshould switch to look something like:\n\n```python\nfrom jupyter_server.extension.application import ExtensionApp\nfrom notebook_shim.shim import NotebookConfigShimMixin\n\nclass MyApplication(NotebookConfigShimMixin, ExtensionApp):\n```"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/5e/a8/878258cffd53202a6cc1903c226cf09e58ae3df6b09f8ddfa98033286637/pandocfilters-1.5.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=33aae3f25fd1a026079f5d27bdd52496f0e0803b3469282162bafdcbdf6ef14f"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pandocfilters",
        "version": "1.5.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Utilities for writing pandoc filters in python",
        "keywords": [
          "pandoc"
        ],
        "home_page": "http://github.com/jgm/pandocfilters",
        "author": "John MacFarlane",
        "author_email": "fiddlosopher@gmail.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 3 - Alpha",
          "Environment :: Console",
          "Intended Audience :: End Users/Desktop",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Text Processing :: Filters",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "description": "pandocfilters\n=============\n\nA python module for writing `pandoc <http://pandoc.org/>`_ filters\n\nWhat are pandoc filters?\n--------------------------\nPandoc filters\nare pipes that read a JSON serialization of the Pandoc AST\nfrom stdin, transform it in some way, and write it to stdout.\nThey can be used with pandoc (>= 1.12) either using pipes ::\n\n    pandoc -t json -s | ./caps.py | pandoc -f json\n\nor using the ``--filter`` (or ``-F``) command-line option. ::\n\n    pandoc --filter ./caps.py -s\n\nFor more on pandoc filters, see the pandoc documentation under ``--filter``\nand `the tutorial on writing filters`__.\n\n__ http://johnmacfarlane.net/pandoc/scripting.html\n\nFor an alternative library for writing pandoc filters, with\na more \"Pythonic\" design, see `panflute`__.\n\n__ https://github.com/sergiocorreia/panflute\n\nCompatibility\n----------------\nPandoc 1.16 introduced link and image `attributes` to the existing\n`caption` and `target` arguments, requiring a change in pandocfilters\nthat breaks backwards compatibility. Consequently, you should use:\n\n- pandocfilters version <= 1.2.4 for pandoc versions 1.12--1.15, and\n- pandocfilters version >= 1.3.0 for pandoc versions >= 1.16.\n\nPandoc 1.17.3 (pandoc-types 1.17.*) introduced a new JSON format.\npandocfilters 1.4.0 should work with both the old and the new\nformat.\n\nInstalling\n--------------\nRun this inside the present directory::\n\n    python setup.py install\n\nOr install from PyPI::\n\n    pip install pandocfilters\n\nAvailable functions\n----------------------\nThe main functions ``pandocfilters`` exports are\n\n-  ``walk(x, action, format, meta)``\n\n   Walk a tree, applying an action to every object. Returns a modified\n   tree. An action is a function of the form\n   ``action(key, value, format, meta)``, where:\n\n   -  ``key`` is the type of the pandoc object (e.g. 'Str', 'Para')\n   -  ``value`` is the contents of the object (e.g. a string for 'Str', a list of\n      inline elements for 'Para')\n   -  ``format`` is the target output format (as supplied by the\n      ``format`` argument of ``walk``)\n   -  ``meta`` is the document's metadata\n\n   The return of an action is either:\n\n   -  ``None``: this means that the object should remain unchanged\n   -  a pandoc object: this will replace the original object\n   -  a list of pandoc objects: these will replace the original object;\n      the list is merged with the neighbors of the original objects\n      (spliced into the list the original object belongs to); returning\n      an empty list deletes the object\n\n-  ``toJSONFilter(action)``\n\n   Like ``toJSONFilters``, but takes a single action as argument.\n\n-  ``toJSONFilters(actions)``\n\n   Generate a JSON-to-JSON filter from stdin to stdout\n\n   The filter:\n\n   -  reads a JSON-formatted pandoc document from stdin\n   -  transforms it by walking the tree and performing the actions\n   -  returns a new JSON-formatted pandoc document to stdout\n\n   The argument ``actions`` is a list of functions of the form\n   ``action(key, value, format, meta)``, as described in more detail\n   under ``walk``.\n\n   This function calls ``applyJSONFilters``, with the ``format``\n   argument provided by the first command-line argument, if present.\n   (Pandoc sets this by default when calling filters.)\n\n-  ``applyJSONFilters(actions, source, format=\"\")``\n\n   Walk through JSON structure and apply filters\n\n   This:\n\n   -  reads a JSON-formatted pandoc document from a source string\n   -  transforms it by walking the tree and performing the actions\n   -  returns a new JSON-formatted pandoc document as a string\n\n   The ``actions`` argument is a list of functions (see ``walk`` for a\n   full description).\n\n   The argument ``source`` is a string encoded JSON object.\n\n   The argument ``format`` is a string describing the output format.\n\n   Returns a new JSON-formatted pandoc document.\n\n-  ``stringify(x)``\n\n   Walks the tree x and returns concatenated string content, leaving out\n   all formatting.\n\n-  ``attributes(attrs)``\n\n   Returns an attribute list, constructed from the dictionary attrs.\n\nHow to use\n----------\nMost users will only need ``toJSONFilter``.  Here is a simple example\nof its use::\n\n    #!/usr/bin/env python\n\n    \"\"\"\n    Pandoc filter to convert all regular text to uppercase.\n    Code, link URLs, etc. are not affected.\n    \"\"\"\n\n    from pandocfilters import toJSONFilter, Str\n\n    def caps(key, value, format, meta):\n      if key == 'Str':\n        return Str(value.upper())\n\n    if __name__ == \"__main__\":\n      toJSONFilter(caps)\n\nExamples\n--------\n\nThe examples subdirectory in the source repository contains the\nfollowing filters. These filters should provide a useful starting point\nfor developing your own pandocfilters.\n\n``abc.py``\n    Pandoc filter to process code blocks with class ``abc`` containing ABC\n    notation into images. Assumes that abcm2ps and ImageMagick's convert\n    are in the path. Images are put in the abc-images directory.\n\n``caps.py``\n    Pandoc filter to convert all regular text to uppercase. Code, link\n    URLs, etc. are not affected.\n\n``blockdiag.py``\n    Pandoc filter to process code blocks with class \"blockdiag\" into\n    generated images. Needs utils from http://blockdiag.com.\n\n``comments.py``\n    Pandoc filter that causes everything between\n    ``<!-- BEGIN COMMENT -->`` and ``<!-- END COMMENT -->`` to be ignored.\n    The comment lines must appear on lines by themselves, with blank\n    lines surrounding\n\n``deemph.py``\n    Pandoc filter that causes emphasized text to be displayed in ALL\n    CAPS.\n\n``deflists.py``\n    Pandoc filter to convert definition lists to bullet lists with the\n    defined terms in strong emphasis (for compatibility with standard\n    markdown).\n\n``gabc.py``\n    Pandoc filter to convert code blocks with class \"gabc\" to LaTeX\n    \\\\gabcsnippet commands in LaTeX output, and to images in HTML output.\n\n``graphviz.py``\n    Pandoc filter to process code blocks with class ``graphviz`` into\n    graphviz-generated images.\n\n``lilypond.py``\n    Pandoc filter to process code blocks with class \"ly\" containing\n    Lilypond notation.\n\n``metavars.py``\n    Pandoc filter to allow interpolation of metadata fields into a\n    document. ``%{fields}`` will be replaced by the field's value, assuming\n    it is of the type ``MetaInlines`` or ``MetaString``.\n\n``myemph.py``\n    Pandoc filter that causes emphasis to be rendered using the custom\n    macro ``\\myemph{...}`` rather than ``\\emph{...}`` in latex. Other output\n    formats are unaffected.\n\n``plantuml.py``\n    Pandoc filter to process code blocks with class ``plantuml`` to images.\n    Needs `plantuml.jar` from http://plantuml.com/.\n\n``ditaa.py``\n    Pandoc filter to process code blocks with class ``ditaa`` to images.\n    Needs `ditaa.jar` from http://ditaa.sourceforge.net/.\n\n``theorem.py``\n    Pandoc filter to convert divs with ``class=\"theorem\"`` to LaTeX theorem\n    environments in LaTeX output, and to numbered theorems in HTML\n    output.\n\n``tikz.py``\n    Pandoc filter to process raw latex tikz environments into images.\n    Assumes that pdflatex is in the path, and that the standalone\n    package is available. Also assumes that ImageMagick's convert is in\n    the path. Images are put in the ``tikz-images`` directory.\n\nAPI documentation\n-----------------\n\nBy default most filters use ``get_filename4code`` to\ncreate a directory ``...-images`` to save temporary\nfiles. This directory doesn't get removed as it can be used as a cache so that\nlater pandoc runs don't have to recreate files if they already exist. The\ndirectory is generated in the current directory.\n\nIf you prefer to have a clean directory after running pandoc filters, you\ncan set an environment variable ``PANDOCFILTER_CLEANUP`` to any non-empty value such as `1`\nwhich forces the code to create a temporary directory that will be removed\nby the end of execution.\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/61/e0/15ba41c6716acb033c3793be3a02f26c53914ecd9bdd6b315001f8f5f581/platformdirs-2.5.4-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=af0276409f9a02373d540bf8480021a048711d572745aef4b7842dad245eba10"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "platformdirs",
        "version": "2.5.4",
        "summary": "A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\".",
        "description_content_type": "text/x-rst",
        "keywords": [
          "application",
          "cache",
          "directory",
          "log",
          "user"
        ],
        "maintainer_email": "Bernát Gábor <gaborjbernat@gmail.com>, Julian Berman <Julian@GrayVines.com>, Ofek Lev <oss@ofek.dev>, Ronny Pfannschmidt <opensource@ronnypfannschmidt.de>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "furo>=2022.9.29; extra == 'docs'",
          "proselint>=0.13; extra == 'docs'",
          "sphinx-autodoc-typehints>=1.19.4; extra == 'docs'",
          "sphinx>=5.3; extra == 'docs'",
          "appdirs==1.4.4; extra == 'test'",
          "pytest-cov>=4; extra == 'test'",
          "pytest-mock>=3.10; extra == 'test'",
          "pytest>=7.2; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://platformdirs.readthedocs.io",
          "Homepage, https://github.com/platformdirs/platformdirs",
          "Source, https://github.com/platformdirs/platformdirs",
          "Tracker, https://github.com/platformdirs/platformdirs/issues"
        ],
        "provides_extra": [
          "docs",
          "test"
        ],
        "description": "The problem\n===========\n\n.. image:: https://github.com/platformdirs/platformdirs/workflows/Test/badge.svg\n   :target: https://github.com/platformdirs/platformdirs/actions?query=workflow%3ATest\n\nWhen writing desktop application, finding the right location to store user data\nand configuration varies per platform. Even for single-platform apps, there\nmay by plenty of nuances in figuring out the right location.\n\nFor example, if running on macOS, you should use::\n\n    ~/Library/Application Support/<AppName>\n\nIf on Windows (at least English Win XP) that should be::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\Local Settings\\<AppAuthor>\\<AppName>\n\nor possibly::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\<AppAuthor>\\<AppName>\n\nfor `roaming profiles <https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-vista/cc766489(v=ws.10)>`_ but that is another story.\n\nOn Linux (and other Unices), according to the `XDG Basedir Spec`_, it should be::\n\n    ~/.local/share/<AppName>\n\n.. _XDG Basedir Spec: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\n``platformdirs`` to the rescue\n==============================\n\nThis kind of thing is what the ``platformdirs`` package is for.\n``platformdirs`` will help you choose an appropriate:\n\n- user data dir (``user_data_dir``)\n- user config dir (``user_config_dir``)\n- user cache dir (``user_cache_dir``)\n- site data dir (``site_data_dir``)\n- site config dir (``site_config_dir``)\n- user log dir (``user_log_dir``)\n- user documents dir (``user_documents_dir``)\n- user runtime dir (``user_runtime_dir``)\n\nAnd also:\n\n- Is slightly opinionated on the directory names used. Look for \"OPINION\" in\n  documentation and code for when an opinion is being applied.\n\nExample output\n==============\n\nOn macOS:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> site_data_dir(appname, appauthor)\n    '/Library/Application Support/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/Users/trentm/Library/Logs/SuperApp'\n    >>> user_documents_dir()\n    '/Users/trentm/Documents'\n    >>> user_runtime_dir(appname, appauthor)\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp'\n\nOn Windows 7:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp'\n    >>> user_data_dir(appname, appauthor, roaming=True)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Roaming\\\\Acme\\\\SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Cache'\n    >>> user_log_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Logs'\n    >>> user_documents_dir()\n    'C:\\\\Users\\\\trentm\\\\Documents'\n    >>> user_runtime_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Temp\\\\Acme\\\\SuperApp'\n\nOn Linux:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/home/trentm/.local/share/SuperApp'\n    >>> site_data_dir(appname, appauthor)\n    '/usr/local/share/SuperApp'\n    >>> site_data_dir(appname, appauthor, multipath=True)\n    '/usr/local/share/SuperApp:/usr/share/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/home/trentm/.cache/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/home/trentm/.cache/SuperApp/log'\n    >>> user_config_dir(appname)\n    '/home/trentm/.config/SuperApp'\n    >>> user_documents_dir()\n    '/home/trentm/Documents'\n    >>> user_runtime_dir(appname, appauthor)\n    '/run/user/{os.getuid()}/SuperApp'\n    >>> site_config_dir(appname)\n    '/etc/xdg/SuperApp'\n    >>> os.environ[\"XDG_CONFIG_DIRS\"] = \"/etc:/usr/local/etc\"\n    >>> site_config_dir(appname, multipath=True)\n    '/etc/SuperApp:/usr/local/etc/SuperApp'\n\nOn Android::\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/data/data/com.myApp/files/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp/log'\n    >>> user_config_dir(appname)\n    '/data/data/com.myApp/shared_prefs/SuperApp'\n    >>> user_documents_dir()\n    '/storage/emulated/0/Documents'\n    >>> user_runtime_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp/tmp'\n\nNote: Some android apps like Termux and Pydroid are used as shells. These\napps are used by the end user to emulate Linux environment. Presence of\n``SHELL`` environment variable is used by Platformdirs to differentiate\nbetween general android apps and android apps used as shells. Shell android\napps also support ``XDG_*`` environment variables.\n\n\n``PlatformDirs`` for convenience\n================================\n\n.. code-block:: pycon\n\n    >>> from platformdirs import PlatformDirs\n    >>> dirs = PlatformDirs(\"SuperApp\", \"Acme\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp'\n    >>> dirs.user_documents_dir\n    '/Users/trentm/Documents'\n    >>> dirs.user_runtime_dir\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp'\n\nPer-version isolation\n=====================\n\nIf you have multiple versions of your app in use that you want to be\nable to run side-by-side, then you may want version-isolation for these\ndirs::\n\n    >>> from platformdirs import PlatformDirs\n    >>> dirs = PlatformDirs(\"SuperApp\", \"Acme\", version=\"1.0\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp/1.0'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp/1.0'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp/1.0'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp/1.0'\n    >>> dirs.user_documents_dir\n    '/Users/trentm/Documents'\n    >>> dirs.user_runtime_dir\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp/1.0'\n\nBe wary of using this for configuration files though; you'll need to handle\nmigrating configuration files manually.\n\nWhy this Fork?\n==============\n\nThis repository is a friendly fork of the wonderful work started by\n`ActiveState <https://github.com/ActiveState/appdirs>`_ who created\n``appdirs``, this package's ancestor.\n\nMaintaining an open source project is no easy task, particularly\nfrom within an organization, and the Python community is indebted\nto ``appdirs`` (and to Trent Mick and Jeff Rouse in particular) for\ncreating an incredibly useful simple module, as evidenced by the wide\nnumber of users it has attracted over the years.\n\nNonetheless, given the number of long-standing open issues\nand pull requests, and no clear path towards `ensuring\nthat maintenance of the package would continue or grow\n<https://github.com/ActiveState/appdirs/issues/79>`_, this fork was\ncreated.\n\nContributions are most welcome.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/2e/5e/4225463cdac1098aac718b1d8adf8f9dc3d6aaea55f4f85a2f7d572b4f7c/prometheus_client-0.15.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=db7c05cbd13a0f79975592d112320f2605a325969b270a94b71dcabc47b931d2"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "prometheus-client",
        "version": "0.15.0",
        "summary": "Python client for the Prometheus monitoring system.",
        "description_content_type": "text/markdown",
        "keywords": [
          "prometheus",
          "monitoring",
          "instrumentation",
          "client"
        ],
        "home_page": "https://github.com/prometheus/client_python",
        "author": "Brian Brazil",
        "author_email": "brian.brazil@robustperception.io",
        "license": "Apache Software License 2.0",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "Intended Audience :: Information Technology",
          "Intended Audience :: System Administrators",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: System :: Monitoring",
          "License :: OSI Approved :: Apache Software License"
        ],
        "requires_dist": [
          "twisted ; extra == 'twisted'"
        ],
        "requires_python": ">=3.6",
        "provides_extra": [
          "twisted"
        ],
        "description": "# Prometheus Python Client\n\nThe official Python client for [Prometheus](https://prometheus.io).\n\n## Three Step Demo\n\n**One**: Install the client:\n```\npip install prometheus-client\n```\n\n**Two**: Paste the following into a Python interpreter:\n```python\nfrom prometheus_client import start_http_server, Summary\nimport random\nimport time\n\n# Create a metric to track time spent and requests made.\nREQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')\n\n# Decorate function with metric.\n@REQUEST_TIME.time()\ndef process_request(t):\n    \"\"\"A dummy function that takes some time.\"\"\"\n    time.sleep(t)\n\nif __name__ == '__main__':\n    # Start up the server to expose the metrics.\n    start_http_server(8000)\n    # Generate some requests.\n    while True:\n        process_request(random.random())\n```\n\n**Three**: Visit [http://localhost:8000/](http://localhost:8000/) to view the metrics.\n\nFrom one easy to use decorator you get:\n  * `request_processing_seconds_count`: Number of times this function was called.\n  * `request_processing_seconds_sum`: Total amount of time spent in this function.\n\nPrometheus's `rate` function allows calculation of both requests per second,\nand latency over time from this data.\n\nIn addition if you're on Linux the `process` metrics expose CPU, memory and\nother information about the process for free!\n\n## Installation\n\n```\npip install prometheus-client\n```\n\nThis package can be found on\n[PyPI](https://pypi.python.org/pypi/prometheus_client).\n\n## Instrumenting\n\nFour types of metric are offered: Counter, Gauge, Summary and Histogram.\nSee the documentation on [metric types](http://prometheus.io/docs/concepts/metric_types/)\nand [instrumentation best practices](https://prometheus.io/docs/practices/instrumentation/#counter-vs-gauge-summary-vs-histogram)\non how to use them.\n\n### Counter\n\nCounters go up, and reset when the process restarts.\n\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_failures', 'Description of counter')\nc.inc()     # Increment by 1\nc.inc(1.6)  # Increment by given value\n```\n\nIf there is a suffix of `_total` on the metric name, it will be removed. When\nexposing the time series for counter, a `_total` suffix will be added. This is\nfor compatibility between OpenMetrics and the Prometheus text format, as OpenMetrics\nrequires the `_total` suffix.\n\nThere are utilities to count exceptions raised:\n\n```python\n@c.count_exceptions()\ndef f():\n  pass\n\nwith c.count_exceptions():\n  pass\n\n# Count only one type of exception\nwith c.count_exceptions(ValueError):\n  pass\n```\n\n### Gauge\n\nGauges can go up and down.\n\n```python\nfrom prometheus_client import Gauge\ng = Gauge('my_inprogress_requests', 'Description of gauge')\ng.inc()      # Increment by 1\ng.dec(10)    # Decrement by given value\ng.set(4.2)   # Set to a given value\n```\n\nThere are utilities for common use cases:\n\n```python\ng.set_to_current_time()   # Set to current unixtime\n\n# Increment when entered, decrement when exited.\n@g.track_inprogress()\ndef f():\n  pass\n\nwith g.track_inprogress():\n  pass\n```\n\nA Gauge can also take its value from a callback:\n\n```python\nd = Gauge('data_objects', 'Number of objects')\nmy_dict = {}\nd.set_function(lambda: len(my_dict))\n```\n\n### Summary\n\nSummaries track the size and number of events.\n\n```python\nfrom prometheus_client import Summary\ns = Summary('request_latency_seconds', 'Description of summary')\ns.observe(4.7)    # Observe 4.7 (seconds in this case)\n```\n\nThere are utilities for timing code:\n\n```python\n@s.time()\ndef f():\n  pass\n\nwith s.time():\n  pass\n```\n\nThe Python client doesn't store or expose quantile information at this time.\n\n### Histogram\n\nHistograms track the size and number of events in buckets.\nThis allows for aggregatable calculation of quantiles.\n\n```python\nfrom prometheus_client import Histogram\nh = Histogram('request_latency_seconds', 'Description of histogram')\nh.observe(4.7)    # Observe 4.7 (seconds in this case)\n```\n\nThe default buckets are intended to cover a typical web/rpc request from milliseconds to seconds.\nThey can be overridden by passing `buckets` keyword argument to `Histogram`.\n\nThere are utilities for timing code:\n\n```python\n@h.time()\ndef f():\n  pass\n\nwith h.time():\n  pass\n```\n\n### Info\n\nInfo tracks key-value information, usually about a whole target.\n\n```python\nfrom prometheus_client import Info\ni = Info('my_build_version', 'Description of info')\ni.info({'version': '1.2.3', 'buildhost': 'foo@bar'})\n```\n\n### Enum\n\nEnum tracks which of a set of states something is currently in.\n\n```python\nfrom prometheus_client import Enum\ne = Enum('my_task_state', 'Description of enum',\n        states=['starting', 'running', 'stopped'])\ne.state('running')\n```\n\n### Labels\n\nAll metrics can have labels, allowing grouping of related time series.\n\nSee the best practices on [naming](http://prometheus.io/docs/practices/naming/)\nand [labels](http://prometheus.io/docs/practices/instrumentation/#use-labels).\n\nTaking a counter as an example:\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels('get', '/').inc()\nc.labels('post', '/submit').inc()\n```\n\nLabels can also be passed as keyword-arguments:\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels(method='get', endpoint='/').inc()\nc.labels(method='post', endpoint='/submit').inc()\n```\n\nMetrics with labels are not initialized when declared, because the client can't\nknow what values the label can have. It is recommended to initialize the label\nvalues by calling the `.labels()` method alone:\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels('get', '/')\nc.labels('post', '/submit')\n```\n\n### Exemplars\n\nExemplars can be added to counter and histogram metrics. Exemplars can be\nspecified by passing a dict of label value pairs to be exposed as the exemplar.\nFor example with a counter:\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels('get', '/').inc(exemplar={'trace_id': 'abc123'})\nc.labels('post', '/submit').inc(1.0, {'trace_id': 'def456'})\n```\n\nAnd with a histogram:\n\n```python\nfrom prometheus_client import Histogram\nh = Histogram('request_latency_seconds', 'Description of histogram')\nh.observe(4.7, {'trace_id': 'abc123'})\n```\n\n### Disabling `_created` metrics\n\nBy default counters, histograms, and summaries export an additional series\nsuffixed with `_created` and a value of the unix timestamp for when the metric\nwas created. If this information is not helpful, it can be disabled by setting\nthe environment variable `PROMETHEUS_DISABLE_CREATED_SERIES=True`.\n\n### Process Collector\n\nThe Python client automatically exports metrics about process CPU usage, RAM,\nfile descriptors and start time. These all have the prefix `process`, and\nare only currently available on Linux.\n\nThe namespace and pid constructor arguments allows for exporting metrics about\nother processes, for example:\n```\nProcessCollector(namespace='mydaemon', pid=lambda: open('/var/run/daemon.pid').read())\n```\n\n### Platform Collector\n\nThe client also automatically exports some metadata about Python. If using Jython,\nmetadata about the JVM in use is also included. This information is available as \nlabels on the `python_info` metric. The value of the metric is 1, since it is the \nlabels that carry information.\n\n### Disabling Default Collector metrics\n\nBy default the collected `process`, `gc`, and `platform` collector metrics are exported.\nIf this information is not helpful, it can be disabled using the following:\n```python\nimport prometheus_client\n\nprometheus_client.REGISTRY.unregister(prometheus_client.GC_COLLECTOR)\nprometheus_client.REGISTRY.unregister(prometheus_client.PLATFORM_COLLECTOR)\nprometheus_client.REGISTRY.unregister(prometheus_client.PROCESS_COLLECTOR)\n```\n\n## Exporting\n\nThere are several options for exporting metrics.\n\n### HTTP\n\nMetrics are usually exposed over HTTP, to be read by the Prometheus server.\n\nThe easiest way to do this is via `start_http_server`, which will start a HTTP\nserver in a daemon thread on the given port:\n\n```python\nfrom prometheus_client import start_http_server\n\nstart_http_server(8000)\n```\n\nVisit [http://localhost:8000/](http://localhost:8000/) to view the metrics.\n\nTo add Prometheus exposition to an existing HTTP server, see the `MetricsHandler` class\nwhich provides a `BaseHTTPRequestHandler`. It also serves as a simple example of how\nto write a custom endpoint.\n\n#### Twisted\n\nTo use prometheus with [twisted](https://twistedmatrix.com/), there is `MetricsResource` which exposes metrics as a twisted resource.\n\n```python\nfrom prometheus_client.twisted import MetricsResource\nfrom twisted.web.server import Site\nfrom twisted.web.resource import Resource\nfrom twisted.internet import reactor\n\nroot = Resource()\nroot.putChild(b'metrics', MetricsResource())\n\nfactory = Site(root)\nreactor.listenTCP(8000, factory)\nreactor.run()\n```\n\n#### WSGI\n\nTo use Prometheus with [WSGI](http://wsgi.readthedocs.org/en/latest/), there is\n`make_wsgi_app` which creates a WSGI application.\n\n```python\nfrom prometheus_client import make_wsgi_app\nfrom wsgiref.simple_server import make_server\n\napp = make_wsgi_app()\nhttpd = make_server('', 8000, app)\nhttpd.serve_forever()\n```\n\nSuch an application can be useful when integrating Prometheus metrics with WSGI\napps.\n\nThe method `start_wsgi_server` can be used to serve the metrics through the\nWSGI reference implementation in a new thread.\n\n```python\nfrom prometheus_client import start_wsgi_server\n\nstart_wsgi_server(8000)\n```\n\nBy default, the WSGI application will respect `Accept-Encoding:gzip` headers used by Prometheus\nand compress the response if such a header is present. This behaviour can be disabled by passing\n`disable_compression=True` when creating the app, like this:\n\n```python\napp = make_wsgi_app(disable_compression=True)\n```\n\n#### ASGI\n\nTo use Prometheus with [ASGI](http://asgi.readthedocs.org/en/latest/), there is\n`make_asgi_app` which creates an ASGI application.\n\n```python\nfrom prometheus_client import make_asgi_app\n\napp = make_asgi_app()\n```\nSuch an application can be useful when integrating Prometheus metrics with ASGI\napps.\n\nBy default, the WSGI application will respect `Accept-Encoding:gzip` headers used by Prometheus\nand compress the response if such a header is present. This behaviour can be disabled by passing \n`disable_compression=True` when creating the app, like this:\n\n```python\napp = make_asgi_app(disable_compression=True)\n```\n\n#### Flask\n\nTo use Prometheus with [Flask](http://flask.pocoo.org/) we need to serve metrics through a Prometheus WSGI application. This can be achieved using [Flask's application dispatching](http://flask.pocoo.org/docs/latest/patterns/appdispatch/). Below is a working example.\n\nSave the snippet below in a `myapp.py` file\n\n```python\nfrom flask import Flask\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nfrom prometheus_client import make_wsgi_app\n\n# Create my app\napp = Flask(__name__)\n\n# Add prometheus wsgi middleware to route /metrics requests\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {\n    '/metrics': make_wsgi_app()\n})\n```\n\nRun the example web application like this\n\n```bash\n# Install uwsgi if you do not have it\npip install uwsgi\nuwsgi --http 127.0.0.1:8000 --wsgi-file myapp.py --callable app\n```\n\nVisit http://localhost:8000/metrics to see the metrics\n\n### Node exporter textfile collector\n\nThe [textfile collector](https://github.com/prometheus/node_exporter#textfile-collector)\nallows machine-level statistics to be exported out via the Node exporter.\n\nThis is useful for monitoring cronjobs, or for writing cronjobs to expose metrics\nabout a machine system that the Node exporter does not support or would not make sense\nto perform at every scrape (for example, anything involving subprocesses).\n\n```python\nfrom prometheus_client import CollectorRegistry, Gauge, write_to_textfile\n\nregistry = CollectorRegistry()\ng = Gauge('raid_status', '1 if raid array is okay', registry=registry)\ng.set(1)\nwrite_to_textfile('/configured/textfile/path/raid.prom', registry)\n```\n\nA separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.\n\n## Exporting to a Pushgateway\n\nThe [Pushgateway](https://github.com/prometheus/pushgateway)\nallows ephemeral and batch jobs to expose their metrics to Prometheus.\n\n```python\nfrom prometheus_client import CollectorRegistry, Gauge, push_to_gateway\n\nregistry = CollectorRegistry()\ng = Gauge('job_last_success_unixtime', 'Last time a batch job successfully finished', registry=registry)\ng.set_to_current_time()\npush_to_gateway('localhost:9091', job='batchA', registry=registry)\n```\n\nA separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.\n\nPushgateway functions take a grouping key. `push_to_gateway` replaces metrics\nwith the same grouping key, `pushadd_to_gateway` only replaces metrics with the\nsame name and grouping key and `delete_from_gateway` deletes metrics with the\ngiven job and grouping key. See the\n[Pushgateway documentation](https://github.com/prometheus/pushgateway/blob/master/README.md)\nfor more information.\n\n`instance_ip_grouping_key` returns a grouping key with the instance label set\nto the host's IP address.\n\n### Handlers for authentication\n\nIf the push gateway you are connecting to is protected with HTTP Basic Auth,\nyou can use a special handler to set the Authorization header.\n\n```python\nfrom prometheus_client import CollectorRegistry, Gauge, push_to_gateway\nfrom prometheus_client.exposition import basic_auth_handler\n\ndef my_auth_handler(url, method, timeout, headers, data):\n    username = 'foobar'\n    password = 'secret123'\n    return basic_auth_handler(url, method, timeout, headers, data, username, password)\nregistry = CollectorRegistry()\ng = Gauge('job_last_success_unixtime', 'Last time a batch job successfully finished', registry=registry)\ng.set_to_current_time()\npush_to_gateway('localhost:9091', job='batchA', registry=registry, handler=my_auth_handler)\n```\n\nTLS Auth is also supported when using the push gateway with a special handler.\n\n```python\nfrom prometheus_client import CollectorRegistry, Gauge, push_to_gateway\nfrom prometheus_client.exposition import tls_handler\n\n\ndef my_auth_handler(url, method, timeout, headers, data):\n    certfile = 'client-crt.pem'\n    keyfile = 'client-key.pem'\n    return tls_auth_handler(url, method, timeout, headers, data, certfile, keyfile)\n\nregistry = CollectorRegistry()\ng = Gauge('job_last_success_unixtime', 'Last time a batch job successfully finished', registry=registry)\ng.set_to_current_time()\npush_to_gateway('localhost:9091', job='batchA', registry=registry, handler=my_auth_handler)\n```\n\n## Bridges\n\nIt is also possible to expose metrics to systems other than Prometheus.\nThis allows you to take advantage of Prometheus instrumentation even\nif you are not quite ready to fully transition to Prometheus yet.\n\n### Graphite\n\nMetrics are pushed over TCP in the Graphite plaintext format.\n\n```python\nfrom prometheus_client.bridge.graphite import GraphiteBridge\n\ngb = GraphiteBridge(('graphite.your.org', 2003))\n# Push once.\ngb.push()\n# Push every 10 seconds in a daemon thread.\ngb.start(10.0)\n```\n\nGraphite [tags](https://grafana.com/blog/2018/01/11/graphite-1.1-teaching-an-old-dog-new-tricks/) are also supported.\n\n```python\nfrom prometheus_client.bridge.graphite import GraphiteBridge\n\ngb = GraphiteBridge(('graphite.your.org', 2003), tags=True)\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels('get', '/').inc()\ngb.push()\n```\n\n## Custom Collectors\n\nSometimes it is not possible to directly instrument code, as it is not\nin your control. This requires you to proxy metrics from other systems.\n\nTo do so you need to create a custom collector, for example:\n\n```python\nfrom prometheus_client.core import GaugeMetricFamily, CounterMetricFamily, REGISTRY\n\nclass CustomCollector(object):\n    def collect(self):\n        yield GaugeMetricFamily('my_gauge', 'Help text', value=7)\n        c = CounterMetricFamily('my_counter_total', 'Help text', labels=['foo'])\n        c.add_metric(['bar'], 1.7)\n        c.add_metric(['baz'], 3.8)\n        yield c\n\nREGISTRY.register(CustomCollector())\n```\n\n`SummaryMetricFamily`, `HistogramMetricFamily` and `InfoMetricFamily` work similarly.\n\nA collector may implement a `describe` method which returns metrics in the same\nformat as `collect` (though you don't have to include the samples). This is\nused to predetermine the names of time series a `CollectorRegistry` exposes and\nthus to detect collisions and duplicate registrations.\n\nUsually custom collectors do not have to implement `describe`. If `describe` is\nnot implemented and the CollectorRegistry was created with `auto_describe=True`\n(which is the case for the default registry) then `collect` will be called at\nregistration time instead of `describe`. If this could cause problems, either\nimplement a proper `describe`, or if that's not practical have `describe`\nreturn an empty list.\n\n\n## Multiprocess Mode (E.g. Gunicorn)\n\nPrometheus client libraries presume a threaded model, where metrics are shared\nacross workers. This doesn't work so well for languages such as Python where\nit's common to have processes rather than threads to handle large workloads.\n\nTo handle this the client library can be put in multiprocess mode.\nThis comes with a number of limitations:\n\n- Registries can not be used as normal, all instantiated metrics are exported\n  - Registering metrics to a registry later used by a `MultiProcessCollector`\n    may cause duplicate metrics to be exported\n- Custom collectors do not work (e.g. cpu and memory metrics)\n- Info and Enum metrics do not work\n- The pushgateway cannot be used\n- Gauges cannot use the `pid` label\n- Exemplars are not supported\n\nThere's several steps to getting this working:\n\n**1. Deployment**:\n\nThe `PROMETHEUS_MULTIPROC_DIR` environment variable must be set to a directory\nthat the client library can use for metrics. This directory must be wiped\nbetween process/Gunicorn runs (before startup is recommended).\n\nThis environment variable should be set from a start-up shell script,\nand not directly from Python (otherwise it may not propagate to child processes).\n\n**2. Metrics collector**:\n\nThe application must initialize a new `CollectorRegistry`, and store the\nmulti-process collector inside. It is a best practice to create this registry\ninside the context of a request to avoid metrics registering themselves to a\ncollector used by a `MultiProcessCollector`. If a registry with metrics\nregistered is used by a `MultiProcessCollector` duplicate metrics may be\nexported, one for multiprocess, and one for the process serving the request.\n\n```python\nfrom prometheus_client import multiprocess\nfrom prometheus_client import generate_latest, CollectorRegistry, CONTENT_TYPE_LATEST, Counter\n\nMY_COUNTER = Counter('my_counter', 'Description of my counter')\n\n# Expose metrics.\ndef app(environ, start_response):\n    registry = CollectorRegistry()\n    multiprocess.MultiProcessCollector(registry)\n    data = generate_latest(registry)\n    status = '200 OK'\n    response_headers = [\n        ('Content-type', CONTENT_TYPE_LATEST),\n        ('Content-Length', str(len(data)))\n    ]\n    start_response(status, response_headers)\n    return iter([data])\n```\n\n**3. Gunicorn configuration**:\n\nThe `gunicorn` configuration file needs to include the following function:\n\n```python\nfrom prometheus_client import multiprocess\n\ndef child_exit(server, worker):\n    multiprocess.mark_process_dead(worker.pid)\n```\n\n**4. Metrics tuning (Gauge)**:\n\nWhen `Gauge`s are used in multiprocess applications,\nyou must decide how to handle the metrics reported by each process.\nGauges have several modes they can run in, which can be selected with the `multiprocess_mode` parameter.\n\n- 'all': Default. Return a timeseries per process (alive or dead), labelled by the process's `pid` (the label is added internally).\n- 'min': Return a single timeseries that is the minimum of the values of all processes (alive or dead).\n- 'max': Return a single timeseries that is the maximum of the values of all processes (alive or dead).\n- 'sum': Return a single timeseries that is the sum of the values of all processes (alive or dead).\n\nPrepend 'live' to the beginning of the mode to return the same result but only considering living processes\n(e.g., 'liveall, 'livesum', 'livemax', 'livemin').\n\n```python\nfrom prometheus_client import Gauge\n\n# Example gauge\nIN_PROGRESS = Gauge(\"inprogress_requests\", \"help\", multiprocess_mode='livesum')\n```\n\n\n## Parser\n\nThe Python client supports parsing the Prometheus text format.\nThis is intended for advanced use cases where you have servers\nexposing Prometheus metrics and need to get them into some other\nsystem.\n\n```python\nfrom prometheus_client.parser import text_string_to_metric_families\nfor family in text_string_to_metric_families(u\"my_gauge 1.0\\n\"):\n  for sample in family.samples:\n    print(\"Name: {0} Labels: {1} Value: {2}\".format(*sample))\n```\n\n## Links\n\n* [Releases](https://github.com/prometheus/client_python/releases): The releases page shows the history of the project and acts as a changelog.\n* [PyPI](https://pypi.python.org/pypi/prometheus_client)\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/58/87/cac418cef18781a9081cb2075cc2cf08c77e0679c1f9b474587d71bbf777/prompt_toolkit-3.0.33-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=ced598b222f6f4029c0800cefaa6a17373fb580cd093223003475ce32805c35b"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "prompt-toolkit",
        "version": "3.0.33",
        "summary": "Library for building powerful interactive command lines in Python",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/prompt-toolkit/python-prompt-toolkit",
        "author": "Jonathan Slenders",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python",
          "Topic :: Software Development"
        ],
        "requires_dist": [
          "wcwidth"
        ],
        "requires_python": ">=3.6.2",
        "description": "Python Prompt Toolkit\n=====================\n\n|Build Status|  |AppVeyor|  |PyPI|  |RTD|  |License|  |Codecov|\n\n.. image :: https://github.com/prompt-toolkit/python-prompt-toolkit/raw/master/docs/images/logo_400px.png\n\n``prompt_toolkit`` *is a library for building powerful interactive command line applications in Python.*\n\nRead the `documentation on readthedocs\n<http://python-prompt-toolkit.readthedocs.io/en/stable/>`_.\n\nNOTICE: prompt_toolkit 3.0\n**************************\n\nPlease notice that this branch is the ``prompt_toolkit`` **3.0** branch. For most\nusers, it should be compatible with ``prompt_toolkit`` **2.0**, but it requires at\nleast **Python 3.6**. On the plus side, ``prompt_toolkit`` **3.0** is completely type\nannotated and uses asyncio natively.\n\n\nGallery\n*******\n\n`ptpython <http://github.com/prompt-toolkit/ptpython/>`_ is an interactive\nPython Shell, build on top of ``prompt_toolkit``.\n\n.. image :: https://github.com/prompt-toolkit/python-prompt-toolkit/raw/master/docs/images/ptpython.png\n\n`More examples <https://python-prompt-toolkit.readthedocs.io/en/stable/pages/gallery.html>`_\n\n\nprompt_toolkit features\n***********************\n\n``prompt_toolkit`` could be a replacement for `GNU readline\n<https://tiswww.case.edu/php/chet/readline/rltop.html>`_, but it can be much\nmore than that.\n\nSome features:\n\n- **Pure Python**.\n- Syntax highlighting of the input while typing. (For instance, with a Pygments lexer.)\n- Multi-line input editing.\n- Advanced code completion.\n- Both Emacs and Vi key bindings. (Similar to readline.)\n- Even some advanced Vi functionality, like named registers and digraphs.\n- Reverse and forward incremental search.\n- Works well with Unicode double width characters. (Chinese input.)\n- Selecting text for copy/paste. (Both Emacs and Vi style.)\n- Support for `bracketed paste <https://cirw.in/blog/bracketed-paste>`_.\n- Mouse support for cursor positioning and scrolling.\n- Auto suggestions. (Like `fish shell <http://fishshell.com/>`_.)\n- Multiple input buffers.\n- No global state.\n- Lightweight, the only dependencies are Pygments and wcwidth.\n- Runs on Linux, OS X, FreeBSD, OpenBSD and Windows systems.\n- And much more...\n\nFeel free to create tickets for bugs and feature requests, and create pull\nrequests if you have nice patches that you would like to share with others.\n\n\nInstallation\n************\n\n::\n\n    pip install prompt_toolkit\n\nFor Conda, do:\n\n::\n\n    conda install -c https://conda.anaconda.org/conda-forge prompt_toolkit\n\n\nAbout Windows support\n*********************\n\n``prompt_toolkit`` is cross platform, and everything that you build on top\nshould run fine on both Unix and Windows systems. Windows support is best on\nrecent Windows 10 builds, for which the command line window supports vt100\nescape sequences. (If not supported, we fall back to using Win32 APIs for color\nand cursor movements).\n\nIt's worth noting that the implementation is a \"best effort of what is\npossible\". Both Unix and Windows terminals have their limitations. But in\ngeneral, the Unix experience will still be a little better.\n\nFor Windows, it's recommended to use either `cmder\n<http://cmder.net/>`_ or `conemu <https://conemu.github.io/>`_.\n\nGetting started\n***************\n\nThe most simple example of the library would look like this:\n\n.. code:: python\n\n    from prompt_toolkit import prompt\n\n    if __name__ == '__main__':\n        answer = prompt('Give me some input: ')\n        print('You said: %s' % answer)\n\nFor more complex examples, have a look in the ``examples`` directory. All\nexamples are chosen to demonstrate only one thing. Also, don't be afraid to\nlook at the source code. The implementation of the ``prompt`` function could be\na good start.\n\nPhilosophy\n**********\n\nThe source code of ``prompt_toolkit`` should be **readable**, **concise** and\n**efficient**. We prefer short functions focusing each on one task and for which\nthe input and output types are clearly specified. We mostly prefer composition\nover inheritance, because inheritance can result in too much functionality in\nthe same object. We prefer immutable objects where possible (objects don't\nchange after initialization). Reusability is important. We absolutely refrain\nfrom having a changing global state, it should be possible to have multiple\nindependent instances of the same code in the same process. The architecture\nshould be layered: the lower levels operate on primitive operations and data\nstructures giving -- when correctly combined -- all the possible flexibility;\nwhile at the higher level, there should be a simpler API, ready-to-use and\nsufficient for most use cases. Thinking about algorithms and efficiency is\nimportant, but avoid premature optimization.\n\n\n`Projects using prompt_toolkit <PROJECTS.rst>`_\n***********************************************\n\nSpecial thanks to\n*****************\n\n- `Pygments <http://pygments.org/>`_: Syntax highlighter.\n- `wcwidth <https://github.com/jquast/wcwidth>`_: Determine columns needed for a wide characters.\n\n.. |Build Status| image:: https://api.travis-ci.org/prompt-toolkit/python-prompt-toolkit.svg?branch=master\n    :target: https://travis-ci.org/prompt-toolkit/python-prompt-toolkit#\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/prompt_toolkit.svg\n    :target: https://pypi.python.org/pypi/prompt-toolkit/\n    :alt: Latest Version\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/32r7s2skrgm9ubva?svg=true\n    :target: https://ci.appveyor.com/project/prompt-toolkit/python-prompt-toolkit/\n\n.. |RTD| image:: https://readthedocs.org/projects/python-prompt-toolkit/badge/\n    :target: https://python-prompt-toolkit.readthedocs.io/en/master/\n\n.. |License| image:: https://img.shields.io/github/license/prompt-toolkit/python-prompt-toolkit.svg\n    :target: https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/LICENSE\n\n.. |Codecov| image:: https://codecov.io/gh/prompt-toolkit/python-prompt-toolkit/branch/master/graphs/badge.svg?style=flat\n    :target: https://codecov.io/gh/prompt-toolkit/python-prompt-toolkit/\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/62/d5/5f610ebe421e85889f2e55e33b7f9a6795bd982198517d912eb1c76e1a53/pycparser-2.21-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pycparser",
        "version": "2.21",
        "platform": [
          "Cross Platform"
        ],
        "summary": "C parser in Python",
        "home_page": "https://github.com/eliben/pycparser",
        "author": "Eli Bendersky",
        "author_email": "eliben@gmail.com",
        "maintainer": "Eli Bendersky",
        "license": "BSD",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "description": "\npycparser is a complete parser of the C language, written in\npure Python using the PLY parsing library.\nIt parses C code into an AST and can serve as a front-end for\nC compilers or analysis tools.\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/54/d3/986fcfeaf62047840c571a857fb8f3ad1e9622081d5e7d0ee5e3451ca2e7/pyrsistent-0.19.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=ea6b79a02a28550c98b6ca9c35b9f492beaa54d7c5c9e9949555893c8a9234d0"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pyrsistent",
        "version": "0.19.2",
        "summary": "Persistent/Functional/Immutable data structures",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/tobgu/pyrsistent/",
        "author": "Tobias Gustafsson",
        "author_email": "tobias.l.gustafsson@gmail.com",
        "license": "MIT",
        "classifier": [
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: PyPy"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Changelog, https://pyrsistent.readthedocs.io/en/latest/changes.html"
        ],
        "description": "Pyrsistent\n==========\n.. image:: https://github.com/tobgu/pyrsistent/actions/workflows/tests.yaml/badge.svg\n    :target: https://github.com/tobgu/pyrsistent/actions/workflows/tests.yaml\n\n\n.. _Pyrthon: https://www.github.com/tobgu/pyrthon/\n\nPyrsistent is a number of persistent collections (by some referred to as functional data structures). Persistent in\nthe sense that they are immutable.\n\nAll methods on a data structure that would normally mutate it instead return a new copy of the structure containing the\nrequested updates. The original structure is left untouched.\n\nThis will simplify the reasoning about what a program does since no hidden side effects ever can take place to these\ndata structures. You can rest assured that the object you hold a reference to will remain the same throughout its\nlifetime and need not worry that somewhere five stack levels below you in the darkest corner of your application\nsomeone has decided to remove that element that you expected to be there.\n\nPyrsistent is influenced by persistent data structures such as those found in the standard library of Clojure. The\ndata structures are designed to share common elements through path copying.\nIt aims at taking these concepts and make them as pythonic as possible so that they can be easily integrated into any python\nprogram without hassle.\n\nIf you want use literal syntax to define them in your code rather\nthan function calls check out Pyrthon_. Be aware, that one is experimental, unmaintained and alpha software. \n\nExamples\n--------\n.. _Sequence: collections_\n.. _Hashable: collections_\n.. _Mapping: collections_\n.. _Mappings: collections_\n.. _Set: collections_\n.. _collections: https://docs.python.org/3/library/collections.abc.html\n.. _documentation: http://pyrsistent.readthedocs.org/\n\nThe collection types and key features currently implemented are:\n\n* PVector_, similar to a python list\n* PMap_, similar to dict\n* PSet_, similar to set\n* PRecord_, a PMap on steroids with fixed fields, optional type and invariant checking and much more\n* PClass_, a Python class fixed fields, optional type and invariant checking and much more\n* `Checked collections`_, PVector, PMap and PSet with optional type and invariance checks and more\n* PBag, similar to collections.Counter\n* PList, a classic singly linked list\n* PDeque, similar to collections.deque\n* Immutable object type (immutable) built on the named tuple\n* freeze_ and thaw_ functions to convert between pythons standard collections and pyrsistent collections.\n* Flexible transformations_ of arbitrarily complex structures built from PMaps and PVectors.\n\nBelow are examples of common usage patterns for some of the structures and features. More information and\nfull documentation for all data structures is available in the documentation_.\n\n.. _PVector:\n\nPVector\n~~~~~~~\nWith full support for the Sequence_ protocol PVector is meant as a drop in replacement to the built in list from a readers\npoint of view. Write operations of course differ since no in place mutation is done but naming should be in line\nwith corresponding operations on the built in list.\n\nSupport for the Hashable_ protocol also means that it can be used as key in Mappings_.\n\nAppends are amortized O(1). Random access and insert is log32(n) where n is the size of the vector.\n\n.. code:: python\n\n    >>> from pyrsistent import v, pvector\n\n    # No mutation of vectors once created, instead they\n    # are \"evolved\" leaving the original untouched\n    >>> v1 = v(1, 2, 3)\n    >>> v2 = v1.append(4)\n    >>> v3 = v2.set(1, 5)\n    >>> v1\n    pvector([1, 2, 3])\n    >>> v2\n    pvector([1, 2, 3, 4])\n    >>> v3\n    pvector([1, 5, 3, 4])\n\n    # Random access and slicing\n    >>> v3[1]\n    5\n    >>> v3[1:3]\n    pvector([5, 3])\n\n    # Iteration\n    >>> list(x + 1 for x in v3)\n    [2, 6, 4, 5]\n    >>> pvector(2 * x for x in range(3))\n    pvector([0, 2, 4])\n\n.. _PMap:\n\nPMap\n~~~~\nWith full support for the Mapping_ protocol PMap is meant as a drop in replacement to the built in dict from a readers point\nof view. Support for the Hashable_ protocol also means that it can be used as key in other Mappings_.\n\nRandom access and insert is log32(n) where n is the size of the map.\n\n.. code:: python\n\n    >>> from pyrsistent import m, pmap, v\n\n    # No mutation of maps once created, instead they are\n    # \"evolved\" leaving the original untouched\n    >>> m1 = m(a=1, b=2)\n    >>> m2 = m1.set('c', 3)\n    >>> m3 = m2.set('a', 5)\n    >>> m1\n    pmap({'a': 1, 'b': 2})\n    >>> m2\n    pmap({'a': 1, 'c': 3, 'b': 2})\n    >>> m3\n    pmap({'a': 5, 'c': 3, 'b': 2})\n    >>> m3['a']\n    5\n\n    # Evolution of nested persistent structures\n    >>> m4 = m(a=5, b=6, c=v(1, 2))\n    >>> m4.transform(('c', 1), 17)\n    pmap({'a': 5, 'c': pvector([1, 17]), 'b': 6})\n    >>> m5 = m(a=1, b=2)\n\n    # Evolve by merging with other mappings\n    >>> m5.update(m(a=2, c=3), {'a': 17, 'd': 35})\n    pmap({'a': 17, 'c': 3, 'b': 2, 'd': 35})\n    >>> pmap({'x': 1, 'y': 2}) + pmap({'y': 3, 'z': 4})\n    pmap({'y': 3, 'x': 1, 'z': 4})\n\n    # Dict-like methods to convert to list and iterate\n    >>> m3.items()\n    pvector([('a', 5), ('c', 3), ('b', 2)])\n    >>> list(m3)\n    ['a', 'c', 'b']\n\n.. _PSet:\n\nPSet\n~~~~\nWith full support for the Set_ protocol PSet is meant as a drop in replacement to the built in set from a readers point\nof view. Support for the Hashable_ protocol also means that it can be used as key in Mappings_.\n\nRandom access and insert is log32(n) where n is the size of the set.\n\n.. code:: python\n\n    >>> from pyrsistent import s\n\n    # No mutation of sets once created, you know the story...\n    >>> s1 = s(1, 2, 3, 2)\n    >>> s2 = s1.add(4)\n    >>> s3 = s1.remove(1)\n    >>> s1\n    pset([1, 2, 3])\n    >>> s2\n    pset([1, 2, 3, 4])\n    >>> s3\n    pset([2, 3])\n\n    # Full support for set operations\n    >>> s1 | s(3, 4, 5)\n    pset([1, 2, 3, 4, 5])\n    >>> s1 & s(3, 4, 5)\n    pset([3])\n    >>> s1 < s2\n    True\n    >>> s1 < s(3, 4, 5)\n    False\n\n.. _PRecord:\n\nPRecord\n~~~~~~~\nA PRecord is a PMap with a fixed set of specified fields. Records are declared as python classes inheriting\nfrom PRecord. Because it is a PMap it has full support for all Mapping methods such as iteration and element\naccess using subscript notation.\n\n.. code:: python\n\n    >>> from pyrsistent import PRecord, field\n    >>> class ARecord(PRecord):\n    ...     x = field()\n    ...\n    >>> r = ARecord(x=3)\n    >>> r\n    ARecord(x=3)\n    >>> r.x\n    3\n    >>> r.set(x=2)\n    ARecord(x=2)\n    >>> r.set(y=2)\n    Traceback (most recent call last):\n    AttributeError: 'y' is not among the specified fields for ARecord\n\nType information\n****************\nIt is possible to add type information to the record to enforce type checks. Multiple allowed types can be specified\nby providing an iterable of types.\n\n.. code:: python\n\n    >>> class BRecord(PRecord):\n    ...     x = field(type=int)\n    ...     y = field(type=(int, type(None)))\n    ...\n    >>> BRecord(x=3, y=None)\n    BRecord(y=None, x=3)\n    >>> BRecord(x=3.0)\n    Traceback (most recent call last):\n    PTypeError: Invalid type for field BRecord.x, was float\n\n\nCustom types (classes) that are iterable should be wrapped in a tuple to prevent their\nmembers being added to the set of valid types.  Although Enums in particular are now\nsupported without wrapping, see #83 for more information.\n\nMandatory fields\n****************\nFields are not mandatory by default but can be specified as such. If fields are missing an\n*InvariantException* will be thrown which contains information about the missing fields.\n\n.. code:: python\n\n    >>> from pyrsistent import InvariantException\n    >>> class CRecord(PRecord):\n    ...     x = field(mandatory=True)\n    ...\n    >>> r = CRecord(x=3)\n    >>> try:\n    ...    r.discard('x')\n    ... except InvariantException as e:\n    ...    print(e.missing_fields)\n    ...\n    ('CRecord.x',)\n\nInvariants\n**********\nIt is possible to add invariants that must hold when evolving the record. Invariants can be\nspecified on both field and record level. If invariants fail an *InvariantException* will be\nthrown which contains information about the failing invariants. An invariant function should\nreturn a tuple consisting of a boolean that tells if the invariant holds or not and an object\ndescribing the invariant. This object can later be used to identify which invariant that failed.\n\nThe global invariant function is only executed if all field invariants hold.\n\nGlobal invariants are inherited to subclasses.\n\n.. code:: python\n\n    >>> class RestrictedVector(PRecord):\n    ...     __invariant__ = lambda r: (r.y >= r.x, 'x larger than y')\n    ...     x = field(invariant=lambda x: (x > 0, 'x negative'))\n    ...     y = field(invariant=lambda y: (y > 0, 'y negative'))\n    ...\n    >>> r = RestrictedVector(y=3, x=2)\n    >>> try:\n    ...    r.set(x=-1, y=-2)\n    ... except InvariantException as e:\n    ...    print(e.invariant_errors)\n    ...\n    ('y negative', 'x negative')\n    >>> try:\n    ...    r.set(x=2, y=1)\n    ... except InvariantException as e:\n    ...    print(e.invariant_errors)\n    ...\n    ('x larger than y',)\n\nInvariants may also contain multiple assertions. For those cases the invariant function should\nreturn a tuple of invariant tuples as described above. This structure is reflected in the\ninvariant_errors attribute of the exception which will contain tuples with data from all failed\ninvariants. Eg:\n\n.. code:: python\n\n    >>> class EvenX(PRecord):\n    ...     x = field(invariant=lambda x: ((x > 0, 'x negative'), (x % 2 == 0, 'x odd')))\n    ...\n    >>> try:\n    ...    EvenX(x=-1)\n    ... except InvariantException as e:\n    ...    print(e.invariant_errors)\n    ...\n    (('x negative', 'x odd'),)\n\n\nFactories\n*********\nIt's possible to specify factory functions for fields. The factory function receives whatever\nis supplied as field value and the actual returned by the factory is assigned to the field\ngiven that any type and invariant checks hold.\nPRecords have a default factory specified as a static function on the class, create(). It takes\na *Mapping* as argument and returns an instance of the specific record.\nIf a record has fields of type PRecord the create() method of that record will\nbe called to create the \"sub record\" if no factory has explicitly been specified to override\nthis behaviour.\n\n.. code:: python\n\n    >>> class DRecord(PRecord):\n    ...     x = field(factory=int)\n    ...\n    >>> class ERecord(PRecord):\n    ...     d = field(type=DRecord)\n    ...\n    >>> ERecord.create({'d': {'x': '1'}})\n    ERecord(d=DRecord(x=1))\n\nCollection fields\n*****************\nIt is also possible to have fields with ``pyrsistent`` collections.\n\n.. code:: python\n\n   >>> from pyrsistent import pset_field, pmap_field, pvector_field\n   >>> class MultiRecord(PRecord):\n   ...     set_of_ints = pset_field(int)\n   ...     map_int_to_str = pmap_field(int, str)\n   ...     vector_of_strs = pvector_field(str)\n   ...\n\nSerialization\n*************\nPRecords support serialization back to dicts. Default serialization will take keys and values\n\"as is\" and output them into a dict. It is possible to specify custom serialization functions\nto take care of fields that require special treatment.\n\n.. code:: python\n\n    >>> from datetime import date\n    >>> class Person(PRecord):\n    ...     name = field(type=unicode)\n    ...     birth_date = field(type=date,\n    ...                        serializer=lambda format, d: d.strftime(format['date']))\n    ...\n    >>> john = Person(name=u'John', birth_date=date(1985, 10, 21))\n    >>> john.serialize({'date': '%Y-%m-%d'})\n    {'birth_date': '1985-10-21', 'name': u'John'}\n\n\n.. _instar: https://github.com/boxed/instar/\n\n.. _PClass:\n\nPClass\n~~~~~~\nA PClass is a python class with a fixed set of specified fields. PClasses are declared as python classes inheriting\nfrom PClass. It is defined the same way that PRecords are and behaves like a PRecord in all aspects except that it\nis not a PMap and hence not a collection but rather a plain Python object.\n\n.. code:: python\n\n    >>> from pyrsistent import PClass, field\n    >>> class AClass(PClass):\n    ...     x = field()\n    ...\n    >>> a = AClass(x=3)\n    >>> a\n    AClass(x=3)\n    >>> a.x\n    3\n\n\nChecked collections\n~~~~~~~~~~~~~~~~~~~\nChecked collections currently come in three flavors: CheckedPVector, CheckedPMap and CheckedPSet.\n\n.. code:: python\n\n    >>> from pyrsistent import CheckedPVector, CheckedPMap, CheckedPSet, thaw\n    >>> class Positives(CheckedPSet):\n    ...     __type__ = (long, int)\n    ...     __invariant__ = lambda n: (n >= 0, 'Negative')\n    ...\n    >>> class Lottery(PRecord):\n    ...     name = field(type=str)\n    ...     numbers = field(type=Positives, invariant=lambda p: (len(p) > 0, 'No numbers'))\n    ...\n    >>> class Lotteries(CheckedPVector):\n    ...     __type__ = Lottery\n    ...\n    >>> class LotteriesByDate(CheckedPMap):\n    ...     __key_type__ = date\n    ...     __value_type__ = Lotteries\n    ...\n    >>> lotteries = LotteriesByDate.create({date(2015, 2, 15): [{'name': 'SuperLotto', 'numbers': {1, 2, 3}},\n    ...                                                         {'name': 'MegaLotto',  'numbers': {4, 5, 6}}],\n    ...                                     date(2015, 2, 16): [{'name': 'SuperLotto', 'numbers': {3, 2, 1}},\n    ...                                                         {'name': 'MegaLotto',  'numbers': {6, 5, 4}}]})\n    >>> lotteries\n    LotteriesByDate({datetime.date(2015, 2, 15): Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperLotto'), Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')]), datetime.date(2015, 2, 16): Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperLotto'), Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')])})\n\n    # The checked versions support all operations that the corresponding\n    # unchecked types do\n    >>> lottery_0215 = lotteries[date(2015, 2, 15)]\n    >>> lottery_0215.transform([0, 'name'], 'SuperDuperLotto')\n    Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperDuperLotto'), Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')])\n\n    # But also makes asserts that types and invariants hold\n    >>> lottery_0215.transform([0, 'name'], 999)\n    Traceback (most recent call last):\n    PTypeError: Invalid type for field Lottery.name, was int\n\n    >>> lottery_0215.transform([0, 'numbers'], set())\n    Traceback (most recent call last):\n    InvariantException: Field invariant failed\n\n    # They can be converted back to python built ins with either thaw()\n    # or serialize() (which provides possibilities to customize serialization)\n    >>> thaw(lottery_0215)\n    [{'numbers': set([1, 2, 3]), 'name': 'SuperLotto'}, {'numbers': set([4, 5, 6]), 'name': 'MegaLotto'}]\n    >>> lottery_0215.serialize()\n    [{'numbers': set([1, 2, 3]), 'name': 'SuperLotto'}, {'numbers': set([4, 5, 6]), 'name': 'MegaLotto'}]\n\n.. _transformations:\n\nTransformations\n~~~~~~~~~~~~~~~\nTransformations are inspired by the cool library instar_ for Clojure. They let you evolve PMaps and PVectors\nwith arbitrarily deep/complex nesting using simple syntax and flexible matching syntax.\n\nThe first argument to transformation is the path that points out the value to transform. The\nsecond is the transformation to perform. If the transformation is callable it will be applied\nto the value(s) matching the path. The path may also contain callables. In that case they are\ntreated as matchers. If the matcher returns True for a specific key it is considered for transformation.\n\n.. code:: python\n\n    # Basic examples\n    >>> from pyrsistent import inc, freeze, thaw, rex, ny, discard\n    >>> v1 = freeze([1, 2, 3, 4, 5])\n    >>> v1.transform([2], inc)\n    pvector([1, 2, 4, 4, 5])\n    >>> v1.transform([lambda ix: 0 < ix < 4], 8)\n    pvector([1, 8, 8, 8, 5])\n    >>> v1.transform([lambda ix, v: ix == 0 or v == 5], 0)\n    pvector([0, 2, 3, 4, 0])\n\n    # The (a)ny matcher can be used to match anything\n    >>> v1.transform([ny], 8)\n    pvector([8, 8, 8, 8, 8])\n\n    # Regular expressions can be used for matching\n    >>> scores = freeze({'John': 12, 'Joseph': 34, 'Sara': 23})\n    >>> scores.transform([rex('^Jo')], 0)\n    pmap({'Joseph': 0, 'Sara': 23, 'John': 0})\n\n    # Transformations can be done on arbitrarily deep structures\n    >>> news_paper = freeze({'articles': [{'author': 'Sara', 'content': 'A short article'},\n    ...                                   {'author': 'Steve', 'content': 'A slightly longer article'}],\n    ...                      'weather': {'temperature': '11C', 'wind': '5m/s'}})\n    >>> short_news = news_paper.transform(['articles', ny, 'content'], lambda c: c[:25] + '...' if len(c) > 25 else c)\n    >>> very_short_news = news_paper.transform(['articles', ny, 'content'], lambda c: c[:15] + '...' if len(c) > 15 else c)\n    >>> very_short_news.articles[0].content\n    'A short article'\n    >>> very_short_news.articles[1].content\n    'A slightly long...'\n\n    # When nothing has been transformed the original data structure is kept\n    >>> short_news is news_paper\n    True\n    >>> very_short_news is news_paper\n    False\n    >>> very_short_news.articles[0] is news_paper.articles[0]\n    True\n\n    # There is a special transformation that can be used to discard elements. Also\n    # multiple transformations can be applied in one call\n    >>> thaw(news_paper.transform(['weather'], discard, ['articles', ny, 'content'], discard))\n    {'articles': [{'author': 'Sara'}, {'author': 'Steve'}]}\n\nEvolvers\n~~~~~~~~\nPVector, PMap and PSet all have support for a concept dubbed *evolvers*. An evolver acts like a mutable\nview of the underlying persistent data structure with \"transaction like\" semantics. No updates of the original\ndata structure is ever performed, it is still fully immutable.\n\nThe evolvers have a very limited API by design to discourage excessive, and inappropriate, usage as that would\ntake us down the mutable road. In principle only basic mutation and element access functions are supported.\nCheck out the documentation_ of each data structure for specific examples.\n\nExamples of when you may want to use an evolver instead of working directly with the data structure include:\n\n* Multiple updates are done to the same data structure and the intermediate results are of no\n  interest. In this case using an evolver may be a more efficient and easier to work with.\n* You need to pass a vector into a legacy function or a function that you have no control\n  over which performs in place mutations. In this case pass an evolver instance\n  instead and then create a new pvector from the evolver once the function returns.\n\n.. code:: python\n\n    >>> from pyrsistent import v\n\n    # In place mutation as when working with the built in counterpart\n    >>> v1 = v(1, 2, 3)\n    >>> e = v1.evolver()\n    >>> e[1] = 22\n    >>> e = e.append(4)\n    >>> e = e.extend([5, 6])\n    >>> e[5] += 1\n    >>> len(e)\n    6\n\n    # The evolver is considered *dirty* when it contains changes compared to the underlying vector\n    >>> e.is_dirty()\n    True\n\n    # But the underlying pvector still remains untouched\n    >>> v1\n    pvector([1, 2, 3])\n\n    # Once satisfied with the updates you can produce a new pvector containing the updates.\n    # The new pvector will share data with the original pvector in the same way that would have\n    # been done if only using operations on the pvector.\n    >>> v2 = e.persistent()\n    >>> v2\n    pvector([1, 22, 3, 4, 5, 7])\n\n    # The evolver is now no longer considered *dirty* as it contains no differences compared to the\n    # pvector just produced.\n    >>> e.is_dirty()\n    False\n\n    # You may continue to work with the same evolver without affecting the content of v2\n    >>> e[0] = 11\n\n    # Or create a new evolver from v2. The two evolvers can be updated independently but will both\n    # share data with v2 where possible.\n    >>> e2 = v2.evolver()\n    >>> e2[0] = 1111\n    >>> e.persistent()\n    pvector([11, 22, 3, 4, 5, 7])\n    >>> e2.persistent()\n    pvector([1111, 22, 3, 4, 5, 7])\n\n.. _freeze:\n.. _thaw:\n\nfreeze and thaw\n~~~~~~~~~~~~~~~\nThese functions are great when your cozy immutable world has to interact with the evil mutable world outside.\n\n.. code:: python\n\n    >>> from pyrsistent import freeze, thaw, v, m\n    >>> freeze([1, {'a': 3}])\n    pvector([1, pmap({'a': 3})])\n    >>> thaw(v(1, m(a=3)))\n    [1, {'a': 3}]\n\nBy default, freeze will also recursively convert values inside PVectors and PMaps. This behaviour can be changed by providing freeze with the flag strict=False.\n\n.. code:: python\n\n    >>> from pyrsistent import freeze, v, m\n    >>> freeze(v(1, v(2, [3])))\n    pvector([1, pvector([2, pvector([3])])])\n    >>> freeze(v(1, v(2, [3])), strict=False)\n    pvector([1, pvector([2, [3]])])\n    >>> freeze(m(a=m(b={'c': 1})))\n    pmap({'a': pmap({'b': pmap({'c': 1})})})\n    >>> freeze(m(a=m(b={'c': 1})), strict=False)\n    pmap({'a': pmap({'b': {'c': 1}})})\n\nIn this regard, thaw operates as the inverse of freeze so will thaw values inside native data structures unless passed the strict=False flag.\n\n\nCompatibility\n-------------\n\nPyrsistent is developed and tested on Python 3.7+ and PyPy3.\n\nPerformance\n-----------\n\nPyrsistent is developed with performance in mind. Still, while some operations are nearly on par with their built in,\nmutable, counterparts in terms of speed, other operations are slower. In the cases where attempts at\noptimizations have been done, speed has generally been valued over space.\n\nPyrsistent comes with two API compatible flavors of PVector (on which PMap and PSet are based), one pure Python\nimplementation and one implemented as a C extension. The latter generally being 2 - 20 times faster than the former.\nThe C extension will be used automatically when possible.\n\nThe pure python implementation is fully PyPy compatible. Running it under PyPy speeds operations up considerably if\nthe structures are used heavily (if JITed), for some cases the performance is almost on par with the built in counterparts.\n\nType hints\n----------\n\nPEP 561 style type hints for use with mypy and various editors are available for most types and functions in pyrsistent.\n\nType classes for annotating your own code with pyrsistent types are also available under pyrsistent.typing.\n\nInstallation\n------------\n\npip install pyrsistent\n\nDocumentation\n-------------\n\nAvailable at http://pyrsistent.readthedocs.org/\n\nBrief presentation available at http://slides.com/tobiasgustafsson/immutability-and-python/\n\nContributors\n------------\n\nTobias Gustafsson https://github.com/tobgu\n\nChristopher Armstrong https://github.com/radix\n\nAnders Hovmöller https://github.com/boxed\n\nItamar Turner-Trauring https://github.com/itamarst\n\nJonathan Lange https://github.com/jml\n\nRichard Futrell https://github.com/Futrell\n\nJakob Hollenstein https://github.com/jkbjh\n\nDavid Honour https://github.com/foolswood\n\nDavid R. MacIver https://github.com/DRMacIver\n\nMarcus Ewert https://github.com/sarum90\n\nJean-Paul Calderone https://github.com/exarkun\n\nDouglas Treadwell https://github.com/douglas-treadwell\n\nTravis Parker https://github.com/teepark\n\nJulian Berman https://github.com/Julian\n\nDennis Tomas https://github.com/dtomas\n\nNeil Vyas https://github.com/neilvyas\n\ndoozr https://github.com/doozr\n\nKamil Galuszka https://github.com/galuszkak\n\nTsuyoshi Hombashi https://github.com/thombashi\n\nnattofriends https://github.com/nattofriends\n\nagberk https://github.com/agberk\n\nWaleed Khan https://github.com/arxanas\n\nJean-Louis Fuchs https://github.com/ganwell\n\nCarlos Corbacho https://github.com/ccorbacho\n\nFelix Yan https://github.com/felixonmars\n\nbenrg https://github.com/benrg\n\nJere Lahelma https://github.com/je-l\n\nMax Taggart https://github.com/MaxTaggart\n\nVincent Philippon https://github.com/vphilippon\n\nSemen Zhydenko https://github.com/ss18\n\nTill Varoquaux  https://github.com/till-varoquaux\n\nMichal Kowalik https://github.com/michalvi\n\nossdev07 https://github.com/ossdev07\n\nKerry Olesen https://github.com/qhesz\n\njohnthagen https://github.com/johnthagen\n\nBastien Vallet https://github.com/djailla\n\nRam Rachum  https://github.com/cool-RR\n\nVincent Philippon https://github.com/vphilippon\n\nAndrey Bienkowski https://github.com/hexagonrecursion\n\nEthan McCue https://github.com/bowbahdoe\n\nJason R. Coombs https://github.com/jaraco\n\nNathan https://github.com/ndowens\n\nGeert Barentsen https://github.com/barentsen\n\nphil-arh https://github.com/phil-arh\n\nTamás Nepusz https://github.com/ntamas\n\nHugo van Kemenade https://github.com/hugovk\n\nBen Beasley https://github.com/musicinmybrain\n\nNoah C. Benson https://github.com/noahbenson\n\ndscrofts https://github.com/dscrofts\n\nAndy Reagan https://github.com/andyreagan\n\nAaron Durant https://github.com/Aaron-Durant\n\nContributing\n------------\n\nWant to contribute? That's great! If you experience problems please log them on GitHub. If you want to contribute code,\nplease fork the repository and submit a pull request.\n\nRun tests\n~~~~~~~~~\n.. _tox: https://tox.readthedocs.io/en/latest/\n\nTests can be executed using tox_.\n\nInstall tox: ``pip install tox``\n\nRun test for Python 3.8: ``tox -e py38``\n\nRelease\n~~~~~~~\n* `pip install -r requirements.txt`\n* Update CHANGES.txt\n* Update README.rst with any new contributors and potential info needed.\n* Update _pyrsistent_version.py\n* Commit and tag with new version: `git add -u . && git commit -m 'Prepare version vX.Y.Z' && git tag -a vX.Y.Z -m 'vX.Y.Z'`\n* Push commit and tags: `git push && git push --tags`\n* Build new release using Github actions\n\nProject status\n--------------\nPyrsistent can be considered stable and mature (who knows, there may even be a 1.0 some day :-)). The project is\nmaintained, bugs fixed, PRs reviewed and merged and new releases made. I currently do not have time for development\nof new features or functionality which I don't have use for myself. I'm more than happy to take PRs for new\nfunctionality though!\n\nThere are a bunch of issues marked with ``enhancement`` and ``help wanted`` that contain requests for new functionality\nthat would be nice to include. The level of difficulty and extend of the issues varies, please reach out to me if you're\ninterested in working on any of them.\n\nIf you feel that you have a grand master plan for where you would like Pyrsistent to go and have the time to put into\nit please don't hesitate to discuss this with me and submit PRs for it. If all goes well I'd be more than happy to add\nadditional maintainers to the project!\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/cd/c7/beaf6614f94fcaf02f7f2e6dd29c15a4d4da863ee13b7a791964be24e87b/python_json_logger-2.0.4-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=3b03487b14eb9e4f77e4fc2a023358b5394b82fd89cecf5586259baed57d8c6f"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "python-json-logger",
        "version": "2.0.4",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "A python library adding a json log formatter",
        "description_content_type": "text/markdown",
        "home_page": "http://github.com/madzak/python-json-logger",
        "author": "Zakaria Zajac",
        "author_email": "zak@madzak.com",
        "license": "BSD",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: System :: Logging"
        ],
        "requires_python": ">=3.5",
        "description": "![Build Status](https://github.com/madzak/python-json-logger/actions/workflows/build.yml/badge.svg)\n[![License](https://img.shields.io/pypi/l/python-json-logger.svg)](https://pypi.python.org/pypi/python-json-logger/)\n[![Version](https://img.shields.io/pypi/v/python-json-logger.svg)](https://pypi.python.org/pypi/python-json-logger/)\n\nOverview\n=======\nThis library is provided to allow standard python logging to output log data as json objects. With JSON we can make our logs more readable by machines and we can stop writing custom parsers for syslog type records.\n\nNews\n=======\nHi, I see this package is quiet alive and I am sorry for ignoring it so long. I will be stepping up my maintenance of this package so please allow me a week to get things back in order (and most likely a new minor version) and I'll post and update here once I am caught up.\n\nInstalling\n==========\nPip:\n\n    pip install python-json-logger\n\nPypi:\n\n   https://pypi.python.org/pypi/python-json-logger\n\nManual:\n\n    python setup.py install\n\nUsage\n=====\n\n## Integrating with Python's logging framework\n\nJson outputs are provided by the JsonFormatter logging formatter. You can add the custom formatter like below:\n\n**Please note: version 0.1.0 has changed the import structure, please update to the following example for proper importing**\n\n```python\n    import logging\n    from pythonjsonlogger import jsonlogger\n\n    logger = logging.getLogger()\n\n    logHandler = logging.StreamHandler()\n    formatter = jsonlogger.JsonFormatter()\n    logHandler.setFormatter(formatter)\n    logger.addHandler(logHandler)\n```\n\n## Customizing fields\n\nThe fmt parser can also be overidden if you want to have required fields that differ from the default of just `message`.\n\nThese two invocations are equivalent:\n\n```python\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def parse(self):\n        return self._fmt.split(';')\n\nformatter = CustomJsonFormatter('one;two')\n\n# is equivalent to:\n\nformatter = jsonlogger.JsonFormatter('%(one)s %(two)s')\n```\n\nYou can also add extra fields to your json output by specifying a dict in place of message, as well as by specifying an `extra={}` argument.\n\nContents of these dictionaries will be added at the root level of the entry and may override basic fields.\n\nYou can also use the `add_fields` method to add to or generally normalize the set of default set of fields, it is called for every log event. For example, to unify default fields with those provided by [structlog](http://www.structlog.org/) you could do something like this:\n\n```python\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get('timestamp'):\n            # this doesn't use record.created, so it is slightly off\n            now = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n            log_record['timestamp'] = now\n        if log_record.get('level'):\n            log_record['level'] = log_record['level'].upper()\n        else:\n            log_record['level'] = record.levelname\n\nformatter = CustomJsonFormatter('%(timestamp)s %(level)s %(name)s %(message)s')\n```\n\nItems added to the log record will be included in *every* log message, no matter what the format requires.\n\n## Adding custom object serialization\n\nFor custom handling of object serialization you can specify default json object translator or provide a custom encoder\n\n```python\ndef json_translate(obj):\n    if isinstance(obj, MyClass):\n        return {\"special\": obj.special}\n\nformatter = jsonlogger.JsonFormatter(json_default=json_translate,\n                                     json_encoder=json.JSONEncoder)\nlogHandler.setFormatter(formatter)\n\nlogger.info({\"special\": \"value\", \"run\": 12})\nlogger.info(\"classic message\", extra={\"special\": \"value\", \"run\": 12})\n```\n\n## Using a Config File\n\nTo use the module with a config file using the [`fileConfig` function](https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig), use the class `pythonjsonlogger.jsonlogger.JsonFormatter`. Here is a sample config file.\n\n```ini\n[loggers]\nkeys = root,custom\n\n[logger_root]\nhandlers =\n\n[logger_custom]\nlevel = INFO\nhandlers = custom\nqualname = custom\n\n[handlers]\nkeys = custom\n\n[handler_custom]\nclass = StreamHandler\nlevel = INFO\nformatter = json\nargs = (sys.stdout,)\n\n[formatters]\nkeys = json\n\n[formatter_json]\nformat = %(message)s\nclass = pythonjsonlogger.jsonlogger.JsonFormatter\n```\n\nExample Output\n==============\n\nSample JSON with a full formatter (basically the log message from the unit test). Every log message will appear on 1 line like a typical logger.\n\n```json\n{\n    \"threadName\": \"MainThread\",\n    \"name\": \"root\",\n    \"thread\": 140735202359648,\n    \"created\": 1336281068.506248,\n    \"process\": 41937,\n    \"processName\": \"MainProcess\",\n    \"relativeCreated\": 9.100914001464844,\n    \"module\": \"tests\",\n    \"funcName\": \"testFormatKeys\",\n    \"levelno\": 20,\n    \"msecs\": 506.24799728393555,\n    \"pathname\": \"tests/tests.py\",\n    \"lineno\": 60,\n    \"asctime\": [\"12-05-05 22:11:08,506248\"],\n    \"message\": \"testing logging format\",\n    \"filename\": \"tests.py\",\n    \"levelname\": \"INFO\",\n    \"special\": \"value\",\n    \"run\": 12\n}\n```\n\nExternal Examples\n=================\n\n- [Wesley Tanaka - Structured log files in Python using python-json-logger](https://wtanaka.com/node/8201)\n\n- [Archive](https://web.archive.org/web/20201130054012/https://wtanaka.com/node/8201)\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/d8/66/309545413162bc8271c73e622499a41cdc37217b499febe26155ff9f93ed/pytz-2022.4-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2c0784747071402c6e99f0bafdb7da0fa22645f06554c7ae06bf6358897e9c91"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pytz",
        "version": "2022.4",
        "platform": [
          "Independent"
        ],
        "summary": "World timezone definitions, modern and historical",
        "keywords": [
          "timezone",
          "tzinfo",
          "datetime",
          "olson",
          "time"
        ],
        "home_page": "http://pythonhosted.org/pytz",
        "download_url": "https://pypi.org/project/pytz/",
        "author": "Stuart Bishop",
        "author_email": "stuart@stuartbishop.net",
        "maintainer": "Stuart Bishop",
        "maintainer_email": "stuart@stuartbishop.net",
        "license": "MIT",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.4",
          "Programming Language :: Python :: 2.5",
          "Programming Language :: Python :: 2.6",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.1",
          "Programming Language :: Python :: 3.2",
          "Programming Language :: Python :: 3.3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "description": "pytz - World Timezone Definitions for Python\n============================================\n\n:Author: Stuart Bishop <stuart@stuartbishop.net>\n\nIntroduction\n~~~~~~~~~~~~\n\npytz brings the Olson tz database into Python. This library allows\naccurate and cross platform timezone calculations using Python 2.4\nor higher. It also solves the issue of ambiguous times at the end\nof daylight saving time, which you can read more about in the Python\nLibrary Reference (``datetime.tzinfo``).\n\nAlmost all of the Olson timezones are supported.\n\n.. note::\n\n    This library differs from the documented Python API for\n    tzinfo implementations; if you want to create local wallclock\n    times you need to use the ``localize()`` method documented in this\n    document. In addition, if you perform date arithmetic on local\n    times that cross DST boundaries, the result may be in an incorrect\n    timezone (ie. subtract 1 minute from 2002-10-27 1:00 EST and you get\n    2002-10-27 0:59 EST instead of the correct 2002-10-27 1:59 EDT). A\n    ``normalize()`` method is provided to correct this. Unfortunately these\n    issues cannot be resolved without modifying the Python datetime\n    implementation (see PEP-431).\n\n\nInstallation\n~~~~~~~~~~~~\n\nThis package can either be installed using ``pip`` or from a tarball using the\nstandard Python distutils.\n\nIf you are installing using ``pip``, you don't need to download anything as the\nlatest version will be downloaded for you from PyPI::\n\n    pip install pytz\n\nIf you are installing from a tarball, run the following command as an\nadministrative user::\n\n    python setup.py install\n\n\npytz for Enterprise\n~~~~~~~~~~~~~~~~~~~\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of pytz and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `Learn more. <https://tidelift.com/subscription/pkg/pypi-pytz?utm_source=pypi-pytz&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_.\n\n\nExample & Usage\n~~~~~~~~~~~~~~~\n\nLocalized times and date arithmetic\n-----------------------------------\n\n>>> from datetime import datetime, timedelta\n>>> from pytz import timezone\n>>> import pytz\n>>> utc = pytz.utc\n>>> utc.zone\n'UTC'\n>>> eastern = timezone('US/Eastern')\n>>> eastern.zone\n'US/Eastern'\n>>> amsterdam = timezone('Europe/Amsterdam')\n>>> fmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\nThis library only supports two ways of building a localized time. The\nfirst is to use the ``localize()`` method provided by the pytz library.\nThis is used to localize a naive datetime (datetime with no timezone\ninformation):\n\n>>> loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))\n>>> print(loc_dt.strftime(fmt))\n2002-10-27 06:00:00 EST-0500\n\nThe second way of building a localized time is by converting an existing\nlocalized time using the standard ``astimezone()`` method:\n\n>>> ams_dt = loc_dt.astimezone(amsterdam)\n>>> ams_dt.strftime(fmt)\n'2002-10-27 12:00:00 CET+0100'\n\nUnfortunately using the tzinfo argument of the standard datetime\nconstructors ''does not work'' with pytz for many timezones.\n\n>>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=amsterdam).strftime(fmt)  # /!\\ Does not work this way!\n'2002-10-27 12:00:00 LMT+0018'\n\nIt is safe for timezones without daylight saving transitions though, such\nas UTC:\n\n>>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=pytz.utc).strftime(fmt)  # /!\\ Not recommended except for UTC\n'2002-10-27 12:00:00 UTC+0000'\n\nThe preferred way of dealing with times is to always work in UTC,\nconverting to localtime only when generating output to be read\nby humans.\n\n>>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)\n>>> loc_dt = utc_dt.astimezone(eastern)\n>>> loc_dt.strftime(fmt)\n'2002-10-27 01:00:00 EST-0500'\n\nThis library also allows you to do date arithmetic using local\ntimes, although it is more complicated than working in UTC as you\nneed to use the ``normalize()`` method to handle daylight saving time\nand other timezone transitions. In this example, ``loc_dt`` is set\nto the instant when daylight saving time ends in the US/Eastern\ntimezone.\n\n>>> before = loc_dt - timedelta(minutes=10)\n>>> before.strftime(fmt)\n'2002-10-27 00:50:00 EST-0500'\n>>> eastern.normalize(before).strftime(fmt)\n'2002-10-27 01:50:00 EDT-0400'\n>>> after = eastern.normalize(before + timedelta(minutes=20))\n>>> after.strftime(fmt)\n'2002-10-27 01:10:00 EST-0500'\n\nCreating local times is also tricky, and the reason why working with\nlocal times is not recommended. Unfortunately, you cannot just pass\na ``tzinfo`` argument when constructing a datetime (see the next\nsection for more details)\n\n>>> dt = datetime(2002, 10, 27, 1, 30, 0)\n>>> dt1 = eastern.localize(dt, is_dst=True)\n>>> dt1.strftime(fmt)\n'2002-10-27 01:30:00 EDT-0400'\n>>> dt2 = eastern.localize(dt, is_dst=False)\n>>> dt2.strftime(fmt)\n'2002-10-27 01:30:00 EST-0500'\n\nConverting between timezones is more easily done, using the\nstandard astimezone method.\n\n>>> utc_dt = utc.localize(datetime.utcfromtimestamp(1143408899))\n>>> utc_dt.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n>>> au_tz = timezone('Australia/Sydney')\n>>> au_dt = utc_dt.astimezone(au_tz)\n>>> au_dt.strftime(fmt)\n'2006-03-27 08:34:59 AEDT+1100'\n>>> utc_dt2 = au_dt.astimezone(utc)\n>>> utc_dt2.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n>>> utc_dt == utc_dt2\nTrue\n\nYou can take shortcuts when dealing with the UTC side of timezone\nconversions. ``normalize()`` and ``localize()`` are not really\nnecessary when there are no daylight saving time transitions to\ndeal with.\n\n>>> utc_dt = datetime.utcfromtimestamp(1143408899).replace(tzinfo=utc)\n>>> utc_dt.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n>>> au_tz = timezone('Australia/Sydney')\n>>> au_dt = au_tz.normalize(utc_dt.astimezone(au_tz))\n>>> au_dt.strftime(fmt)\n'2006-03-27 08:34:59 AEDT+1100'\n>>> utc_dt2 = au_dt.astimezone(utc)\n>>> utc_dt2.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n\n\n``tzinfo`` API\n--------------\n\nThe ``tzinfo`` instances returned by the ``timezone()`` function have\nbeen extended to cope with ambiguous times by adding an ``is_dst``\nparameter to the ``utcoffset()``, ``dst()`` && ``tzname()`` methods.\n\n>>> tz = timezone('America/St_Johns')\n\n>>> normal = datetime(2009, 9, 1)\n>>> ambiguous = datetime(2009, 10, 31, 23, 30)\n\nThe ``is_dst`` parameter is ignored for most timestamps. It is only used\nduring DST transition ambiguous periods to resolve that ambiguity.\n\n>>> print(tz.utcoffset(normal, is_dst=True))\n-1 day, 21:30:00\n>>> print(tz.dst(normal, is_dst=True))\n1:00:00\n>>> tz.tzname(normal, is_dst=True)\n'NDT'\n\n>>> print(tz.utcoffset(ambiguous, is_dst=True))\n-1 day, 21:30:00\n>>> print(tz.dst(ambiguous, is_dst=True))\n1:00:00\n>>> tz.tzname(ambiguous, is_dst=True)\n'NDT'\n\n>>> print(tz.utcoffset(normal, is_dst=False))\n-1 day, 21:30:00\n>>> tz.dst(normal, is_dst=False).seconds\n3600\n>>> tz.tzname(normal, is_dst=False)\n'NDT'\n\n>>> print(tz.utcoffset(ambiguous, is_dst=False))\n-1 day, 20:30:00\n>>> tz.dst(ambiguous, is_dst=False)\ndatetime.timedelta(0)\n>>> tz.tzname(ambiguous, is_dst=False)\n'NST'\n\nIf ``is_dst`` is not specified, ambiguous timestamps will raise\nan ``pytz.exceptions.AmbiguousTimeError`` exception.\n\n>>> print(tz.utcoffset(normal))\n-1 day, 21:30:00\n>>> print(tz.dst(normal))\n1:00:00\n>>> tz.tzname(normal)\n'NDT'\n\n>>> import pytz.exceptions\n>>> try:\n...     tz.utcoffset(ambiguous)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)\npytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00\n>>> try:\n...     tz.dst(ambiguous)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)\npytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00\n>>> try:\n...     tz.tzname(ambiguous)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)\npytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00\n\n\nProblems with Localtime\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe major problem we have to deal with is that certain datetimes\nmay occur twice in a year. For example, in the US/Eastern timezone\non the last Sunday morning in October, the following sequence\nhappens:\n\n    - 01:00 EDT occurs\n    - 1 hour later, instead of 2:00am the clock is turned back 1 hour\n      and 01:00 happens again (this time 01:00 EST)\n\nIn fact, every instant between 01:00 and 02:00 occurs twice. This means\nthat if you try and create a time in the 'US/Eastern' timezone\nthe standard datetime syntax, there is no way to specify if you meant\nbefore of after the end-of-daylight-saving-time transition. Using the\npytz custom syntax, the best you can do is make an educated guess:\n\n>>> loc_dt = eastern.localize(datetime(2002, 10, 27, 1, 30, 00))\n>>> loc_dt.strftime(fmt)\n'2002-10-27 01:30:00 EST-0500'\n\nAs you can see, the system has chosen one for you and there is a 50%\nchance of it being out by one hour. For some applications, this does\nnot matter. However, if you are trying to schedule meetings with people\nin different timezones or analyze log files it is not acceptable.\n\nThe best and simplest solution is to stick with using UTC.  The pytz\npackage encourages using UTC for internal timezone representation by\nincluding a special UTC implementation based on the standard Python\nreference implementation in the Python documentation.\n\nThe UTC timezone unpickles to be the same instance, and pickles to a\nsmaller size than other pytz tzinfo instances.  The UTC implementation\ncan be obtained as pytz.utc, pytz.UTC, or pytz.timezone('UTC').\n\n>>> import pickle, pytz\n>>> dt = datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)\n>>> naive = dt.replace(tzinfo=None)\n>>> p = pickle.dumps(dt, 1)\n>>> naive_p = pickle.dumps(naive, 1)\n>>> len(p) - len(naive_p)\n17\n>>> new = pickle.loads(p)\n>>> new == dt\nTrue\n>>> new is dt\nFalse\n>>> new.tzinfo is dt.tzinfo\nTrue\n>>> pytz.utc is pytz.UTC is pytz.timezone('UTC')\nTrue\n\nNote that some other timezones are commonly thought of as the same (GMT,\nGreenwich, Universal, etc.). The definition of UTC is distinct from these\nother timezones, and they are not equivalent. For this reason, they will\nnot compare the same in Python.\n\n>>> utc == pytz.timezone('GMT')\nFalse\n\nSee the section `What is UTC`_, below.\n\nIf you insist on working with local times, this library provides a\nfacility for constructing them unambiguously:\n\n>>> loc_dt = datetime(2002, 10, 27, 1, 30, 00)\n>>> est_dt = eastern.localize(loc_dt, is_dst=True)\n>>> edt_dt = eastern.localize(loc_dt, is_dst=False)\n>>> print(est_dt.strftime(fmt) + ' / ' + edt_dt.strftime(fmt))\n2002-10-27 01:30:00 EDT-0400 / 2002-10-27 01:30:00 EST-0500\n\nIf you pass None as the is_dst flag to localize(), pytz will refuse to\nguess and raise exceptions if you try to build ambiguous or non-existent\ntimes.\n\nFor example, 1:30am on 27th Oct 2002 happened twice in the US/Eastern\ntimezone when the clocks where put back at the end of Daylight Saving\nTime:\n\n>>> dt = datetime(2002, 10, 27, 1, 30, 00)\n>>> try:\n...     eastern.localize(dt, is_dst=None)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % dt)\npytz.exceptions.AmbiguousTimeError: 2002-10-27 01:30:00\n\nSimilarly, 2:30am on 7th April 2002 never happened at all in the\nUS/Eastern timezone, as the clocks where put forward at 2:00am skipping\nthe entire hour:\n\n>>> dt = datetime(2002, 4, 7, 2, 30, 00)\n>>> try:\n...     eastern.localize(dt, is_dst=None)\n... except pytz.exceptions.NonExistentTimeError:\n...     print('pytz.exceptions.NonExistentTimeError: %s' % dt)\npytz.exceptions.NonExistentTimeError: 2002-04-07 02:30:00\n\nBoth of these exceptions share a common base class to make error handling\neasier:\n\n>>> isinstance(pytz.AmbiguousTimeError(), pytz.InvalidTimeError)\nTrue\n>>> isinstance(pytz.NonExistentTimeError(), pytz.InvalidTimeError)\nTrue\n\n\nA special case is where countries change their timezone definitions\nwith no daylight savings time switch. For example, in 1915 Warsaw\nswitched from Warsaw time to Central European time with no daylight savings\ntransition. So at the stroke of midnight on August 5th 1915 the clocks\nwere wound back 24 minutes creating an ambiguous time period that cannot\nbe specified without referring to the timezone abbreviation or the\nactual UTC offset. In this case midnight happened twice, neither time\nduring a daylight saving time period. pytz handles this transition by\ntreating the ambiguous period before the switch as daylight savings\ntime, and the ambiguous period after as standard time.\n\n\n>>> warsaw = pytz.timezone('Europe/Warsaw')\n>>> amb_dt1 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59), is_dst=True)\n>>> amb_dt1.strftime(fmt)\n'1915-08-04 23:59:59 WMT+0124'\n>>> amb_dt2 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59), is_dst=False)\n>>> amb_dt2.strftime(fmt)\n'1915-08-04 23:59:59 CET+0100'\n>>> switch_dt = warsaw.localize(datetime(1915, 8, 5, 00, 00, 00), is_dst=False)\n>>> switch_dt.strftime(fmt)\n'1915-08-05 00:00:00 CET+0100'\n>>> str(switch_dt - amb_dt1)\n'0:24:01'\n>>> str(switch_dt - amb_dt2)\n'0:00:01'\n\nThe best way of creating a time during an ambiguous time period is\nby converting from another timezone such as UTC:\n\n>>> utc_dt = datetime(1915, 8, 4, 22, 36, tzinfo=pytz.utc)\n>>> utc_dt.astimezone(warsaw).strftime(fmt)\n'1915-08-04 23:36:00 CET+0100'\n\nThe standard Python way of handling all these ambiguities is not to\nhandle them, such as demonstrated in this example using the US/Eastern\ntimezone definition from the Python documentation (Note that this\nimplementation only works for dates between 1987 and 2006 - it is\nincluded for tests only!):\n\n>>> from pytz.reference import Eastern # pytz.reference only for tests\n>>> dt = datetime(2002, 10, 27, 0, 30, tzinfo=Eastern)\n>>> str(dt)\n'2002-10-27 00:30:00-04:00'\n>>> str(dt + timedelta(hours=1))\n'2002-10-27 01:30:00-05:00'\n>>> str(dt + timedelta(hours=2))\n'2002-10-27 02:30:00-05:00'\n>>> str(dt + timedelta(hours=3))\n'2002-10-27 03:30:00-05:00'\n\nNotice the first two results? At first glance you might think they are\ncorrect, but taking the UTC offset into account you find that they are\nactually two hours appart instead of the 1 hour we asked for.\n\n>>> from pytz.reference import UTC # pytz.reference only for tests\n>>> str(dt.astimezone(UTC))\n'2002-10-27 04:30:00+00:00'\n>>> str((dt + timedelta(hours=1)).astimezone(UTC))\n'2002-10-27 06:30:00+00:00'\n\n\nCountry Information\n~~~~~~~~~~~~~~~~~~~\n\nA mechanism is provided to access the timezones commonly in use\nfor a particular country, looked up using the ISO 3166 country code.\nIt returns a list of strings that can be used to retrieve the relevant\ntzinfo instance using ``pytz.timezone()``:\n\n>>> print(' '.join(pytz.country_timezones['nz']))\nPacific/Auckland Pacific/Chatham\n\nThe Olson database comes with a ISO 3166 country code to English country\nname mapping that pytz exposes as a dictionary:\n\n>>> print(pytz.country_names['nz'])\nNew Zealand\n\n\nWhat is UTC\n~~~~~~~~~~~\n\n'UTC' is `Coordinated Universal Time`_. It is a successor to, but distinct\nfrom, Greenwich Mean Time (GMT) and the various definitions of Universal\nTime. UTC is now the worldwide standard for regulating clocks and time\nmeasurement.\n\nAll other timezones are defined relative to UTC, and include offsets like\nUTC+0800 - hours to add or subtract from UTC to derive the local time. No\ndaylight saving time occurs in UTC, making it a useful timezone to perform\ndate arithmetic without worrying about the confusion and ambiguities caused\nby daylight saving time transitions, your country changing its timezone, or\nmobile computers that roam through multiple timezones.\n\n..  _Coordinated Universal Time: https://en.wikipedia.org/wiki/Coordinated_Universal_Time\n\n\nHelpers\n~~~~~~~\n\nThere are two lists of timezones provided.\n\n``all_timezones`` is the exhaustive list of the timezone names that can\nbe used.\n\n>>> from pytz import all_timezones\n>>> len(all_timezones) >= 500\nTrue\n>>> 'Etc/Greenwich' in all_timezones\nTrue\n\n``common_timezones`` is a list of useful, current timezones. It doesn't\ncontain deprecated zones or historical zones, except for a few I've\ndeemed in common usage, such as US/Eastern (open a bug report if you\nthink other timezones are deserving of being included here). It is also\na sequence of strings.\n\n>>> from pytz import common_timezones\n>>> len(common_timezones) < len(all_timezones)\nTrue\n>>> 'Etc/Greenwich' in common_timezones\nFalse\n>>> 'Australia/Melbourne' in common_timezones\nTrue\n>>> 'US/Eastern' in common_timezones\nTrue\n>>> 'Canada/Eastern' in common_timezones\nTrue\n>>> 'Australia/Yancowinna' in all_timezones\nTrue\n>>> 'Australia/Yancowinna' in common_timezones\nFalse\n\nBoth ``common_timezones`` and ``all_timezones`` are alphabetically\nsorted:\n\n>>> common_timezones_dupe = common_timezones[:]\n>>> common_timezones_dupe.sort()\n>>> common_timezones == common_timezones_dupe\nTrue\n>>> all_timezones_dupe = all_timezones[:]\n>>> all_timezones_dupe.sort()\n>>> all_timezones == all_timezones_dupe\nTrue\n\n``all_timezones`` and ``common_timezones`` are also available as sets.\n\n>>> from pytz import all_timezones_set, common_timezones_set\n>>> 'US/Eastern' in all_timezones_set\nTrue\n>>> 'US/Eastern' in common_timezones_set\nTrue\n>>> 'Australia/Victoria' in common_timezones_set\nFalse\n\nYou can also retrieve lists of timezones used by particular countries\nusing the ``country_timezones()`` function. It requires an ISO-3166\ntwo letter country code.\n\n>>> from pytz import country_timezones\n>>> print(' '.join(country_timezones('ch')))\nEurope/Zurich\n>>> print(' '.join(country_timezones('CH')))\nEurope/Zurich\n\n\nInternationalization - i18n/l10n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPytz is an interface to the IANA database, which uses ASCII names. The `Unicode  Consortium's Unicode Locales (CLDR) <http://cldr.unicode.org>`_\nproject provides translations. Thomas Khyn's\n`l18n <https://pypi.org/project/l18n/>`_ package can be used to access\nthese translations from Python.\n\n\nLicense\n~~~~~~~\n\nMIT license.\n\nThis code is also available as part of Zope 3 under the Zope Public\nLicense,  Version 2.1 (ZPL).\n\nI'm happy to relicense this code if necessary for inclusion in other\nopen source projects.\n\n\nLatest Versions\n~~~~~~~~~~~~~~~\n\nThis package will be updated after releases of the Olson timezone\ndatabase.  The latest version can be downloaded from the `Python Package\nIndex <https://pypi.org/project/pytz/>`_.  The code that is used\nto generate this distribution is hosted on launchpad.net and available\nusing git::\n\n    git clone https://git.launchpad.net/pytz\n\nA mirror on github is also available at https://github.com/stub42/pytz\n\nAnnouncements of new releases are made on\n`Launchpad <https://launchpad.net/pytz>`_, and the\n`Atom feed <http://feeds.launchpad.net/pytz/announcements.atom>`_\nhosted there.\n\n\nBugs, Feature Requests & Patches\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBugs can be reported using `Launchpad Bugs <https://bugs.launchpad.net/pytz>`_.\n\n\nSecurity Issues\n~~~~~~~~~~~~~~~\n\nReports about security issues can be made via `Tidelift <https://tidelift.com/security>`_.\n\n\nIssues & Limitations\n~~~~~~~~~~~~~~~~~~~~\n\n- Offsets from UTC are rounded to the nearest whole minute, so timezones\n  such as Europe/Amsterdam pre 1937 will be up to 30 seconds out. This\n  is a limitation of the Python datetime library.\n\n- If you think a timezone definition is incorrect, I probably can't fix\n  it. pytz is a direct translation of the Olson timezone database, and\n  changes to the timezone definitions need to be made to this source.\n  If you find errors they should be reported to the time zone mailing\n  list, linked from http://www.iana.org/time-zones.\n\n\nFurther Reading\n~~~~~~~~~~~~~~~\n\nMore info than you want to know about timezones:\nhttps://data.iana.org/time-zones/tz-link.html\n\n\nContact\n~~~~~~~\n\nStuart Bishop <stuart@stuartbishop.net>\n\n\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/d7/42/7ad4b6d67a16229496d4f6e74201bdbebcf4bc1e87d5a70c9297d4961bd2/PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "archive_info": {
          "hash": "sha256=277a0ef2981ca40581a47093e9e2d13b3f1fbbeffae064c1d21bfceba2030287"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "PyYAML",
        "version": "6.0",
        "platform": [
          "Any"
        ],
        "summary": "YAML parser and emitter for Python",
        "home_page": "https://pyyaml.org/",
        "download_url": "https://pypi.org/project/PyYAML/",
        "author": "Kirill Simonov",
        "author_email": "xi@resolvent.net",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Cython",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Text Processing :: Markup"
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Bug Tracker, https://github.com/yaml/pyyaml/issues",
          "CI, https://github.com/yaml/pyyaml/actions",
          "Documentation, https://pyyaml.org/wiki/PyYAMLDocumentation",
          "Mailing lists, http://lists.sourceforge.net/lists/listinfo/yaml-core",
          "Source Code, https://github.com/yaml/pyyaml"
        ],
        "description": "YAML is a data serialization format designed for human readability\nand interaction with scripting languages.  PyYAML is a YAML parser\nand emitter for Python.\n\nPyYAML features a complete YAML 1.1 parser, Unicode support, pickle\nsupport, capable extension API, and sensible error messages.  PyYAML\nsupports standard YAML tags and provides Python-specific tags that\nallow to represent an arbitrary Python object.\n\nPyYAML is applicable for a broad range of tasks from complex\nconfiguration files to object serialization and persistence.\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/7b/44/4e421b96b67b2daff264473f7465db72fbdf36a07e05494f50300cc7b0c6/rfc3339_validator-0.1.4-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=24f6ec1eda14ef823da9e36ec7113124b39c04d50a4d3d3a3c2859577e7791fa"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "rfc3339-validator",
        "version": "0.1.4",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "A pure python RFC3339 validator",
        "description_content_type": "text/markdown",
        "keywords": [
          "rfc3339",
          "validator"
        ],
        "home_page": "https://github.com/naimetti/rfc3339-validator",
        "author": "Nicolas Aimetti",
        "author_email": "naimetti@yahoo.com.ar",
        "license": "MIT license",
        "classifier": [
          "Development Status :: 2 - Pre-Alpha",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8"
        ],
        "requires_dist": [
          "six"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "description": "# rfc3339-validator\n\nA pure python RFC3339 validator\n\n\n[![image](https://img.shields.io/pypi/v/rfc3339_validator.svg)](https://pypi.python.org/pypi/rfc3339_validator)\n[![Build Status](https://travis-ci.org/naimetti/rfc3339-validator.svg?branch=master)](https://travis-ci.org/naimetti/rfc3339-validator)\n\n# Install\n\n```shell script\npip install rfc3339-validator\n```\n\n# Usage\n\n```python\nfrom rfc3339_validator import validate_rfc3339\n\nvalidate_rfc3339('1424-45-93T15:32:12.9023368Z')\n>>> False\n\nvalidate_rfc3339('2001-10-23T15:32:12.9023368Z')\n>>> True\n```\n\n\n  - Free software: MIT license\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/9e/51/17023c0f8f1869d8806b979a2bffa3f861f26a3f1a66b094288323fba52f/rfc3986_validator-0.1.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2f235c432ef459970b4306369336b9d5dbdda31b510ca1e327636e01f528bfa9"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "rfc3986-validator",
        "version": "0.1.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Pure python rfc3986 validator",
        "description_content_type": "text/markdown",
        "keywords": [
          "rfc3986",
          "validator"
        ],
        "home_page": "https://github.com/naimetti/rfc3986-validator",
        "author": "Nicolas Aimetti",
        "author_email": "naimetti@yahoo.com.ar",
        "license": "MIT license",
        "classifier": [
          "Development Status :: 2 - Pre-Alpha",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "description": "# rfc3986-validator\n\nA pure python RFC3986 validator\n\n\n[![image](https://img.shields.io/pypi/v/rfc3986_validator.svg)](https://pypi.python.org/pypi/rfc3986_validator)\n[![Build Status](https://travis-ci.org/naimetti/rfc3986-validator.svg?branch=master)](https://travis-ci.org/naimetti/rfc3986-validator)\n\n# Install\n\n```shell script\npip install rfc3986-validator\n```\n\n# Usage\n\n```pycon\n>>> from rfc3986_validator import validate_rfc3986\n>>> validate_rfc3986('http://foo.bar?q=Spaces should be encoded')\nFalse\n\n>>> validate_rfc3986('http://foo.com/blah_blah_(wikipedia)')\nTrue\n```\n\nIt also support validate [URI-reference](https://tools.ietf.org/html/rfc3986#page-49) rule \n\n```pycon\n>>> validate_rfc3986('//foo.com/blah_blah', rule='URI_reference')\nTrue\n```\n\n  - Free software: MIT license\n\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/47/26/3435896d757335ea53dce5abf8d658ca80757a7a06258451b358f10232be/Send2Trash-1.8.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f20eaadfdb517eaca5ce077640cb261c7d2698385a6a0f072a4a5447fd49fa08"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "Send2Trash",
        "version": "1.8.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Send file to trash natively under Mac OS X, Windows and Linux.",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/arsenetar/send2trash",
        "author": "Andrew Senetar",
        "author_email": "arsenetar@voltaicideas.net",
        "license": "BSD License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: Desktop Environment :: File Managers"
        ],
        "requires_dist": [
          "pyobjc-framework-Cocoa ; (sys_platform == \"darwin\") and extra == 'nativelib'",
          "pywin32 ; (sys_platform == \"win32\") and extra == 'nativelib'",
          "pyobjc-framework-Cocoa ; (sys_platform == \"darwin\") and extra == 'objc'",
          "pywin32 ; (sys_platform == \"win32\") and extra == 'win32'"
        ],
        "project_url": [
          "Bug Reports, https://github.com/arsenetar/send2trash/issues"
        ],
        "provides_extra": [
          "nativelib",
          "objc",
          "win32"
        ],
        "description": "==================================================\nSend2Trash -- Send files to trash on all platforms\n==================================================\n\nSend2Trash is a small package that sends files to the Trash (or Recycle Bin) *natively* and on\n*all platforms*. On OS X, it uses native ``FSMoveObjectToTrashSync`` Cocoa calls or can use pyobjc \nwith NSFileManager. On Windows, it uses native ``IFileOperation`` call if on Vista or newer and \npywin32 is installed or falls back to ``SHFileOperation`` calls. On other platforms, if `PyGObject`_ \nand `GIO`_ are available, it will use this.  Otherwise, it will fallback to its own implementation of \nthe `trash specifications from freedesktop.org`_.\n\n``ctypes`` is used to access native libraries, so no compilation is necessary.\n\nSend2Trash supports Python 2.7 and up (Python 3 is supported).\n\nStatus: Additional Help Welcome\n-------------------------------\n\nAdditional help is welcome for supporting this package.  Specifically help with the OSX and Linux \nissues and fixes would be most appreciated.\n\nInstallation\n------------\n\nYou can download it with pip:\n\n    python -m pip install -U send2trash\n\nTo install with pywin32 or pyobjc required specify the extra `nativeLib`:\n\n    python -m pip install -U send2trash[nativeLib]\n\nor you can download the source from http://github.com/arsenetar/send2trash and install it with::\n\n    >>> python setup.py install\n\nUsage\n-----\n\n>>> from send2trash import send2trash\n>>> send2trash('some_file')\n>>> send2trash(['some_file1', 'some_file2'])\n\nOn Freedesktop platforms (Linux, BSD, etc.), you may not be able to efficiently\ntrash some files. In these cases, an exception ``send2trash.TrashPermissionError``\nis raised, so that the application can handle this case. This inherits from\n``PermissionError`` (``OSError`` on Python 2). Specifically, this affects\nfiles on a different device to the user's home directory, where the root of the\ndevice does not have a ``.Trash`` directory, and we don't have permission to\ncreate a ``.Trash-$UID`` directory.\n\nFor any other problem, ``OSError`` is raised.\n\n.. _PyGObject: https://wiki.gnome.org/PyGObject\n.. _GIO: https://developer.gnome.org/gio/\n.. _trash specifications from freedesktop.org: http://freedesktop.org/wiki/Specifications/trash-spec/\n\n\nChanges\n=======\n\nVersion 1.8.0 -- 2021/08/08\n---------------------------\n\n* Add compatibility with pathlib paths (#49)\n* Fix thread compatibility of modern windows implementation (#59)\n* Fix handling of UNC names in legacy windows implementation  (#57)\n\nVersion 1.7.1 -- 2021/06/21\n---------------------------\n\n* Release stable version with changes from last 3 releases\n* Fix handling of UNC names (#57)\n\nVersion 1.7.0a1 -- 2021/05/14\n-----------------------------\n\n* Changed conditional for when to try to use pyobjc version (#51)\n\nVersion 1.7.0a0 -- 2021/04/20\n-----------------------------\n\n* Add console_script entry point (#50)\n* Increased python CI versions (#52, #54)\n* Fix minor issue in setup.py (#53)\n* Fix issue with windows tests importing modules on non-windows (#55)\n* Unit test cleanups, rewrites, and flake8 cleanups\n* Windows: Fix legacy windows platform for multi-byte unicode and add tests\n* macOS: Add alternative pyobjc version to potentially improve compatibility (#51)\n\nVersion 1.6.0b1 -- 2020/06/18\n-----------------------------\n\n* Add main method which allows calling via ``python -m send2trash somefile``\n* Windows: Add support for using IFileOperation when pywin32 is present on Vista and newer\n* Add support for passing multiple files at once in a list\n* Windows: Batch multi-file calls to improve performance (#42)\n* Windows: Fix issue with SHFileOperation failing silently when path is not found (#33)\n\nVersion 1.5.0 -- 2018/02/16\n---------------------------\n\n* More specific error when failing to create XDG fallback trash directory (#20)\n* Windows: Workaround for long paths (#23)\n\nVersion 1.4.2 -- 2017/11/17\n---------------------------\n\n* Fix incompatibility with Python 3.6 on Windows. (#18)\n\nVersion 1.4.1 -- 2017/08/07\n---------------------------\n\n* Fix crash on Windows introduced in v1.4.0. Oops... (#14)\n\nVersion 1.4.0 -- 2017/08/07\n---------------------------\n\n* Use ``bytes`` instead of ``str`` for internal path handling in ``plat_other``. (#13)\n\nVersion 1.3.1 -- 2017/07/31\n---------------------------\n\n* Throw ``WindowsError`` instead of ``OSError`` in ``plat_win``. (#7)\n* Fix ``TypeError`` on python 2 in ``plat_other``. (#12)\n\nVersion 1.3.0 -- 2013/07/19\n---------------------------\n\n* Added support for Gnome's GIO.\n* Merged Python 3 and Python 2 versions in a single codebase.\n\nVersion 1.2.0 -- 2011/03/16\n---------------------------\n\n* Improved ``plat_other`` to follow freedesktop.org trash specification.\n\nVersion 1.1.0 -- 2010/10/18\n---------------------------\n\n* Converted compiled modules to ctypes so that cross-platform compilation isn't necessary anymore.\n\nVersion 1.0.2 -- 2010/07/10\n---------------------------\n\n* Fixed bugs with external volumes in plat_other.\n\nVersion 1.0.1 -- 2010/04/19\n---------------------------\n\n* Fixed memory leak in OS X module.\n\nVersion 1.0.0 -- 2010/04/07\n---------------------------\n\n* Initial Release\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c3/a0/5dba8ed157b0136607c7f2151db695885606968d1fae123dc3391e0cfdbf/sniffio-1.3.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sniffio",
        "version": "1.3.0",
        "summary": "Sniff out which async library your code is running under",
        "keywords": [
          "async",
          "trio",
          "asyncio"
        ],
        "home_page": "https://github.com/python-trio/sniffio",
        "author": "Nathaniel J. Smith",
        "author_email": "njs@pobox.com",
        "license": "MIT OR Apache-2.0",
        "classifier": [
          "License :: OSI Approved :: MIT License",
          "License :: OSI Approved :: Apache Software License",
          "Framework :: Trio",
          "Framework :: AsyncIO",
          "Operating System :: POSIX :: Linux",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: Microsoft :: Windows",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Intended Audience :: Developers",
          "Development Status :: 5 - Production/Stable"
        ],
        "requires_python": ">=3.7",
        "description": ".. image:: https://img.shields.io/badge/chat-join%20now-blue.svg\n   :target: https://gitter.im/python-trio/general\n   :alt: Join chatroom\n\n.. image:: https://img.shields.io/badge/docs-read%20now-blue.svg\n   :target: https://sniffio.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/v/sniffio.svg\n   :target: https://pypi.org/project/sniffio\n   :alt: Latest PyPi version\n   \n.. image:: https://img.shields.io/conda/vn/conda-forge/sniffio.svg\n   :target: https://anaconda.org/conda-forge/sniffio \n   :alt: Latest conda-forge version   \n\n.. image:: https://travis-ci.org/python-trio/sniffio.svg?branch=master\n   :target: https://travis-ci.org/python-trio/sniffio\n   :alt: Automated test status\n\n.. image:: https://codecov.io/gh/python-trio/sniffio/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/python-trio/sniffio\n   :alt: Test coverage\n\n=================================================================\nsniffio: Sniff out which async library your code is running under\n=================================================================\n\nYou're writing a library. You've decided to be ambitious, and support\nmultiple async I/O packages, like `Trio\n<https://trio.readthedocs.io>`__, and `asyncio\n<https://docs.python.org/3/library/asyncio.html>`__, and ... You've\nwritten a bunch of clever code to handle all the differences. But...\nhow do you know *which* piece of clever code to run?\n\nThis is a tiny package whose only purpose is to let you detect which\nasync library your code is running under.\n\n* Documentation: https://sniffio.readthedocs.io\n\n* Bug tracker and source code: https://github.com/python-trio/sniffio\n\n* License: MIT or Apache License 2.0, your choice\n\n* Contributor guide: https://trio.readthedocs.io/en/latest/contributing.html\n\n* Code of conduct: Contributors are requested to follow our `code of\n  conduct\n  <https://trio.readthedocs.io/en/latest/code-of-conduct.html>`_\n  in all project spaces.\n\nThis library is maintained by the Trio project, as a service to the\nasync Python community as a whole.\n\n\nQuickstart\n----------\n\n.. code-block:: python3\n\n   from sniffio import current_async_library\n   import trio\n   import asyncio\n\n   async def print_library():\n       library = current_async_library()\n       print(\"This is:\", library)\n\n   # Prints \"This is trio\"\n   trio.run(print_library)\n\n   # Prints \"This is asyncio\"\n   asyncio.run(print_library())\n\nFor more details, including how to add support to new async libraries,\n`please peruse our fine manual <https://sniffio.readthedocs.io>`__.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/16/e3/4ad79882b92617e3a4a0df1960d6bce08edfb637737ac5c3f3ba29022e25/soupsieve-2.3.2.post1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=3b2503d3c7084a42b1ebd08116e5f81aadfaea95863628c80a3b774a11b7c759"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "soupsieve",
        "version": "2.3.2.post1",
        "summary": "A modern CSS selector implementation for Beautiful Soup.",
        "description_content_type": "text/markdown",
        "keywords": [
          "CSS",
          "HTML",
          "XML",
          "filter",
          "query",
          "selector",
          "soup"
        ],
        "author_email": "Isaac Muse <Isaac.Muse@gmail.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Typing :: Typed"
        ],
        "requires_dist": [
          "backports-functools-lru-cache; python_version < '3'"
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Homepage, https://github.com/facelessuser/soupsieve"
        ],
        "description": "[![Donate via PayPal][donate-image]][donate-link]\n[![Discord][discord-image]][discord-link]\n[![Build][github-ci-image]][github-ci-link]\n[![Coverage Status][codecov-image]][codecov-link]\n[![PyPI Version][pypi-image]][pypi-link]\n[![PyPI - Python Version][python-image]][pypi-link]\n![License][license-image-mit]\n\n# Soup Sieve\n\n## Overview\n\nSoup Sieve is a CSS selector library designed to be used with [Beautiful Soup 4][bs4]. It aims to provide selecting,\nmatching, and filtering using modern CSS selectors. Soup Sieve currently provides selectors from the CSS level 1\nspecifications up through the latest CSS level 4 drafts and beyond (though some are not yet implemented).\n\nSoup Sieve was written with the intent to replace Beautiful Soup's builtin select feature, and as of Beautiful Soup\nversion 4.7.0, it now is :confetti_ball:. Soup Sieve can also be imported in order to use its API directly for\nmore controlled, specialized parsing.\n\nSoup Sieve has implemented most of the CSS selectors up through the latest CSS draft specifications, though there are a\nnumber that don't make sense in a non-browser environment. Selectors that cannot provide meaningful functionality simply\ndo not match anything. Some of the supported selectors are:\n\n- `.classes`\n- `#ids`\n- `[attributes=value]`\n- `parent child`\n- `parent > child`\n- `sibling ~ sibling`\n- `sibling + sibling`\n- `:not(element.class, element2.class)`\n- `:is(element.class, element2.class)`\n- `parent:has(> child)`\n- and [many more](https://facelessuser.github.io/soupsieve/selectors/)\n\n\n## Installation\n\nYou must have Beautiful Soup already installed:\n\n```\npip install beautifulsoup4\n```\n\nIn most cases, assuming you've installed version 4.7.0, that should be all you need to do, but if you've installed via\nsome alternative method, and Soup Sieve is not automatically installed, you can install it directly:\n\n```\npip install soupsieve\n```\n\nIf you want to manually install it from source, first ensure that [`build`](https://pypi.org/project/build/) is\ninstalled:\n\n```\npip install build\n```\n\nThen navigate to the root of the project and build the wheel and install (replacing `<ver>` with the current version):\n\n```\npython -m build -w\npip install dist/soupsive-<ver>-py3-none-any.whl\n```\n\n## Documentation\n\nDocumentation is found here: https://facelessuser.github.io/soupsieve/.\n\n## License\n\nMIT License\n\nCopyright (c) 2018 - 2022 Isaac Muse <isaacmuse@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[bs4]: https://beautiful-soup-4.readthedocs.io/en/latest/#\n\n[github-ci-image]: https://github.com/facelessuser/soupsieve/workflows/build/badge.svg?branch=master&event=push\n[github-ci-link]: https://github.com/facelessuser/soupsieve/actions?query=workflow%3Abuild+branch%3Amaster\n[discord-image]: https://img.shields.io/discord/678289859768745989?logo=discord&logoColor=aaaaaa&color=mediumpurple&labelColor=333333\n[discord-link]:https://discord.gg/XBnPUZF\n[codecov-image]: https://img.shields.io/codecov/c/github/facelessuser/soupsieve/master.svg?logo=codecov&logoColor=aaaaaa&labelColor=333333\n[codecov-link]: https://codecov.io/github/facelessuser/soupsieve\n[pypi-image]: https://img.shields.io/pypi/v/soupsieve.svg?logo=pypi&logoColor=aaaaaa&labelColor=333333\n[pypi-link]: https://pypi.python.org/pypi/soupsieve\n[python-image]: https://img.shields.io/pypi/pyversions/soupsieve?logo=python&logoColor=aaaaaa&labelColor=333333\n[license-image-mit]: https://img.shields.io/badge/license-MIT-blue.svg?labelColor=333333\n[donate-image]: https://img.shields.io/badge/Donate-PayPal-3fabd1?logo=paypal\n[donate-link]: https://www.paypal.me/facelessuser\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/e7/f1/a1f2fd4a75d371412650b3ddc16741e0de383fe701953566c9288f678a5b/stack_data-0.6.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=960cb054d6a1b2fdd9cbd529e365b3c163e8dabf1272e02cfe36b58403cff5c6"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "stack-data",
        "version": "0.6.1",
        "summary": "Extract data from python stack frames and tracebacks for informative displays",
        "description_content_type": "text/markdown",
        "home_page": "http://github.com/alexmojaki/stack_data",
        "author": "Alex Hall",
        "author_email": "alex.mojaki@gmail.com",
        "license": "MIT",
        "classifier": [
          "Intended Audience :: Developers",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Topic :: Software Development :: Debuggers"
        ],
        "requires_dist": [
          "executing (>=1.2.0)",
          "asttokens (>=2.1.0)",
          "pure-eval",
          "pytest ; extra == 'tests'",
          "typeguard ; extra == 'tests'",
          "pygments ; extra == 'tests'",
          "littleutils ; extra == 'tests'",
          "cython ; extra == 'tests'"
        ],
        "provides_extra": [
          "tests"
        ],
        "description": "# stack_data\n\n[![Tests](https://github.com/alexmojaki/stack_data/actions/workflows/pytest.yml/badge.svg)](https://github.com/alexmojaki/stack_data/actions/workflows/pytest.yml) [![Coverage Status](https://coveralls.io/repos/github/alexmojaki/stack_data/badge.svg?branch=master)](https://coveralls.io/github/alexmojaki/stack_data?branch=master) [![Supports Python versions 3.5+](https://img.shields.io/pypi/pyversions/stack_data.svg)](https://pypi.python.org/pypi/stack_data)\n\nThis is a library that extracts data from stack frames and tracebacks, particularly to display more useful tracebacks than the default. It powers the tracebacks in IPython and [futurecoder](https://futurecoder.io/):\n\n![futurecoder example](https://futurecoder.io/static/img/features/traceback.png)\n\nYou can install it from PyPI:\n\n    pip install stack_data\n    \n## Basic usage\n\nHere's some code we'd like to inspect:\n\n```python\ndef foo():\n    result = []\n    for i in range(5):\n        row = []\n        result.append(row)\n        print_stack()\n        for j in range(5):\n            row.append(i * j)\n    return result\n```\n\nNote that `foo` calls a function `print_stack()`. In reality we can imagine that an exception was raised at this line, or a debugger stopped there, but this is easy to play with directly. Here's a basic implementation:\n\n```python\nimport inspect\nimport stack_data\n\n\ndef print_stack():\n    frame = inspect.currentframe().f_back\n    frame_info = stack_data.FrameInfo(frame)\n    print(f\"{frame_info.code.co_name} at line {frame_info.lineno}\")\n    print(\"-----------\")\n    for line in frame_info.lines:\n        print(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render()}\")\n```\n\n(Beware that this has a major bug - it doesn't account for line gaps, which we'll learn about later)\n\nThe output of one call to `print_stack()` looks like:\n\n```\nfoo at line 9\n-----------\n       6 | for i in range(5):\n       7 |     row = []\n       8 |     result.append(row)\n-->    9 |     print_stack()\n      10 |     for j in range(5):\n```\n\nThe code for `print_stack()` is fairly self-explanatory. If you want to learn more details about a particular class or method I suggest looking through some docstrings. `FrameInfo` is a class that accepts either a frame or a traceback object and provides a bunch of nice attributes and properties (which are cached so you don't need to worry about performance). In particular `frame_info.lines` is a list of `Line` objects. `line.render()` returns the source code of that line suitable for display. Without any arguments it simply strips any common leading indentation. Later on we'll see a more powerful use for it.\n\nYou can see that `frame_info.lines` includes some lines of surrounding context. By default it includes 3 pieces of context before the main line and 1 piece after. We can configure the amount of context by passing options:\n\n```python\noptions = stack_data.Options(before=1, after=0)\nframe_info = stack_data.FrameInfo(frame, options)\n```\n\nThen the output looks like:\n\n```\nfoo at line 9\n-----------\n       8 | result.append(row)\n-->    9 | print_stack()\n```\n\nNote that these parameters are not the number of *lines* before and after to include, but the number of *pieces*. A piece is a range of one or more lines in a file that should logically be grouped together. A piece contains either a single simple statement or a part of a compound statement (loops, if, try/except, etc) that doesn't contain any other statements. Most pieces are a single line, but a multi-line statement or `if` condition is a single piece. In the example above, all pieces are one line, because nothing is spread across multiple lines. If we change our code to include some multiline bits:\n\n\n```python\ndef foo():\n    result = []\n    for i in range(5):\n        row = []\n        result.append(\n            row\n        )\n        print_stack()\n        for j in range(\n                5\n        ):\n            row.append(i * j)\n    return result\n```\n\nand then run the original code with the default options, then the output is:\n\n```\nfoo at line 11\n-----------\n       6 | for i in range(5):\n       7 |     row = []\n       8 |     result.append(\n       9 |         row\n      10 |     )\n-->   11 |     print_stack()\n      12 |     for j in range(\n      13 |             5\n      14 |     ):\n```\n\nNow lines 8-10 and lines 12-14 are each a single piece. Note that the output is essentially the same as the original in terms of the amount of code. The division of files into pieces means that the edge of the context is intuitive and doesn't crop out parts of statements or expressions. For example, if context was measured in lines instead of pieces, the last line of the above would be `for j in range(` which is much less useful.\n\nHowever, if a piece is very long, including all of it could be cumbersome. For this, `Options` has a parameter `max_lines_per_piece`, which is 6 by default. Suppose we have a piece in our code that's longer than that:\n\n```python\n        row = [\n            1,\n            2,\n            3,\n            4,\n            5,\n        ]\n```\n\n`frame_info.lines` will truncate this piece so that instead of 7 `Line` objects it will produce 5 `Line` objects and one `LINE_GAP` in the middle, making 6 objects in total for the piece. Our code doesn't currently handle gaps, so it will raise an exception. We can modify it like so:\n\n```python\n    for line in frame_info.lines:\n        if line is stack_data.LINE_GAP:\n            print(\"       (...)\")\n        else:\n            print(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render()}\")\n```\n\nNow the output looks like:\n\n```\nfoo at line 15\n-----------\n       6 | for i in range(5):\n       7 |     row = [\n       8 |         1,\n       9 |         2,\n       (...)\n      12 |         5,\n      13 |     ]\n      14 |     result.append(row)\n-->   15 |     print_stack()\n      16 |     for j in range(5):\n```\n\nAlternatively, you can flip the condition around and check `if isinstance(line, stack_data.Line):`. Either way, you should always check for line gaps, or your code may appear to work at first but fail when it encounters a long piece.\n\nNote that the executing piece, i.e. the piece containing the current line being executed (line 15 in this case) is never truncated, no matter how long it is.\n\nThe lines of context never stray outside `frame_info.scope`, which is the innermost function or class definition containing the current line. For example, this is the output for a short function which has neither 3 lines before nor 1 line after the current line:\n\n```\nbar at line 6\n-----------\n       4 | def bar():\n       5 |     foo()\n-->    6 |     print_stack()\n```\n\nSometimes it's nice to ensure that the function signature is always showing. This can be done with `Options(include_signature=True)`. The result looks like this:\n\n```\nfoo at line 14\n-----------\n       9 | def foo():\n       (...)\n      11 |     for i in range(5):\n      12 |         row = []\n      13 |         result.append(row)\n-->   14 |         print_stack()\n      15 |         for j in range(5):\n```\n\nTo avoid wasting space, pieces never start or end with a blank line, and blank lines between pieces are excluded. So if our code looks like this:\n\n\n```python\n    for i in range(5):\n        row = []\n\n        result.append(row)\n        print_stack()\n\n        for j in range(5):\n```\n\nThe output doesn't change much, except you can see jumps in the line numbers:\n\n```\n      11 |     for i in range(5):\n      12 |         row = []\n      14 |         result.append(row)\n-->   15 |         print_stack()\n      17 |         for j in range(5):\n```\n\n## Variables\n\nYou can also inspect variables and other expressions in a frame, e.g:\n\n```python\n    for var in frame_info.variables:\n        print(f\"{var.name} = {repr(var.value)}\")\n```\n\nwhich may output:\n\n```python\nresult = [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8], [0, 3, 6, 9, 12], []]\ni = 4\nrow = []\nj = 4\n```\n\n`frame_info.variables` returns a list of `Variable` objects, which have attributes `name`, `value`, and `nodes`, which is a list of all AST representing that expression.\n\nA `Variable` may refer to an expression other than a simple variable name. It can be any expression evaluated by the library [`pure_eval`](https://github.com/alexmojaki/pure_eval) which it deems 'interesting' (see those docs for more info). This includes expressions like `foo.bar` or `foo[bar]`. In these cases `name` is the source code of that expression. `pure_eval` ensures that it only evaluates expressions that won't have any side effects, e.g. where `foo.bar` is a normal attribute rather than a descriptor such as a property.\n\n`frame_info.variables` is a list of all the interesting expressions found in `frame_info.scope`, e.g. the current function, which may include expressions not visible in `frame_info.lines`. You can restrict the list by using `frame_info.variables_in_lines` or even `frame_info.variables_in_executing_piece`. For more control you can use `frame_info.variables_by_lineno`. See the docstrings for more information.\n\n## Rendering lines with ranges and markers\n\nSometimes you may want to insert special characters into the text for display purposes, e.g. HTML or ANSI color codes. `stack_data` provides a few tools to make this easier.\n\nLet's say we have a `Line` object where `line.text` (the original raw source code of that line) is `\"foo = bar\"`, so `line.text[6:9]` is `\"bar\"`, and we want to emphasise that part by inserting HTML at positions 6 and 9 in the text. Here's how we can do that directly:\n\n```python\nmarkers = [\n    stack_data.MarkerInLine(position=6, is_start=True, string=\"<b>\"),\n    stack_data.MarkerInLine(position=9, is_start=False, string=\"</b>\"),\n]\nline.render(markers)  # returns \"foo = <b>bar</b>\"\n```\n\nHere `is_start=True` indicates that the marker is the first of a pair. This helps `line.render()` sort and insert the markers correctly so you don't end up with malformed HTML like `foo<b>.<i></b>bar</i>` where tags overlap.\n\nSince we're inserting HTML, we should actually use `line.render(markers, escape_html=True)` which will escape special HTML characters in the Python source (but not the markers) so for example `foo = bar < spam` would be rendered as `foo = <b>bar</b> &lt; spam`.\n\nUsually though you wouldn't create markers directly yourself. Instead you would start with one or more ranges and then convert them, like so:\n\n```python\nranges = [\n    stack_data.RangeInLine(start=0, end=3, data=\"foo\"),\n    stack_data.RangeInLine(start=6, end=9, data=\"bar\"),\n]\n\ndef convert_ranges(r):\n    if r.data == \"bar\":\n        return \"<b>\", \"</b>\"        \n\n# This results in `markers` being the same as in the above example.\nmarkers = stack_data.markers_from_ranges(ranges, convert_ranges)\n```\n\n`RangeInLine` has a `data` attribute which can be any object. `markers_from_ranges` accepts a converter function to which it passes all the `RangeInLine` objects. If the converter function returns a pair of strings, it creates two markers from them. Otherwise it should return `None` to indicate that the range should be ignored, as with the first range containing `\"foo\"` in this example.\n\nThe reason this is useful is because there are built in tools to create these ranges for you. For example, if we change our `print_stack()` function to contain this:\n\n```python\ndef convert_variable_ranges(r):\n    variable, _node = r.data\n    return f'<span data-value=\"{repr(variable.value)}\">', '</span>'\n\nmarkers = stack_data.markers_from_ranges(line.variable_ranges, convert_variable_ranges)\nprint(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render(markers, escape_html=True)}\")\n```\n\nThen the output becomes:\n\n```\nfoo at line 15\n-----------\n       9 | def foo():\n       (...)\n      11 |     for <span data-value=\"4\">i</span> in range(5):\n      12 |         <span data-value=\"[]\">row</span> = []\n      14 |         <span data-value=\"[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8], [0, 3, 6, 9, 12], []]\">result</span>.append(<span data-value=\"[]\">row</span>)\n-->   15 |         print_stack()\n      17 |         for <span data-value=\"4\">j</span> in range(5):\n```\n\n`line.variable_ranges` is a list of RangeInLines for each Variable that appears at least partially in this line. The data attribute of the range is a pair `(variable, node)` where node is the particular AST node from the list `variable.nodes` that corresponds to this range.\n\nYou can also use `line.token_ranges` (e.g. if you want to do your own syntax highlighting) or `line.executing_node_ranges` if you want to highlight the currently executing node identified by the [`executing`](https://github.com/alexmojaki/executing) library. Or if you want to make your own range from an AST node, use `line.range_from_node(node, data)`. See the docstrings for more info.\n\n### Syntax highlighting with Pygments\n\nIf you'd like pretty colored text without the work, you can let [Pygments](https://pygments.org/) do it for you. Just follow these steps:\n\n1. `pip install pygments` separately as it's not a dependency of `stack_data`.\n2. Create a pygments formatter object such as `HtmlFormatter` or `Terminal256Formatter`.\n3. Pass the formatter to `Options` in the argument `pygments_formatter`.\n4. Use `line.render(pygmented=True)` to get your formatted text. In this case you can't pass any markers to `render`.\n\nIf you want, you can also highlight the executing node in the frame in combination with the pygments syntax highlighting. For this you will need:\n\n1. A pygments style - either a style class or a string that names it. See the [documentation on styles](https://pygments.org/docs/styles/) and the [styles gallery](https://blog.yjl.im/2015/08/pygments-styles-gallery.html).\n2. A modification to make to the style for the executing node, which is a string such as `\"bold\"` or `\"bg:#ffff00\"` (yellow background). See the [documentation on style rules](https://pygments.org/docs/styles/#style-rules).\n3. Pass these two things to `stack_data.style_with_executing_node(style, modifier)` to get a new style class.\n4. Pass the new style to your formatter when you create it.\n\nNote that this doesn't work with `TerminalFormatter` which just uses the basic ANSI colors and doesn't use the style passed to it in general.\n\n## Getting the full stack\n\nCurrently `print_stack()` doesn't actually print the stack, it just prints one frame. Instead of `frame_info = FrameInfo(frame, options)`, let's do this:\n\n```python\nfor frame_info in FrameInfo.stack_data(frame, options):\n```\n\nNow the output looks something like this:\n\n```\n<module> at line 18\n-----------\n      14 |         for j in range(5):\n      15 |             row.append(i * j)\n      16 |     return result\n-->   18 | bar()\n\nbar at line 5\n-----------\n       4 | def bar():\n-->    5 |     foo()\n\nfoo at line 13\n-----------\n      10 | for i in range(5):\n      11 |     row = []\n      12 |     result.append(row)\n-->   13 |     print_stack()\n      14 |     for j in range(5):\n```\n\nHowever, just as `frame_info.lines` doesn't always yield `Line` objects, `FrameInfo.stack_data` doesn't always yield `FrameInfo` objects, and we must modify our code to handle that. Let's look at some different sample code:\n\n```python\ndef factorial(x):\n    return x * factorial(x - 1)\n\n\ntry:\n    print(factorial(5))\nexcept:\n    print_stack()\n```\n\nIn this code we've forgotten to include a base case in our `factorial` function so it will fail with a `RecursionError` and there'll be many frames with similar information. Similar to the built in Python traceback, `stack_data` avoids showing all of these frames. Instead you will get a `RepeatedFrames` object which summarises the information. See its docstring for more details.\n\nHere is our updated implementation:\n\n```python\ndef print_stack():\n    for frame_info in FrameInfo.stack_data(sys.exc_info()[2]):\n        if isinstance(frame_info, FrameInfo):\n            print(f\"{frame_info.code.co_name} at line {frame_info.lineno}\")\n            print(\"-----------\")\n            for line in frame_info.lines:\n                print(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render()}\")\n\n            for var in frame_info.variables:\n                print(f\"{var.name} = {repr(var.value)}\")\n\n            print()\n        else:\n            print(f\"... {frame_info.description} ...\\n\")\n```\n\nAnd the output:\n\n```\n<module> at line 9\n-----------\n       4 | def factorial(x):\n       5 |     return x * factorial(x - 1)\n       8 | try:\n-->    9 |     print(factorial(5))\n      10 | except:\n\nfactorial at line 5\n-----------\n       4 | def factorial(x):\n-->    5 |     return x * factorial(x - 1)\nx = 5\n\nfactorial at line 5\n-----------\n       4 | def factorial(x):\n-->    5 |     return x * factorial(x - 1)\nx = 4\n\n... factorial at line 5 (996 times) ...\n\nfactorial at line 5\n-----------\n       4 | def factorial(x):\n-->    5 |     return x * factorial(x - 1)\nx = -993\n```\n\nIn addition to handling repeated frames, we've passed a traceback object to `FrameInfo.stack_data` instead of a frame.\n\nIf you want, you can pass `collapse_repeated_frames=False` to `FrameInfo.stack_data` (not to `Options`) and it will just yield `FrameInfo` objects for the full stack.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/84/a7/c7628d79651b8c8c775d27b374315a825141b5783512e82026fb210dd639/terminado-0.17.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8650d44334eba354dd591129ca3124a6ba42c3d5b70df5051b6921d506fdaeae"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "terminado",
        "version": "0.17.1",
        "summary": "Tornado websocket backend for the Xterm.js Javascript terminal emulator library.",
        "description_content_type": "text/markdown",
        "author_email": "Jupyter Development Team <jupyter@googlegroups.com>",
        "license": "# terminado: A python websocket server backend for xterm.js\n        #\n        #  BSD License\n        #\n        #  Copyright (c) 2014-, Jupyter development team\n        #  Copyright (c) 2014, Ramalingam Saravanan <sarava@sarava.net>\n        #  All rights reserved.\n        #\n        #  Redistribution and use in source and binary forms, with or without\n        #  modification, are permitted provided that the following conditions are met:\n        #\n        #  1. Redistributions of source code must retain the above copyright notice, this\n        #     list of conditions and the following disclaimer.\n        #  2. Redistributions in binary form must reproduce the above copyright notice,\n        #     this list of conditions and the following disclaimer in the documentation\n        #     and/or other materials provided with the distribution.\n        #\n        #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        #  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        #  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        #  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n        #  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n        #  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n        #  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n        #  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n        #  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n        #  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "classifier": [
          "Environment :: Web Environment",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python :: 3",
          "Topic :: Terminals :: Terminal Emulators/X Terminals"
        ],
        "requires_dist": [
          "ptyprocess; os_name != 'nt'",
          "pywinpty>=1.1.0; os_name == 'nt'",
          "tornado>=6.1.0",
          "myst-parser; extra == 'docs'",
          "pydata-sphinx-theme; extra == 'docs'",
          "sphinx; extra == 'docs'",
          "pre-commit; extra == 'test'",
          "pytest-timeout; extra == 'test'",
          "pytest>=7.0; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://github.com/jupyter/terminado"
        ],
        "provides_extra": [
          "docs",
          "test"
        ],
        "description": "# Terminado\n\n[![Build Status](https://github.com/jupyter/terminado/actions/workflows/test.yml/badge.svg?query=branch%3Amain++)](https://github.com/jupyter/terminado/actions/workflows/test.yml/badge.svg?query=branch%3Amain++)\n[![codecov](https://codecov.io/gh/jupyter/terminado/branch/main/graph/badge.svg?token=Ih2XfDqyD1)](https://codecov.io/gh/jupyter/terminado)\n[![Documentation Status](https://readthedocs.org/projects/terminado/badge/?version=latest)](http://terminado.readthedocs.io/en/latest/?badge=latest)\n\nThis is a [Tornado](http://tornadoweb.org/) websocket backend for the\n[Xterm.js](https://xtermjs.org/) Javascript terminal emulator library.\n\nIt evolved out of [pyxterm](https://github.com/mitotic/pyxterm), which\nwas part of [GraphTerm](https://github.com/mitotic/graphterm) (as\nlineterm.py), v0.57.0 (2014-07-18), and ultimately derived from the\npublic-domain [Ajaxterm](http://antony.lesuisse.org/software/ajaxterm/)\ncode, v0.11 (2008-11-13) (also on Github as part of\n[QWeb](https://github.com/antonylesuisse/qweb)).\n\nModules:\n\n- `terminado.management`: controls launching virtual terminals,\n  connecting them to Tornado's event loop, and closing them down.\n- `terminado.websocket`: Provides a websocket handler for\n  communicating with a terminal.\n- `terminado.uimodule`: Provides a `Terminal` Tornado [UI\n  Module](http://www.tornadoweb.org/en/stable/guide/templates.html#ui-modules).\n\nJS:\n\n- `terminado/_static/terminado.js`: A lightweight wrapper to set up a\n  term.js terminal with a websocket.\n\nLocal Installation:\n\n> $ pip install -e .\\[test\\]\n\nUsage example:\n\n```python\nimport os.path\nimport tornado.web\nimport tornado.ioloop\n# This demo requires tornado_xstatic and XStatic-term.js\nimport tornado_xstatic\n\nimport terminado\nSTATIC_DIR = os.path.join(os.path.dirname(terminado.__file__), \"_static\")\n\nclass TerminalPageHandler(tornado.web.RequestHandler):\n    def get(self):\n        return self.render(\"termpage.html\", static=self.static_url,\n                           xstatic=self.application.settings['xstatic_url'],\n                           ws_url_path=\"/websocket\")\n\nif __name__ == '__main__':\n    term_manager = terminado.SingleTermManager(shell_command=['bash'])\n    handlers = [\n                (r\"/websocket\", terminado.TermSocket,\n                     {'term_manager': term_manager}),\n                (r\"/\", TerminalPageHandler),\n                (r\"/xstatic/(.*)\", tornado_xstatic.XStaticFileHandler,\n                     {'allowed_modules': ['termjs']})\n               ]\n    app = tornado.web.Application(handlers, static_path=STATIC_DIR,\n                      xstatic_url = tornado_xstatic.url_maker('/xstatic/'))\n    # Serve at http://localhost:8765/ N.B. Leaving out 'localhost' here will\n    # work, but it will listen on the public network interface as well.\n    # Given what terminado does, that would be rather a security hole.\n    app.listen(8765, 'localhost')\n    try:\n        tornado.ioloop.IOLoop.instance().start()\n    finally:\n        term_manager.shutdown()\n```\n\nSee the [demos\ndirectory](https://github.com/takluyver/terminado/tree/master/demos) for\nmore examples. This is a simplified version of the `single.py` demo.\n\nRun the unit tests with:\n\n> $ pytest\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/da/99/fd23634d6962c2791fb8cb6ccae1f05dcbfc39bce36bba8b1c9a8d92eae8/tinycss2-1.2.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2b80a96d41e7c3914b8cda8bc7f705a4d9c49275616e886103dd839dfc847847"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "tinycss2",
        "version": "1.2.1",
        "summary": "A tiny CSS parser",
        "description_content_type": "text/x-rst",
        "keywords": [
          "css",
          "parser"
        ],
        "author_email": "Simon Sapin <simon.sapin@exyr.org>",
        "maintainer_email": "CourtBouillon <contact@courtbouillon.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Text Processing"
        ],
        "requires_dist": [
          "webencodings >=0.4",
          "sphinx ; extra == \"doc\"",
          "sphinx_rtd_theme ; extra == \"doc\"",
          "pytest ; extra == \"test\"",
          "isort ; extra == \"test\"",
          "flake8 ; extra == \"test\""
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Changelog, https://github.com/Kozea/tinycss2/releases",
          "Code, https://github.com/Kozea/tinycss2/",
          "Documentation, https://doc.courtbouillon.org/tinycss2/",
          "Donation, https://opencollective.com/courtbouillon",
          "Homepage, https://www.courtbouillon.org/tinycss2",
          "Issues, https://github.com/Kozea/tinycss2/issues"
        ],
        "provides_extra": [
          "doc",
          "test"
        ],
        "description": "tinycss2 is a low-level CSS parser and generator written in Python: it can\nparse strings, return objects representing tokens and blocks, and generate CSS\nstrings corresponding to these objects.\n\nBased on the CSS Syntax Level 3 specification, tinycss2 knows the grammar of\nCSS but doesn't know specific rules, properties or values supported in various\nCSS modules.\n\n* Free software: BSD license\n* For Python 3.7+, tested on CPython and PyPy\n* Documentation: https://doc.courtbouillon.org/tinycss2\n* Changelog: https://github.com/Kozea/tinycss2/releases\n* Code, issues, tests: https://github.com/Kozea/tinycss2\n* Code of conduct: https://www.courtbouillon.org/code-of-conduct\n* Professional support: https://www.courtbouillon.org\n* Donation: https://opencollective.com/courtbouillon\n\ntinycss2 has been created and developed by Kozea (https://kozea.fr).\nProfessional support, maintenance and community management is provided by\nCourtBouillon (https://www.courtbouillon.org).\n\nCopyrights are retained by their contributors, no copyright assignment is\nrequired to contribute to tinycss2. Unless explicitly stated otherwise, any\ncontribution intentionally submitted for inclusion is licensed under the BSD\n3-clause license, without any additional terms or conditions. For full\nauthorship information, see the version control history.\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/cb/1e/7b8ae7bbc4c0d4b913cabb345c2ac98450bbd9cfe90ee2be275019037932/traitlets-5.7.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=57ba2ba951632eeab9388fa45f342a5402060a5cc9f0bb942f760fafb6641581"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "traitlets",
        "version": "5.7.1",
        "summary": "Traitlets Python configuration system",
        "description_content_type": "text/markdown",
        "keywords": [
          "Interactive",
          "Interpreter",
          "Shell",
          "Web"
        ],
        "author_email": "IPython Development Team <ipython-dev@python.org>",
        "license": "# Licensing terms\n        \n        Traitlets is adapted from enthought.traits, Copyright (c) Enthought, Inc.,\n        under the terms of the Modified BSD License.\n        \n        This project is licensed under the terms of the Modified BSD License\n        (also known as New or Revised or 3-Clause BSD), as follows:\n        \n        - Copyright (c) 2001-, IPython Development Team\n        \n        All rights reserved.\n        \n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n        \n        Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n        \n        Redistributions in binary form must reproduce the above copyright notice, this\n        list of conditions and the following disclaimer in the documentation and/or\n        other materials provided with the distribution.\n        \n        Neither the name of the IPython Development Team nor the names of its\n        contributors may be used to endorse or promote products derived from this\n        software without specific prior written permission.\n        \n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        \n        ## About the IPython Development Team\n        \n        The IPython Development Team is the set of all contributors to the IPython project.\n        This includes all of the IPython subprojects.\n        \n        The core team that coordinates development on GitHub can be found here:\n        https://github.com/jupyter/.\n        \n        ## Our Copyright Policy\n        \n        IPython uses a shared copyright model. Each contributor maintains copyright\n        over their contributions to IPython. But, it is important to note that these\n        contributions are typically only changes to the repositories. Thus, the IPython\n        source code, in its entirety is not the copyright of any single person or\n        institution. Instead, it is the collective copyright of the entire IPython\n        Development Team. If individual contributors want to maintain a record of what\n        changes/contributions they have specific copyright on, they should indicate\n        their copyright in the commit message of the change, when they commit the\n        change to one of the IPython repositories.\n        \n        With this in mind, the following banner should be used in any source code file\n        to indicate the copyright and license terms:\n        \n        ```\n        # Copyright (c) IPython Development Team.\n        # Distributed under the terms of the Modified BSD License.\n        ```",
        "classifier": [
          "Intended Audience :: Developers",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3"
        ],
        "requires_dist": [
          "myst-parser; extra == 'docs'",
          "pydata-sphinx-theme; extra == 'docs'",
          "sphinx; extra == 'docs'",
          "black>=22.6.0; extra == 'lint'",
          "mdformat>0.7; extra == 'lint'",
          "ruff>=0.0.156; extra == 'lint'",
          "pre-commit; extra == 'test'",
          "pytest; extra == 'test'",
          "mypy>=0.990; extra == 'typing'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://github.com/ipython/traitlets"
        ],
        "provides_extra": [
          "docs",
          "lint",
          "test",
          "typing"
        ],
        "description": "# Traitlets\n\n[![Tests](https://github.com/ipython/traitlets/actions/workflows/tests.yml/badge.svg)](https://github.com/ipython/traitlets/actions/workflows/tests.yml)\n[![Documentation Status](https://readthedocs.org/projects/traitlets/badge/?version=latest)](https://traitlets.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/ipython/traitlets/branch/main/graph/badge.svg?token=HcsbLGEmI1)](https://codecov.io/gh/ipython/traitlets)\n[![Tidelift](https://tidelift.com/subscription/pkg/pypi-traitlets)](https://tidelift.com/badges/package/pypi/traitlets)\n\n|               |                                      |\n| ------------- | ------------------------------------ |\n| **home**      | https://github.com/ipython/traitlets |\n| **pypi-repo** | https://pypi.org/project/traitlets/  |\n| **docs**      | https://traitlets.readthedocs.io/    |\n| **license**   | Modified BSD License                 |\n\nTraitlets is a pure Python library enabling:\n\n- the enforcement of strong typing for attributes of Python objects\n  (typed attributes are called _\"traits\"_);\n- dynamically calculated default values;\n- automatic validation and coercion of trait attributes when attempting a\n  change;\n- registering for receiving notifications when trait values change;\n- reading configuring values from files or from command line\n  arguments - a distinct layer on top of traitlets, so you may use\n  traitlets without the configuration machinery.\n\nIts implementation relies on the [descriptor](https://docs.python.org/howto/descriptor.html)\npattern, and it is a lightweight pure-python alternative of the\n[_traits_ library](https://docs.enthought.com/traits/).\n\nTraitlets powers the configuration system of IPython and Jupyter\nand the declarative API of IPython interactive widgets.\n\n## Installation\n\nFor a local installation, make sure you have\n[pip installed](https://pip.pypa.io/en/stable/installing/) and run:\n\n```bash\npip install traitlets\n```\n\nFor a **development installation**, clone this repository, change into the\n`traitlets` root directory, and run pip:\n\n```bash\ngit clone https://github.com/ipython/traitlets.git\ncd traitlets\npip install -e .\n```\n\n## Running the tests\n\n```bash\npip install \"traitlets[test]\"\npy.test traitlets\n```\n\n## Code Styling\n\n`traitlets` has adopted automatic code formatting so you shouldn't\nneed to worry too much about your code style.\nAs long as your code is valid,\nthe pre-commit hook should take care of how it should look.\n\nTo install `pre-commit` locally, run the following::\n\n```\npip install pre-commit\npre-commit install\n```\n\nYou can invoke the pre-commit hook by hand at any time with::\n\n```\npre-commit run\n```\n\nwhich should run any autoformatting on your code\nand tell you about any errors it couldn't fix automatically.\nYou may also install [black integration](https://github.com/psf/black#editor-integration)\ninto your text editor to format code automatically.\n\nIf you have already committed files before setting up the pre-commit\nhook with `pre-commit install`, you can fix everything up using\n`pre-commit run --all-files`. You need to make the fixing commit\nyourself after that.\n\nSome of the hooks only run on CI by default, but you can invoke them by\nrunning with the `--hook-stage manual` argument.\n\n## Usage\n\nAny class with trait attributes must inherit from `HasTraits`.\nFor the list of available trait types and their properties, see the\n[Trait Types](https://traitlets.readthedocs.io/en/latest/trait_types.html)\nsection of the documentation.\n\n### Dynamic default values\n\nTo calculate a default value dynamically, decorate a method of your class with\n`@default({traitname})`. This method will be called on the instance, and\nshould return the default value. In this example, the `_username_default`\nmethod is decorated with `@default('username')`:\n\n```Python\nimport getpass\nfrom traitlets import HasTraits, Unicode, default\n\nclass Identity(HasTraits):\n    username = Unicode()\n\n    @default('username')\n    def _username_default(self):\n        return getpass.getuser()\n```\n\n### Callbacks when a trait attribute changes\n\nWhen a trait changes, an application can follow this trait change with\nadditional actions.\n\nTo do something when a trait attribute is changed, decorate a method with\n[`traitlets.observe()`](https://traitlets.readthedocs.io/en/latest/api.html?highlight=observe#traitlets.observe).\nThe method will be called with a single argument, a dictionary which contains\nan owner, new value, old value, name of the changed trait, and the event type.\n\nIn this example, the `_num_changed` method is decorated with `` @observe(`num`) ``:\n\n```Python\nfrom traitlets import HasTraits, Integer, observe\n\nclass TraitletsExample(HasTraits):\n    num = Integer(5, help=\"a number\").tag(config=True)\n\n    @observe('num')\n    def _num_changed(self, change):\n        print(\"{name} changed from {old} to {new}\".format(**change))\n```\n\nand is passed the following dictionary when called:\n\n```Python\n{\n  'owner': object,  # The HasTraits instance\n  'new': 6,         # The new value\n  'old': 5,         # The old value\n  'name': \"foo\",    # The name of the changed trait\n  'type': 'change', # The event type of the notification, usually 'change'\n}\n```\n\n### Validation and coercion\n\nEach trait type (`Int`, `Unicode`, `Dict` etc.) may have its own validation or\ncoercion logic. In addition, we can register custom cross-validators\nthat may depend on the state of other attributes. For example:\n\n```Python\nfrom traitlets import HasTraits, TraitError, Int, Bool, validate\n\nclass Parity(HasTraits):\n    value = Int()\n    parity = Int()\n\n    @validate('value')\n    def _valid_value(self, proposal):\n        if proposal['value'] % 2 != self.parity:\n            raise TraitError('value and parity should be consistent')\n        return proposal['value']\n\n    @validate('parity')\n    def _valid_parity(self, proposal):\n        parity = proposal['value']\n        if parity not in [0, 1]:\n            raise TraitError('parity should be 0 or 1')\n        if self.value % 2 != parity:\n            raise TraitError('value and parity should be consistent')\n        return proposal['value']\n\nparity_check = Parity(value=2)\n\n# Changing required parity and value together while holding cross validation\nwith parity_check.hold_trait_notifications():\n    parity_check.value = 1\n    parity_check.parity = 1\n```\n\nHowever, we **recommend** that custom cross-validators don't modify the state\nof the HasTraits instance.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c0/db/d4f9c75b43541f7235daf4d13eb43f4491f9d5f5df45ce41daeed3a903f6/uri_template-1.2.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f1699c77b73b925cf4937eae31ab282a86dc885c333f2e942513f08f691fc7db"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "uri-template",
        "version": "1.2.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "RFC 6570 URI Template Processor",
        "description_content_type": "text/markdown",
        "home_page": "https://github.com/plinss/uri_template/",
        "author": "Peter Linss",
        "author_email": "pypi@linss.com",
        "license": "UNKNOWN",
        "classifier": [
          "Programming Language :: Python :: 3",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent"
        ],
        "requires_dist": [
          "mypy ; extra == 'dev'",
          "flake8 (<4.0.0) ; extra == 'dev'",
          "flake8-annotations ; extra == 'dev'",
          "flake8-bugbear ; extra == 'dev'",
          "flake8-commas ; extra == 'dev'",
          "flake8-comprehensions ; extra == 'dev'",
          "flake8-continuation ; extra == 'dev'",
          "flake8-datetimez ; extra == 'dev'",
          "flake8-docstrings ; extra == 'dev'",
          "flake8-import-order ; extra == 'dev'",
          "flake8-literal ; extra == 'dev'",
          "flake8-noqa ; extra == 'dev'",
          "flake8-requirements ; extra == 'dev'",
          "flake8-type-annotations ; extra == 'dev'",
          "flake8-use-fstring ; extra == 'dev'",
          "pep8-naming ; extra == 'dev'"
        ],
        "requires_python": ">=3.6",
        "provides_extra": [
          "dev"
        ],
        "description": "# uri_template\n\nAn implementation of RFC 6570 URI Templates.\n\nThis packages implements URI Template expansion in strict adherence to RFC 6570,\nbut adds a few extensions.\n\n## RFC 6570 Extensions\n\n### Non-string Values\n\nRFC 6570 is silent regarding variable values that are not strings, lists, associative arrays, or null.\n\nThis package handles value types as follows:\n\n  * Values that are instances of `str` are treated as strings.\n  * Values implementing `collections.abc.Sequence` are treated as lists.\n  * Values implementing `collections.abc.Mapping` are treated as associative arrays.\n  * `None` values are treated as null.\n  * Boolean values are converted to the lower case strings 'true' and 'false'.\n  * All other values will be converted to strings using the Python `str()` function.\n\n### Nested Structures\n\nThis package handles variable values with nested structure,\nfor example, lists containing other lists or associative arrays,\nor associative arrays containing lists or other associative arrays.\n\nNested values for variables that do not use the array modifier ('[]') are treated as follows:\n\n  * Lists containing lists are flattened into a single list.\n  * Lists containing associative arrays are treated as a single combined associative array.\n  * Associative arrays represent nested data using dot notation (\".\") for the variable names.\n\nNested values for variables that use the array modifier extend the variable name with \nthe value's index or key written as an array subscript, e.g. \"foo[0]\" or \"foo[bar]\".\n\n### Default Values\n\nThis package allows default string values for variables per early drafts of RFC 6570.\ne.g. \"{foo=bar}\" will expand to \"bar\" if a value for `foo` is not given.\n\nList and associtative array default values are not supported at this time.\n\n### Partial expansion\n\nThis package allows partial expansion of URI Templates.\n\nIn a partial expansion, missing values preseve their expansion in the resultant output.\ne.g. a partial expansion of \"{one}/{two}\" with a value for `one` of \"foo\" and `two` missing will result in:\n\"foo/{two}\".\n\nIn order to allow partial expansions to preserve value joiners with expanded output,\nexpansions accept an optional \"trailing joiner\" of \",\", \".\", \"/\", \";\", or \"&\",\nif this joiner is present after all variables, \nit will be appended to the output of the expansion and will suppress the output prefix.\ne.g.: \"{#one,two}\" with a missing value for `one` and a value of \"bar\" for `two`, \nwill partially expand to: \"#{#one,}bar\", which when provided with a value of \"foo\" for `one` \nwill expand to \"#foo,bar\"\n\nSome partial expansions that have some output, but have missing values, \nwill convert the remaining variables to a different type of expansion so that \nfurther expansions will produce the same output as if all values were originally present.\n\n   * Partial Simple String Expansions will convert to Comma Expansions.\n   * Partial Reserved Expansions Partial Fragment Expansions will convert to Reserved Comma Expansions.\n   * Partial Form-Style Query Expansions will convert to Form-Style Query Continuations.\n\nIn order to preserve the resultant value of templates that are paritally expanded, \nthe following additional Expression Expansions are supported:\n\n#### Comma Expansion: {,var}\n\nSimilar to Label Expansion with Dot-Prefix, \nComma Expansion prefixes the expansion output with a single comma \",\".\n\n#### Reserved Comma Expansion: {,+var}\n\nSimilar to Comma Expansion, \nReserved Comma Expansion prefixes the expansion output with a single comma \",\",\nbut otherwise performs a Reserved Expansion ({+var}).\n\n## API \n\nThe package provides three functions:\n\n#### uri_template.expand(template: str, **kwargs) -> Optional[str]: ...\n\nExpand the given template, skipping missing values per RFC 6570.\n\nReturns `None` if the template is invalid or expansion fails.\n\n\n#### uri_template.partial(template: str, **kwargs) -> Optional[str]: ...\n\nPartially expand the given template, \nreplacing missing variables with further expansions.\n\nReturns `None` if the template is invalid or expansion fails.\n\n\n#### uri_template.validate(template: str) -> bool: ...\n\nReturn `True` if the template is valid.\n\n---\n\nAnd the following classes:\n\n### uri_template.URITemplate\n\n#### URITemplate(template: str)\n\nConstruct a URITemplate for a given template string.\n\nRaises `ExpansionInvalid`, `ExpansionReserved`, or `VariableInvalid` if the template is invalid or unsupported.\n\n#### URITemplate.variables: Iterable[Variable]\n\nAll variables present in the template.\nDuplicates are returned once, order is preserved.\n\n#### URITemplate.variable_names: Iterable[str]\n\nThe names of all variables present in the template.\nDuplicates are returned once, order is preserved.\n\n#### URITemplate.expanded: bool\n\nDetermine if template is fully expanded.\n\n#### URITemplate.expand(**kwargs) -> str\n\nReturns the result of the expansion, skips missing variables.\n\nRaises `ExpansionFailed` if the expansion fails due to a composite value being passed to a variable with a prefix modifier.\n\n#### URITemplate.partial(**kwargs) -> URITemplate\n\nExpand the template, replacing missing variables with further expansions.\n\nRaises `ExpansionFailed` if the expansion fails due to a composite value being passed to a variable with a prefix modifier.\n\n#### URITemplate.__str__() -> str\n\nConvert the URITemplate object back into its original string form.\n\n---\n\n### uri_template.Variable\n\n#### Variable(var_spec: str)\n\nConstruct a Variable.\n\n#### Variable.name: str\n\nThe name of the variable\n\n#### Variable.max_length: int\n\nThe speicified max length, or `0`.\n\n#### Variable.explode: bool\n\nExplode modifier is present.\n\n#### Variable.array: bool\n\nArray modifier is present.\n\n#### Variable.default: Optional[str]\n\nSpecified default value, or `None`.\n\n#### Variable.__str__() -> str\n\nConvert the variable back to its original string form.\n\n---\n\nAnd the following exceptions:\n\n#### uri_template.ExpansionInvalid\n\nExpansion specification is invalid. \n\nRaised by URITemplate constructor.\n\n#### uri_template.ExpansionReserved\n\nExpansion contains a reserved operator.\n\nRaised by URITemplate constructor.\n\n#### uri_template.VariableInvalid\n\nVariable specification is invalid.\n\nRaised by URITemplate constructor.\n\n#### uri_template.ExpansionFailed\n\nExpansion failed, currently only possible when a composite value is passed to a variable with a prefix modifier.\n\nRaised by URITemplate.expand() or URITemplate.partial() methods.\n\n\n## Installation\n\nInstall with pip:\n\n    pip install uri-template\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/af/a9/71beaebcacd7dd848af470740dbe7f39aa6bd23a60b8162f8c050090eed4/webcolors-1.12-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=d98743d81d498a2d3eaf165196e65481f0d2ea85281463d856b1e51b09f62dce"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "webcolors",
        "version": "1.12",
        "summary": "A library for working with color names and color values formats defined by HTML and CSS.",
        "home_page": "https://github.com/ubernostrum/webcolors",
        "author": "James Bennett",
        "author_email": "james@b-list.org",
        "license": "BSD 3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: Utilities"
        ],
        "requires_python": ">=3.7",
        "description": ".. -*-restructuredtext-*-\n\n.. image:: https://github.com/ubernostrum/webcolors/workflows/CI/badge.svg\n   :alt: CI status image\n   :target: https://github.com/ubernostrum/webcolors/actions?query=workflow%3ACI\n\n``webcolors`` is a module for working with HTML/CSS color definitions.\n\nSupport is included for normalizing and converting between the\nfollowing formats (RGB colorspace only; conversion to/from HSL can be\nhandled by the ``colorsys`` module in the Python standard library):\n\n* Specification-defined color names\n\n* Six-digit hexadecimal\n\n* Three-digit hexadecimal\n\n* Integer ``rgb()`` triplet\n\n* Percentage ``rgb()`` triplet\n\nFor example:\n\n.. code-block:: python\n\n    >>> import webcolors\n    >>> webcolors.hex_to_name(u'#daa520')\n    u'goldenrod'\n\nImplementations are also provided for the HTML5 color parsing and\nserialization algorithms. For example, parsing the infamous\n\"chucknorris\" string into an rgb() triplet:\n\n.. code-block:: python\n\n    >>> import webcolors\n    >>> webcolors.html5_parse_legacy_color(u'chucknorris')\n    HTML5SimpleColor(red=192, green=0, blue=0)\n\nFull documentation is `available online <https://webcolors.readthedocs.io/>`_.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/f4/24/2a3e3df732393fed8b3ebf2ec078f05546de641fe1b667ee316ec1dcf3b7/webencodings-0.5.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=a0af1213f3c2226497a97e2b3aa01a7e4bee4f403f95be16fc9acd2947514a78"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.0",
        "name": "webencodings",
        "version": "0.5.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Character encoding aliases for legacy web content",
        "home_page": "https://github.com/SimonSapin/python-webencodings",
        "author": "Geoffrey Sneddon",
        "author_email": "me@gsnedders.com",
        "license": "BSD",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.6",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: WWW/HTTP"
        ],
        "description": "python-webencodings\n===================\n\nThis is a Python implementation of the `WHATWG Encoding standard\n<http://encoding.spec.whatwg.org/>`_.\n\n* Latest documentation: http://packages.python.org/webencodings/\n* Source code and issue tracker:\n  https://github.com/gsnedders/python-webencodings\n* PyPI releases: http://pypi.python.org/pypi/webencodings\n* License: BSD\n* Python 2.6+ and 3.3+\n\nIn order to be compatible with legacy web content\nwhen interpreting something like ``Content-Type: text/html; charset=latin1``,\ntools need to use a particular set of aliases for encoding labels\nas well as some overriding rules.\nFor example, ``US-ASCII`` and ``iso-8859-1`` on the web are actually\naliases for ``windows-1252``, and an UTF-8 or UTF-16 BOM takes precedence\nover any other encoding declaration.\nThe Encoding standard defines all such details so that implementations do\nnot have to reverse-engineer each other.\n\nThis module has encoding labels and BOM detection,\nbut the actual implementation for encoders and decoders is Python’s.\n\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/78/d5/2b5719b738791cd798e8f097eba4bb093ff5efca5cef2f3d37a72daa111f/websocket_client-1.4.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=d6b06432f184438d99ac1f456eaf22fe1ade524c3dd16e661142dc54e9cba574"
        }
      },
      "is_direct": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "websocket-client",
        "version": "1.4.2",
        "summary": "WebSocket client for Python with low level API options",
        "description_content_type": "text/markdown",
        "keywords": [
          "websockets",
          "client"
        ],
        "home_page": "https://github.com/websocket-client/websocket-client.git",
        "download_url": "https://github.com/websocket-client/websocket-client/releases",
        "author": "liris",
        "author_email": "liris.pp@gmail.com",
        "license": "Apache-2.0",
        "classifier": [
          "Development Status :: 4 - Beta",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX",
          "Operating System :: Microsoft :: Windows",
          "Topic :: Internet",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Intended Audience :: Developers"
        ],
        "requires_dist": [
          "Sphinx (>=3.4) ; extra == 'docs'",
          "sphinx-rtd-theme (>=0.5) ; extra == 'docs'",
          "python-socks ; extra == 'optional'",
          "wsaccel ; extra == 'optional'",
          "websockets ; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://websocket-client.readthedocs.io/",
          "Source, https://github.com/websocket-client/websocket-client/"
        ],
        "provides_extra": [
          "docs",
          "optional",
          "test"
        ],
        "description": "[![docs](https://readthedocs.org/projects/websocket-client/badge/?style=flat)](https://websocket-client.readthedocs.io/)\n[![Build Status](https://github.com/websocket-client/websocket-client/actions/workflows/build.yml/badge.svg)](https://github.com/websocket-client/websocket-client/actions/workflows/build.yml)\n[![codecov](https://codecov.io/gh/websocket-client/websocket-client/branch/master/graph/badge.svg?token=pcXhUQwiL3)](https://codecov.io/gh/websocket-client/websocket-client)\n[![PyPI Downloads](https://pepy.tech/badge/websocket-client)](https://pepy.tech/project/websocket-client)\n[![PyPI version](https://img.shields.io/pypi/v/websocket_client)](https://pypi.org/project/websocket_client/)\n\n# websocket-client\n\nwebsocket-client is a WebSocket client for Python. It provides access\nto low level APIs for WebSockets. websocket-client implements version\n[hybi-13](https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-13)\nof the WebSocket protocol. This client does not currently support the\npermessage-deflate extension from\n[RFC 7692](https://tools.ietf.org/html/rfc7692).\n\n## Documentation\n\nThis project's documentation can be found at\n[https://websocket-client.readthedocs.io/](https://websocket-client.readthedocs.io/)\n\n## Contributing\n\nPlease see the [contribution guidelines](https://github.com/websocket-client/websocket-client/blob/master/CONTRIBUTING.md)\n\n## Installation\n\nYou can use either `python3 setup.py install` or `pip3 install websocket-client`\nto install. This module is tested on Python 3.7+.\n\nThere are several optional dependencies that can be installed to enable\nspecific websocket-client features.\n- To install `python-socks` for proxy usage and `wsaccel` for a minor performance boost, use:\n `pip3 install websocket-client[optional]`\n- To install `websockets` to run unit tests using the local echo server, use:\n `pip3 install websocket-client[test]`\n- To install `Sphinx` and `sphinx_rtd_theme` to build project documentation, use:\n `pip3 install websocket-client[docs]`\n\nWhile not a strict dependency, [rel](https://github.com/bubbleboy14/registeredeventlistener)\nis useful when using `run_forever` with automatic reconnect. Install rel with `pip3 install rel`.\n\nFootnote: Some shells, such as zsh, require you to escape the `[` and `]` characters with a `\\`.\n\n## Usage Tips\n\nCheck out the documentation's FAQ for additional guidelines:\n[https://websocket-client.readthedocs.io/en/latest/faq.html](https://websocket-client.readthedocs.io/en/latest/faq.html)\n\nKnown issues with this library include lack of WebSocket Compression\nsupport (RFC 7692) and [minimal threading documentation/support](https://websocket-client.readthedocs.io/en/latest/threading.html).\n\n## Performance\n\nThe `send` and `validate_utf8` methods can sometimes be bottleneck.\nYou can disable UTF8 validation in this library (and receive a\nperformance enhancement) with the `skip_utf8_validation` parameter.\nIf you want to get better performance, install wsaccel. While\nwebsocket-client does not depend on wsaccel, it will be used if\navailable. wsaccel doubles the speed of UTF8 validation and\noffers a very minor 10% performance boost when masking the\npayload data as part of the `send` process. Numpy used to\nbe a suggested performance enhancement alternative, but\n[issue #687](https://github.com/websocket-client/websocket-client/issues/687)\nfound it didn't help.\n\n## Examples\n\nMany more examples are found in the\n[examples documentation](https://websocket-client.readthedocs.io/en/latest/examples.html).\n\n### Long-lived Connection\n\nMost real-world WebSockets situations involve longer-lived connections.\nThe WebSocketApp `run_forever` loop will automatically try to reconnect\nto an open WebSocket connection when a network\nconnection is lost if it is provided with:\n\n- a `dispatcher` argument (async dispatcher like rel or pyevent)\n- a non-zero `reconnect` argument (delay between disconnection and attempted reconnection)\n\n`run_forever` provides a variety of event-based connection controls\nusing callbacks like `on_message` and `on_error`.\n`run_forever` does not automatically reconnect if the server\ncloses the WebSocket gracefully (returning\n[a standard websocket close code](https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1)).\nCustomizing behavior when the server closes\nthe WebSocket should be handled in the `on_close` callback.\nThis example uses [rel](https://github.com/bubbleboy14/registeredeventlistener)\nfor the dispatcher to provide automatic reconnection.\n\n```python\nimport websocket\nimport _thread\nimport time\nimport rel\n\ndef on_message(ws, message):\n    print(message)\n\ndef on_error(ws, error):\n    print(error)\n\ndef on_close(ws, close_status_code, close_msg):\n    print(\"### closed ###\")\n\ndef on_open(ws):\n    print(\"Opened connection\")\n\nif __name__ == \"__main__\":\n    websocket.enableTrace(True)\n    ws = websocket.WebSocketApp(\"wss://api.gemini.com/v1/marketdata/BTCUSD\",\n                              on_open=on_open,\n                              on_message=on_message,\n                              on_error=on_error,\n                              on_close=on_close)\n\n    ws.run_forever(dispatcher=rel, reconnect=5)  # Set dispatcher to automatic reconnection, 5 second reconnect delay if connection closed unexpectedly\n    rel.signal(2, rel.abort)  # Keyboard Interrupt\n    rel.dispatch()\n```\n\n### Short-lived Connection\n\nThis is if you want to communicate a short message and disconnect\nimmediately when done. For example, if you want to confirm that a WebSocket\nserver is running and responds properly to a specific request.\n\n```python\nfrom websocket import create_connection\n\nws = create_connection(\"ws://echo.websocket.events/\")\nprint(ws.recv())\nprint(\"Sending 'Hello, World'...\")\nws.send(\"Hello, World\")\nprint(\"Sent\")\nprint(\"Receiving...\")\nresult =  ws.recv()\nprint(\"Received '%s'\" % result)\nws.close()\n```\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/26/a7/9da7d5b23fc98ab3d424ac2c65613d63c1f401efb84ad50f2fa27b2caab4/importlib_metadata-6.0.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=7efb448ec9a5e313a57655d35aa54cd3e01b7e1fbcf72dce1bf06119420f5bad"
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "importlib-metadata",
        "version": "6.0.0",
        "summary": "Read metadata from Python packages",
        "home_page": "https://github.com/python/importlib_metadata",
        "author": "Jason R. Coombs",
        "author_email": "jaraco@jaraco.com",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only"
        ],
        "requires_dist": [
          "zipp (>=0.5)",
          "typing-extensions (>=3.6.4) ; python_version < \"3.8\"",
          "sphinx (>=3.5) ; extra == 'docs'",
          "jaraco.packaging (>=9) ; extra == 'docs'",
          "rst.linker (>=1.9) ; extra == 'docs'",
          "furo ; extra == 'docs'",
          "sphinx-lint ; extra == 'docs'",
          "jaraco.tidelift (>=1.4) ; extra == 'docs'",
          "ipython ; extra == 'perf'",
          "pytest (>=6) ; extra == 'testing'",
          "pytest-checkdocs (>=2.4) ; extra == 'testing'",
          "flake8 (<5) ; extra == 'testing'",
          "pytest-cov ; extra == 'testing'",
          "pytest-enabler (>=1.3) ; extra == 'testing'",
          "packaging ; extra == 'testing'",
          "pyfakefs ; extra == 'testing'",
          "flufl.flake8 ; extra == 'testing'",
          "pytest-perf (>=0.9.2) ; extra == 'testing'",
          "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
          "pytest-mypy (>=0.9.1) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
          "pytest-flake8 ; (python_version < \"3.12\") and extra == 'testing'",
          "importlib-resources (>=1.3) ; (python_version < \"3.9\") and extra == 'testing'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "docs",
          "perf",
          "testing"
        ],
        "description": ".. image:: https://img.shields.io/pypi/v/importlib_metadata.svg\n   :target: https://pypi.org/project/importlib_metadata\n\n.. image:: https://img.shields.io/pypi/pyversions/importlib_metadata.svg\n\n.. image:: https://github.com/python/importlib_metadata/workflows/tests/badge.svg\n   :target: https://github.com/python/importlib_metadata/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/importlib-metadata/badge/?version=latest\n   :target: https://importlib-metadata.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2022-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/importlib-metadata\n   :target: https://tidelift.com/subscription/pkg/pypi-importlib-metadata?utm_source=pypi-importlib-metadata&utm_medium=readme\n\nLibrary to access the metadata for a Python package.\n\nThis package supplies third-party access to the functionality of\n`importlib.metadata <https://docs.python.org/3/library/importlib.metadata.html>`_\nincluding improvements added to subsequent Python versions.\n\n\nCompatibility\n=============\n\nNew features are introduced in this third-party library and later merged\ninto CPython. The following table indicates which versions of this library\nwere contributed to different versions in the standard library:\n\n.. list-table::\n   :header-rows: 1\n\n   * - importlib_metadata\n     - stdlib\n   * - 5.0\n     - 3.12\n   * - 4.13\n     - 3.11\n   * - 4.6\n     - 3.10\n   * - 1.4\n     - 3.8\n\n\nUsage\n=====\n\nSee the `online documentation <https://importlib_metadata.readthedocs.io/>`_\nfor usage details.\n\n`Finder authors\n<https://docs.python.org/3/reference/import.html#finders-and-loaders>`_ can\nalso add support for custom package installers.  See the above documentation\nfor details.\n\n\nCaveats\n=======\n\nThis project primarily supports third-party packages installed by PyPA\ntools (or other conforming packages). It does not support:\n\n- Packages in the stdlib.\n- Packages installed without metadata.\n\nProject details\n===============\n\n * Project home: https://github.com/python/importlib_metadata\n * Report bugs at: https://github.com/python/importlib_metadata/issues\n * Code hosting: https://github.com/python/importlib_metadata\n * Documentation: https://importlib_metadata.readthedocs.io/\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-importlib-metadata?utm_source=pypi-importlib-metadata&utm_medium=referral&utm_campaign=github>`_.\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/be/0f/bd3e7fa47cc43276051c557d3b2fe946664781d2ecf08b05d074e1a3ee59/importlib_resources-5.10.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=7d543798b0beca10b6a01ac7cafda9f822c54db9e8376a6bf57e0cbd74d486b6"
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "importlib-resources",
        "version": "5.10.2",
        "summary": "Read resources from Python packages",
        "home_page": "https://github.com/python/importlib_resources",
        "author": "Barry Warsaw",
        "author_email": "barry@python.org",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only"
        ],
        "requires_dist": [
          "zipp (>=3.1.0) ; python_version < \"3.10\"",
          "sphinx (>=3.5) ; extra == 'docs'",
          "jaraco.packaging (>=9) ; extra == 'docs'",
          "rst.linker (>=1.9) ; extra == 'docs'",
          "furo ; extra == 'docs'",
          "sphinx-lint ; extra == 'docs'",
          "jaraco.tidelift (>=1.4) ; extra == 'docs'",
          "pytest (>=6) ; extra == 'testing'",
          "pytest-checkdocs (>=2.4) ; extra == 'testing'",
          "flake8 (<5) ; extra == 'testing'",
          "pytest-cov ; extra == 'testing'",
          "pytest-enabler (>=1.3) ; extra == 'testing'",
          "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
          "pytest-mypy (>=0.9.1) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
          "pytest-flake8 ; (python_version < \"3.12\") and extra == 'testing'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://importlib-resources.readthedocs.io/"
        ],
        "provides_extra": [
          "docs",
          "testing"
        ],
        "description": ".. image:: https://img.shields.io/pypi/v/importlib_resources.svg\n   :target: https://pypi.org/project/importlib_resources\n\n.. image:: https://img.shields.io/pypi/pyversions/importlib_resources.svg\n\n.. image:: https://github.com/python/importlib_resources/workflows/tests/badge.svg\n   :target: https://github.com/python/importlib_resources/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/importlib-resources/badge/?version=latest\n   :target: https://importlib-resources.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2022-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/importlib-resources\n   :target: https://tidelift.com/subscription/pkg/pypi-importlib-resources?utm_source=pypi-importlib-resources&utm_medium=readme\n\n``importlib_resources`` is a backport of Python standard library\n`importlib.resources\n<https://docs.python.org/3/library/importlib.html#module-importlib.resources>`_\nmodule for older Pythons.\n\nThe key goal of this module is to replace parts of `pkg_resources\n<https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ with a\nsolution in Python's stdlib that relies on well-defined APIs.  This makes\nreading resources included in packages easier, with more stable and consistent\nsemantics.\n\nCompatibility\n=============\n\nNew features are introduced in this third-party library and later merged\ninto CPython. The following table indicates which versions of this library\nwere contributed to different versions in the standard library:\n\n.. list-table::\n   :header-rows: 1\n\n   * - importlib_resources\n     - stdlib\n   * - 5.9\n     - 3.12\n   * - 5.7\n     - 3.11\n   * - 5.0\n     - 3.10\n   * - 1.3\n     - 3.9\n   * - 0.5 (?)\n     - 3.7\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-importlib-resources?utm_source=pypi-importlib-resources&utm_medium=referral&utm_campaign=github>`_.\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c9/5c/3d4882ba113fd55bdba9326c1e4c62a15e674a2501de4869e6bd6301f87e/pkgutil_resolve_name-1.3.10-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=ca27cc078d25c5ad71a9de0a7a330146c4e014c2462d9af19c6b828280649c5e"
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pkgutil_resolve_name",
        "version": "1.3.10",
        "summary": "Resolve a name to an object.",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/graingert/pkgutil-resolve-name",
        "author": "Vinay Sajip",
        "author_email": "vinay_sajip@yahoo.co.uk",
        "maintainer": "Thomas Grainger",
        "maintainer_email": "pkgutil-resolve-name@graingert.co.uk",
        "classifier": [
          "License :: OSI Approved :: MIT License"
        ],
        "requires_python": ">=3.6",
        "description": "pkgutil-resolve-name\n====================\n\nA backport of Python 3.9's ``pkgutil.resolve_name``.\nSee the `Python 3.9 documentation <https://docs.python.org/3.9/library/pkgutil.html#pkgutil.resolve_name>`__.\n\n"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/95/7b/1608a7344743f54a8c072d64d2a279934fd204d6d015278b0a0ed4ce104b/zipp-3.13.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=e8b2a36ea17df80ffe9e2c4fda3f693c3dad6df1697d3cd3af232db680950b0b"
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "zipp",
        "version": "3.13.0",
        "summary": "Backport of pathlib-compatible object wrapper for zip files",
        "home_page": "https://github.com/jaraco/zipp",
        "author": "Jason R. Coombs",
        "author_email": "jaraco@jaraco.com",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only"
        ],
        "requires_dist": [
          "sphinx (>=3.5) ; extra == 'docs'",
          "jaraco.packaging (>=9) ; extra == 'docs'",
          "rst.linker (>=1.9) ; extra == 'docs'",
          "furo ; extra == 'docs'",
          "sphinx-lint ; extra == 'docs'",
          "jaraco.tidelift (>=1.4) ; extra == 'docs'",
          "pytest (>=6) ; extra == 'testing'",
          "pytest-checkdocs (>=2.4) ; extra == 'testing'",
          "flake8 (<5) ; extra == 'testing'",
          "pytest-cov ; extra == 'testing'",
          "pytest-enabler (>=1.3) ; extra == 'testing'",
          "jaraco.itertools ; extra == 'testing'",
          "func-timeout ; extra == 'testing'",
          "jaraco.functools ; extra == 'testing'",
          "more-itertools ; extra == 'testing'",
          "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
          "pytest-mypy (>=0.9.1) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
          "pytest-flake8 ; (python_version < \"3.12\") and extra == 'testing'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "docs",
          "testing"
        ],
        "description": ".. image:: https://img.shields.io/pypi/v/zipp.svg\n   :target: https://pypi.org/project/zipp\n\n.. image:: https://img.shields.io/pypi/pyversions/zipp.svg\n\n.. image:: https://github.com/jaraco/zipp/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/zipp/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. .. image:: https://readthedocs.org/projects/skeleton/badge/?version=latest\n..    :target: https://skeleton.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/zipp\n   :target: https://tidelift.com/subscription/pkg/pypi-zipp?utm_source=pypi-zipp&utm_medium=readme\n\n\nA pathlib-compatible Zipfile object wrapper. Official backport of the standard library\n`Path object <https://docs.python.org/3.8/library/zipfile.html#path-objects>`_.\n\n\nCompatibility\n=============\n\nNew features are introduced in this third-party library and later merged\ninto CPython. The following table indicates which versions of this library\nwere contributed to different versions in the standard library:\n\n.. list-table::\n   :header-rows: 1\n\n   * - zipp\n     - stdlib\n   * - 3.9\n     - 3.12\n   * - 3.5\n     - 3.11\n   * - 3.2\n     - 3.10\n   * - 3.3 ??\n     - 3.9\n   * - 1.0\n     - 3.8\n\n\nUsage\n=====\n\nUse ``zipp.Path`` in place of ``zipfile.Path`` on any Python.\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-zipp?utm_source=pypi-zipp&utm_medium=referral&utm_campaign=github>`_.\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n"
      }
    }
  ],
  "environment": {
    "implementation_name": "cpython",
    "implementation_version": "3.8.10",
    "os_name": "posix",
    "platform_machine": "x86_64",
    "platform_release": "5.15.79.1-microsoft-standard-WSL2",
    "platform_system": "Linux",
    "platform_version": "#1 SMP Wed Nov 23 01:01:46 UTC 2022",
    "python_full_version": "3.8.10",
    "platform_python_implementation": "CPython",
    "python_version": "3.8",
    "sys_platform": "linux"
  }
}